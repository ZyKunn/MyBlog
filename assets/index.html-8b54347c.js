import{_ as r,r as s,o,c as u,a as l,e as i,w as n,b as a,d as e}from"./app-a153c100.js";const d="/MyBlog/assets/1683976360556-e1a4c13d.png",c="/MyBlog/assets/1683976374246-59097e4b.png",h="/MyBlog/assets/1683976389149-c9f2bd37.png",m="/MyBlog/assets/1683976399362-98f45ca7.png",g="/MyBlog/assets/1683976410829-6ed1eb4f.png",v="/MyBlog/assets/1683976443244-1779c1d3.png",x="/MyBlog/assets/1683976469549-f7f5312f.png",f="/MyBlog/assets/1683976483451-4970f54b.png",k="/MyBlog/assets/1683976501163-8417e033.png",b="/MyBlog/assets/1683976517624-d2590dad.png",_="/MyBlog/assets/1683976536141-a8a1e1be.png",y="/MyBlog/assets/1683976548572-54f825e2.png",q="/MyBlog/assets/1683976560105-5cfe8843.png",L="/MyBlog/assets/1683976585905-7ca017bf.png",S="/MyBlog/assets/1683976596037-21d099c0.png",w="/MyBlog/assets/1683976608527-007256c1.png",M="/MyBlog/assets/1683976619945-c66f5e5a.png",z="/MyBlog/assets/1683976635140-5e64f94b.png",B="/MyBlog/assets/1683976656079-21e80d0b.png",T="/MyBlog/assets/1683976670032-f9439dbc.png",N={},E=l("h1",{id:"🤔linux",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#🤔linux","aria-hidden":"true"},"#"),a(" 🤔Linux")],-1),I=l("hr",null,null,-1),O={class:"table-of-contents"},P=e('<p><strong>为什么要学 Linux ?</strong></p><ul><li>企业用人要求</li><li>个人发展要求</li></ul><p><strong>学习后能干什么？</strong><img src="'+d+'" alt="1683976360556"></p><h2 id="linux-简介" tabindex="-1"><a class="header-anchor" href="#linux-简介" aria-hidden="true">#</a> Linux 简介</h2><h3 id="不同应用领域的主流操作系统" tabindex="-1"><a class="header-anchor" href="#不同应用领域的主流操作系统" aria-hidden="true">#</a> 不同应用领域的主流操作系统</h3><ul><li>桌面操作系统 <ul><li>Windows （用户数量最多)</li><li>Mac OS（操作体验好，办公人士首选)</li><li>Linux（用户数量少)</li></ul></li><li>服务器操作系统 <ul><li>UNIX（安全、稳定、付费)</li><li>Linux（安全、稳定、免费、占有率高)</li><li>Windows Server (付费、占有率低)</li></ul></li><li>移动设备操作系统 <ul><li>Android (基于 Linux 、开源，主要用于智能手机、平板电脑和智能电视)</li><li>ios（苹果公司开发、不开源，用于苹果公司的产品，例如: iPhone、iPad )</li></ul></li><li>嵌入式操作系统 <ul><li>Linux（机顶盒、路由器、交换机)</li></ul></li></ul><h3 id="linux-发展历史" tabindex="-1"><a class="header-anchor" href="#linux-发展历史" aria-hidden="true">#</a> Linux 发展历史</h3><p>Linux 系统历史</p><ul><li>时间:1991 年</li><li>地点:芬兰赫尔辛基大学</li><li>人物:Linus Torvalds ( 21 岁)</li><li>语言:C 语言、汇编语言</li><li>logo:企鹅</li><li>特点:免费、开源、多用户、多任务</li></ul><h3 id="linux-系统版本" tabindex="-1"><a class="header-anchor" href="#linux-系统版本" aria-hidden="true">#</a> Linux 系统版本</h3><p>Linux 系统分为内核版和发行版</p><ul><li>内核版 <ul><li>由 Linus Torvalds 及其团队开发、维护</li><li>免费、开源</li><li>负责控制硬件</li></ul></li><li>发行版 <ul><li>基于 Linux 内核版进行扩展</li><li>由各个 Linux 厂商开发、维护</li><li>有收费版本和免费版本</li></ul></li></ul><p><strong>Linux 系统发行版</strong>:</p><ul><li>ubuntu:以桌面应用为主·</li><li>RedHat:应用最广泛、收费</li><li>CentOs: RedHat 的社区版、免费·</li><li>opensuSE:对个人完全免费、图形界面华丽</li><li>Fedora:功能完备、快速更新、免费</li><li>红旗 Linux:北京中科红旗软件技术有限公司开发 <img src="'+c+'" alt="1683976374246"></li></ul><h2 id="linux-安装" tabindex="-1"><a class="header-anchor" href="#linux-安装" aria-hidden="true">#</a> Linux 安装</h2><h3 id="安装方式介绍" tabindex="-1"><a class="header-anchor" href="#安装方式介绍" aria-hidden="true">#</a> 安装方式介绍</h3><p>Linux 系统的安装方式</p><ul><li>物理机安装:直接将操作系统安装到服务器硬件上</li><li>虚拟机安装:通过虚拟机软件安装</li></ul><p><strong>虚拟机</strong>( Virtual Machine)指通过<strong>软件</strong>模拟的具有完整硬件系统功能、运行在完全隔离环境中的完整计算机系统。</p><p>常用虚拟机软件</p><ul><li>VMware</li><li>VirtualBox</li><li>VMLite workStation</li><li>Qemu</li><li>HopeddotVos</li></ul><h3 id="安装-linux" tabindex="-1"><a class="header-anchor" href="#安装-linux" aria-hidden="true">#</a> 安装 Linux</h3><p><strong>安装方式-安装 VMWare</strong></p><p>直接双击运行资料中的 VMware 安装程序，根据提示完成安装即可</p><p><strong>安装 CentOS 镜像</strong></p><p>使用资料中提供的 CentOS 镜像文件来完成 Linux 系统的安装</p><h3 id="网卡设置" tabindex="-1"><a class="header-anchor" href="#网卡设置" aria-hidden="true">#</a> 网卡设置</h3><p>由于启动服务器时未加载网卡，导致 IP 地址初始化失败</p><p><img src="'+h+'" alt="1683976389149"></p><p>修改网络初始化配置，设定网卡在系统启动时初始化 <img src="'+m+'" alt="1683976399362"></p><h3 id="安装-ssh-连接工具" tabindex="-1"><a class="header-anchor" href="#安装-ssh-连接工具" aria-hidden="true">#</a> 安装 SSH 连接工具</h3><p>SSH ( Secure Shell)，建立在应用层基础上的安全协议</p><p>常用的 SSH 连接工具</p><ul><li>putty</li><li>secureCRT</li><li>xshell</li><li>finalshell</li></ul><p>通过 SSH 连接工具就可以实现从本地连接到远程的 Linux 服务器</p><h3 id="linux-和-windows-目录结构对比" tabindex="-1"><a class="header-anchor" href="#linux-和-windows-目录结构对比" aria-hidden="true">#</a> Linux 和 windows 目录结构对比</h3><p>Linux 系统中的目录</p><ul><li>/是所有目录的顶点</li><li>目录结构像一颗倒挂的树 <img src="'+g+'" alt="1683976410829"></li></ul><h3 id="linux-目录结构" tabindex="-1"><a class="header-anchor" href="#linux-目录结构" aria-hidden="true">#</a> Linux 目录结构</h3><ul><li>bin 存放二进制可执行文件</li><li>boot 存放系统引导时使用的各种文件</li><li>dev 存放设备文件</li><li>etc 存放系统配置文件</li><li>home 存放系统用户的文件</li><li>lib 存放程序运行所需的共享库和内核模块</li><li>opt 额外安装的可选应用程序包所放置的位置</li><li>root 超级用户目录</li><li>sbin 存放二进制可执行文件，只有 root 用户才能访问</li><li>tmp 存放临时文件</li><li>usr 存放系统应用程序</li><li>var 存放运行时需要改变数据的文件，例如日志文件 <img src="'+v+'" alt="1683976443244"></li></ul><h2 id="linux-常用命令" tabindex="-1"><a class="header-anchor" href="#linux-常用命令" aria-hidden="true">#</a> Linux 常用命令</h2><h3 id="linux-命令初体验" tabindex="-1"><a class="header-anchor" href="#linux-命令初体验" aria-hidden="true">#</a> Linux 命令初体验</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>ls</td><td>list</td><td>查看当前目录下的内容</td></tr><tr><td>2</td><td>pwd</td><td>print work directory</td><td>查看当前所在目录</td></tr><tr><td>3</td><td>cd [目录名]</td><td>change directory</td><td>切换目录</td></tr><tr><td>4</td><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>5</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>6</td><td>rm [文件名]</td><td>remove</td><td>删除指定文件</td></tr></tbody></table><p><strong>使用技巧</strong></p><ul><li>Tab 键自动补全</li><li>连续两次 Tab 键，给出操作提示</li><li>使用上下箭头快速调出曾经使用过的命令</li><li>使用 clear 命令或者 Ctrl+l 快捷键实现清屏</li></ul><p><strong>命令格式</strong></p><p>command 【-options】【parameter】</p><p>说明:</p><ul><li>command:命令名</li><li>【-options】:选项，可用来对命令进行控制，也可以省略</li><li>【parameter】:传给命令的参数，可以是零个、一个或者多个</li></ul><p>注意:</p><p>[]代表可选</p><p>命令名、选项、参数之间有空格进行分隔</p><h3 id="文件目录操作命令" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令" aria-hidden="true">#</a> 文件目录操作命令</h3><h4 id="文件目录操作命令ls" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令ls" aria-hidden="true">#</a> 文件目录操作命令<strong>ls</strong></h4><p>作用:显示指定目录下的内容</p><p>语法:ls [-al] [dir]</p><p>说明:</p><ul><li>-a 显示所有文件及目录(.开头的隐藏文件也会列出)</li><li>-l 除文件名称外，同时将文件型态(d 表示目录，-表示文件)、权限、拥有者、文件大小等信息详细列出</li></ul><p>注意: 由于我们使用 ls 命令时经常需要加入-l 选项，所以 Linux 为 ls -l 命令提供了一种简写方式，即 ll</p><h4 id="文件目录操作命令cd" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令cd" aria-hidden="true">#</a> 文件目录操作命令<strong>cd</strong></h4><p>作用:用于切换当前工作目录，即进入指定目录</p><p>语法:cd [dirName]</p><p>特殊说明:</p><ul><li>~表示用户的 home 目录</li><li>.表示目前所在的目录</li><li>..表示目前目录位置的上级目录</li></ul><p>举例:</p><ul><li>cd .. 切换到当前目录的上级目录</li><li>cd ~ 切换到用户的 home 目录</li><li>cd /usr/local 切换到/usr/local 目录</li></ul><h4 id="文件目录操作命令cat" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令cat" aria-hidden="true">#</a> 文件目录操作命令<strong>cat</strong></h4><p>作用:用于显示文件内容</p><p>语法: cat [-n] fileName</p><p>说明:</p><ul><li>-n :由 1 开始对所有输出的行数编号</li></ul><p>举例:</p><ul><li>cat /etc/profile 查看/etc 目录下的 profile 文件内容</li></ul><h4 id="文件目录操作命令more" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令more" aria-hidden="true">#</a> 文件目录操作命令<strong>more</strong></h4><p>作用:以分页的形式显示文件内容</p><p>语法: more fileName</p><p>操作说明:</p><ul><li>回车键 向下滚动一行</li><li>空格键 向下滚动一屏</li><li>b 返回上一屏</li><li>q 或者 Ctrl+C 退出 more</li></ul><p>举例:</p><p>more /etc/profile 以分页方式显示/etc 目录下的 profile 文件内容</p><h4 id="文件目录操作命令tail" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令tail" aria-hidden="true">#</a> 文件目录操作命令<strong>tail</strong></h4><p>作用:查看文件末尾的内容</p><p>语法:tail [-f] fileName</p><p>说明:</p><ul><li>-f :动态读取文件末尾内容并显示，通常用于日志文件的内容输出</li></ul><p>举例:</p><ul><li>tail /etc/profile 显示/etc 目录下的 profile 文件末尾 10 行的内容</li><li>tail -20 /etc/profile 显示/etc 目录下的 profile 文件末尾 20 行的内容</li><li>tail -f /itcast/my.log 动态读取/itcast 目录下的 my.log 文件末尾内容并显示</li></ul><h4 id="文件目录操作命令mkdir" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令mkdir" aria-hidden="true">#</a> 文件目录操作命令<strong>mkdir</strong></h4><p>作用:创建目录</p><p>语法:mkdir [-p] dirName</p><p>说明:</p><ul><li>-p︰确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</li></ul><p>举例:</p><ul><li>mkdir itcast 　在当前目录下，建立一个名为 itcast 的子目录</li><li>mkdir-p itcast/test 　在工作目录下的 itcast 目录中建立一个名为 test 的子目录，若 itcast 目录不存在，则建立一个</li></ul><h4 id="文件目录操作命令-rmdir" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令-rmdir" aria-hidden="true">#</a> 文件目录操作命令 rmdir</h4><p>作用:删除空目录</p><p>语法:rmdir [-p] dirName</p><p>说明:</p><ul><li>-p:当子目录被删除后使父目录为空目录的话，则一并删除</li></ul><p>举例:</p><ul><li>rmdir itcast 　删除名为 itcast 的空目录</li><li>rmdir-p itcast/test 　删除 itcast 目录中名为 test 的子目录，若 test 目录删除后 itcast 目录变为空目录，则也被删除</li><li>rmdir itcast*　删除名称以 itcast 开始的空目录</li></ul><h4 id="文件目录操作命令-rm" tabindex="-1"><a class="header-anchor" href="#文件目录操作命令-rm" aria-hidden="true">#</a> 文件目录操作命令 rm</h4><p>作用:删除文件或者目录</p><p>语法:rm[-rf] name</p><p>说明:</p><ul><li>-r:将目录及目录中所有文件（目录）逐一删除，即递归删除</li><li>-f:无需确认，直接删除</li></ul><p>举例:</p><ul><li>rm -r itcast/删除名为 itcast 的目录和目录中所有文件，删除前需确认</li><li>rm -rf itcast/无需确认，直接删除名为 itcast 的目录和目录中所有文件</li><li>rm -f hello.txt 无需确认，直接删除 hello.txt 文件</li></ul><h3 id="拷贝移动命令" tabindex="-1"><a class="header-anchor" href="#拷贝移动命令" aria-hidden="true">#</a> 拷贝移动命令</h3><h4 id="拷贝移动命令-cp" tabindex="-1"><a class="header-anchor" href="#拷贝移动命令-cp" aria-hidden="true">#</a> 拷贝移动命令 cp</h4><p>作用:用于复制文件或目录语法:cp [-r] source dest</p><p>说明:</p><ul><li>-r:如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</li></ul><p>举例:</p><ul><li>cp hello.txt itcast/ 将 hello.txt 复制到 itcast 目录中</li><li>cp hello.txt . / hi.txt 将 hello.txt 复制到当前目录，并改名为 hi.txt</li><li>cp -r itcast/ ./itheimal 将 itcast 目录和目录下所有文件复制到 itheima 目录下</li><li>cp -r itcast/* ./ itheima/将 itcast 目录下所有文件复制到 itheima 目录下</li></ul><h4 id="拷贝移动命令-mv" tabindex="-1"><a class="header-anchor" href="#拷贝移动命令-mv" aria-hidden="true">#</a> 拷贝移动命令 mv</h4><p>作用:为文件或目录改名、或将文件或目录移动到其它位置</p><p>语法: mv source dest</p><p>举例:</p><ul><li>mv hello.txt hi.txt 将 hello.txt 改名为 hi.txt</li><li>mv hi.txt itheima/ 将文件 hi.txt 移动到 itheima 目录中</li><li>mv hi.txt itheima/ hello.txt 将 hi.txt 移动到 itheima 目录中，并改名为 hello.txt</li><li>mv itcast/ itheima/如果 itheima 目录不存在，将 itcast 目录改名为 itheima</li><li>mv itcast/ itheima/ 如果 itheima 目录存在，将 itcast 目录移动到 itheima 目录中</li></ul><h3 id="打包压缩命令-tar" tabindex="-1"><a class="header-anchor" href="#打包压缩命令-tar" aria-hidden="true">#</a> 打包压缩命令 tar</h3><p>作用:对文件进行打包、解包、压缩、解压</p><p>语法: tar [-zcxvf] fileName [files]</p><p>包文件后缀为.tar 表示只是完成了打包，并没有压缩</p><p>包文件后缀为.tar.gz 表示打包的同时还进行了压缩</p><p>说明:</p><ul><li>-z∶ z 代表的是 gzip，通过 gzip 命令处理文件，gzip 可以对文件压缩或者解压</li><li>-c: c 代表的是 create，即创建新的包文件</li><li>-x: x 代表的是 extract，实现从包文件中还原文件</li><li>-v: v 代表的是 verbose，显示命令的执行过程</li><li>-f: f 代表的是 file，用于指定包文件的名称</li></ul><h3 id="文本编辑命令-vi-vim" tabindex="-1"><a class="header-anchor" href="#文本编辑命令-vi-vim" aria-hidden="true">#</a> 文本编辑命令 vi/vim</h3><p>作用: vi 命令是 Linux 系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于 Windows 中的记事本</p><p>语法: vi fileName</p><p>说明:</p><p>1、 vim 是从 vi 发展来的一个功能更加强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中 vim 更加常用。</p><p>2、要使用 vim 命令，需要我们自己完成安装。可以使用该命令来完成安装:yum install vim</p><h4 id="文本编辑命令-vim" tabindex="-1"><a class="header-anchor" href="#文本编辑命令-vim" aria-hidden="true">#</a> 文本编辑命令 vim</h4><p>作用:对文件内容进行编辑，vim 其实就是一个文本编辑器</p><p>语法:vim fileName</p><p>说明:</p><p>1、在使用 vim 命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</p><p>2、vim 在进行文本编辑时共分为三种模式，分别是命令模式(Command mode)，插入模式（Insert mode)和底行模式(Last line mode)。这三种模式之间可以相互切换。我们在使用 vim 时一定要注意我们当前所处的是哪种模式。</p><p>针对 vim 中的三种模式说明如下:</p><p>1、命令模式</p><ul><li>命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G)</li><li>通过 vim 命令打开文件后，默认进入命令模式</li><li>另外两种模式需要首先进入命令模式，才能进入彼此</li></ul><p>2、插入模式</p><ul><li>插入模式下可以对文件内容进行编辑</li><li>在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现【insert】字样</li><li>在插入模式下按下 ESC 键，回到命令模式</li></ul><p>3、底行模式</p><ul><li>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</li><li>在命令模式下按下[:,/]任意一个，可以进入底行模式</li><li>通过/方式进入底行模式后，可以对文件内容进行查找</li><li>通过:方式进入底行模式后，可以输入 wq（保存并退出）、q!(不保存退出） 、 set nu(显示行号)</li></ul><h3 id="查找命令" tabindex="-1"><a class="header-anchor" href="#查找命令" aria-hidden="true">#</a> 查找命令</h3><h4 id="查找命令-find" tabindex="-1"><a class="header-anchor" href="#查找命令-find" aria-hidden="true">#</a> 查找命令 find</h4><p>作用:在指定目录下查找文件</p><p>语法:find dirName -option fileName</p><p>举例:</p><ul><li>find . -name &quot;*.java&quot; 在当前目录及其子目录下查找.java 结尾文件</li><li>find /itcast -name &quot;*.java&quot; 在/itcast 目录及其子目录下查找.java 结尾的文件</li></ul><h4 id="查找命令-grep" tabindex="-1"><a class="header-anchor" href="#查找命令-grep" aria-hidden="true">#</a> 查找命令 grep</h4><p>作用:从指定文件中查找指定的文本内容</p><p>语法: grep word fileName</p><p>举例:</p><ul><li>grep Hello Helloworld.java 查找 Helloworld.java 文件中出现的 Hello 字符串的位置</li><li>grep hello *.java 查找当前目录中所有.java 结尾的文件中包含 hello 字符串的位置</li></ul><h2 id="linux-软件安装" tabindex="-1"><a class="header-anchor" href="#linux-软件安装" aria-hidden="true">#</a> Linux 软件安装</h2><h3 id="软件安装方式" tabindex="-1"><a class="header-anchor" href="#软件安装方式" aria-hidden="true">#</a> 软件安装方式</h3><ul><li>二进制发布包安装 <ul><li>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</li></ul></li><li>rpm 安装 <ul><li>软件已经按照 redhat 的包管理规范进行打包，使用 rpm 命令进行安装，不能自行解决库依赖问题</li></ul></li><li>yum 安装 <ul><li>一种在线软件安装方式，本质上还是 rpm 安装，自动下载安装包并安装，安装过程中自动解决库依赖问题</li></ul></li><li>源码编译安装 <ul><li>软件以源码工程的形式发布，需要自己编译打包</li></ul></li></ul><h3 id="安装-jdk" tabindex="-1"><a class="header-anchor" href="#安装-jdk" aria-hidden="true">#</a> 安装 jdk</h3><p>操作步骤:</p><p>1、使用 FinalShell 自带的上传工具将 jdk 的二进制发布包上传到 Linux jdk-8u171-linux-×64.tar.gz</p><p>2、解压安装包，命令为 tar -zxvf jdk-8u171-linux-x64.tar.gz -C/usr/local</p><p>3、配置环境变量，使用 vim 命令修改/etc/profile 文件，在文件末尾加入如下配置</p><ul><li>JAVA_HOME=/usr/local/jdk1.8.0_171</li><li>PATH=$JAVA_HOME/bin :$PATH</li></ul><p>4、重新加载 profile 文件，使更改的配置立即生效，命令为 source /etc/profile</p><p>5、检查安装是否成功，命令为 java -version</p><h3 id="安装-tomcat" tabindex="-1"><a class="header-anchor" href="#安装-tomcat" aria-hidden="true">#</a> 安装 Tomcat</h3><h4 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤" aria-hidden="true">#</a> 操作步骤:</h4><p>1、使用 FinalShell 自带的上传工具将 Tomcat 的二进制发布包上传到 Linuxapache-tomcat-7.0.57.tar.gz</p><p>2、解压安装包，命令为 tar -zxvf apache-tomcat-7.0.57.tar.gz -C/usr/local</p><p>3、进入 Tomcat 的 bin 目录启动服务，命令为 sh startup.sh 或者./startup.sh</p><h4 id="验证-tomcat-启动是否成功-有多种方式" tabindex="-1"><a class="header-anchor" href="#验证-tomcat-启动是否成功-有多种方式" aria-hidden="true">#</a> 验证 Tomcat 启动是否成功，有多种方式:</h4><ul><li><p>查看启动日志</p><p>more /usr/local/apache-tomcat-7.0.57/logs/catalina.out</p><p>tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out</p></li><li><p>查看进程 ps -ef | grep tomcat <img src="'+x+'" alt="1683976469549"></p></li></ul><p><strong>注意:</strong></p><ul><li>ps 命令是 linux 下非常强大的进程查看命令，通过 ps -ef 可以查看当前运行的所有进程的详细信息</li><li>“|”在 Linux 中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入</li><li>使用 ps 命令查看进程时，经常配合管道符和查找命令 grep 一起使用，来查看特定进程</li></ul><h4 id="防火墙操作" tabindex="-1"><a class="header-anchor" href="#防火墙操作" aria-hidden="true">#</a> 防火墙操作:</h4><ul><li>查看防火墙状态(systemctl status firewalld、firewall-cmd --state)</li><li>暂时关闭防火墙(systemctl stop firewalld)</li><li>永久关闭防火墙(systemctl disable firewalld)</li><li>开启防火墙(systemctl start firewalld)</li><li>开放指定端口(firewall-cmd --zone=public --add-port=8080/tcp --permanent)</li><li>关闭指定端口(firewall-cmd --zone=public --remove-port=8080/tcp --permanent)</li><li>立即生效(firewall-cmd --reload)</li><li>查看开放的端口(firewall-cmd --zone=public --list-ports)</li></ul><p><strong>注意:</strong></p><p>1、systemctl 是管理 Linux 中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</p><p>2、firewall-cmd 是 Linux 中专门用于控制防火墙的命令</p><p>3、为了保证系统安全，服务器的防火墙不建议关闭</p><h4 id="停止-tomcat-服务的方式" tabindex="-1"><a class="header-anchor" href="#停止-tomcat-服务的方式" aria-hidden="true">#</a> 停止 Tomcat 服务的方式:</h4><ul><li><p>运行 Tomcat 的 bin 目录中提供的停止服务的脚本文件<code>shutdown.sh</code></p><p>sh shutdown.sh</p><p>./shutdown.sh</p></li><li><p>结束 Tomcat 进程 查看 Tomcat 进程，获得进程 id <img src="'+f+'" alt="1683976483451"> 执行命令结束进程<strong>kill -9 7742</strong></p></li></ul><p><strong>注意:</strong> kill 命令是 Linux 提供的用于结束进程的命令，-9 表示强制结束</p><h3 id="安装-mysql" tabindex="-1"><a class="header-anchor" href="#安装-mysql" aria-hidden="true">#</a> 安装 MySQL</h3><p>1、检测当前系统中是否安装 MySQL 数据库</p><ul><li>rpm -qa 查询当前系统中安装的所有软件</li><li>rpm -qa l grep mysql 查询当前系统中安装的名称带 mysql 的软件</li><li>rpm -qa l grep mariadb 查询当前系统中安装的名称带 mariadb 的软件 <img src="'+k+'" alt="1683976501163"></li></ul><p>RPM（ Red-Hat Package Manager ）RPM 软件包管理器，是红帽 Linux 用于管理和安装软件的工具</p><p><strong>注意</strong>：如果当前系统中已经安装有 MySQL 数据库，安装将失败。CentoS7 自带 mariadb，与 My5QL 数据库冲突</p><p>2、卸载已经安装的冲突软件</p><ul><li>rpm -e --nodeps 软件名称 　　　　卸载软件</li><li>rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</li></ul><p>3、将资料中提供的 MySQL 安装包上传到 Linux 并解压</p><ul><li>mkdir /usr/local/mysql</li><li>tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql</li></ul><p>4、按照顺序安装 rpm 软件包</p><ul><li><p>rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</p></li><li><p>rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</p></li><li><p>rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</p></li><li><p>rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</p></li><li><p>rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</p></li><li><p>yum install libaio</p></li><li><p>yum install net-tools</p></li><li><p>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</p><p>说明 1:安装过程中提示缺少 net-tools 依赖，使用 yum 安装</p><p>说明 2:可以通过指令升级现有软件及系统内核</p></li><li><p>yum update</p></li></ul><p>5、启动 mysql</p><ul><li>systemctl status mysqld 查看 mysql 服务状态</li><li>systemctl start mysqld 启动 mysql 服务 <img src="'+b+`" alt="1683976517624"></li></ul><p>说明:可以设置开机时启动 mysql 服务，避免每次开机启动 mysql</p><ul><li>systemctl enable mysqld 开机启动 mysql 服务</li><li>netstat -tunlp 查看已经启动的服务</li><li>netstat -tunlp | grep mysql</li><li>ps -ef | grep mysql 查看 mysql 进程</li></ul><p>6、登录 MySQL 数据库，查阅临时密码</p><ul><li>cat /var/log/mysqld.log 查看文件内容</li><li>cat /var/log/mysqld.log l grep password 查看文件内容中包含 password 的行信息</li></ul><p>7、登录 MySQL，修改密码，开放访问权限</p><ul><li>mysql -urpot -p 登录 mysql（使用临时密码登录)</li></ul><p>修改密码</p><ul><li>set global validate_password_length=4; 设置密码长度最低位数</li><li>set global validate_password_policy=LOW; 设置密码安全等级低，便于密码可以修改成 root</li><li>set password = password(&#39;root&#39;); 设置密码为 root</li></ul><p>开启访问权限</p><ul><li><p>grant all on <em>.</em> to &#39;root&#39;@&#39;%&#39; identified by &#39;root&#39;;</p><p>flush privileges;</p></li></ul><p>8、测试 Mysql 数据库是否正常工作</p><ul><li>showdatabase;</li></ul><h3 id="安装-lrzsz" tabindex="-1"><a class="header-anchor" href="#安装-lrzsz" aria-hidden="true">#</a> 安装 lrzsz</h3><p><strong>操作步骤:</strong></p><p>1、搜索 lrzsz 安装包，命令为 <strong>yum list lrzsz</strong></p><p>2、使用 yum 命令在线安装，命令为<strong>yum install lrzsz.x86_64</strong></p><p><strong>注意：</strong> Yum(全称为 Yellow dog Updater, Modified)是一个在 Fedora 和 RedHat 以及 CentoS 中的 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><h2 id="项目部署" tabindex="-1"><a class="header-anchor" href="#项目部署" aria-hidden="true">#</a> 项目部署</h2><h3 id="手工部署项目" tabindex="-1"><a class="header-anchor" href="#手工部署项目" aria-hidden="true">#</a> 手工部署项目</h3><p>一、在 IDEA 中开发 SpringBoot 项目并打成 jar 包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pom 文件必须加入上面代码</p><p>二、将 jar 包上传到 Linux 服务器</p><ul><li>mkdir /usr/local/app 创建目录，将项目 jar 包放到此目录</li></ul><p>三、启动 Spring 程序 <img src="`+_+'" alt="1683976536141"></p><p><img src="'+y+'" alt="1683976548572"></p><p>四、检查防火墙，确保 8080 端口对外开放，访问 SpringBoot 项目</p><p><img src="'+q+'" alt="1683976560105"></p><p>五、改为后台运行 SpringBoot 程序，并将日志输出到日志文件目前程序运行的问题</p><ul><li>线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行</li><li>线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息</li></ul><p><img src="'+L+'" alt="1683976585905"></p><p>六、停止 SpringBoot 程序 <img src="'+S+'" alt="1683976596037"></p><h3 id="通过-shell-脚本自动部署项目" tabindex="-1"><a class="header-anchor" href="#通过-shell-脚本自动部署项目" aria-hidden="true">#</a> 通过 Shell 脚本自动部署项目</h3><p>操作步骤:</p><ul><li>1、在 Linux 中安装 Git</li><li>2、使用 Git 克隆代码</li><li>3、在 Linux 中安装 maven</li><li>4、编写 Shell 脚本（拉取代码、编译、打包、启动）</li><li>5、为用户授予执行 Shell 脚本的权限</li><li>6、执行 Shell 脚本</li></ul><p><img src="'+w+'" alt="1683976608527"></p><h4 id="_1、在-linux-中安装-git" tabindex="-1"><a class="header-anchor" href="#_1、在-linux-中安装-git" aria-hidden="true">#</a> 1、在 Linux 中安装 Git</h4><ul><li>yum list git 列出 git 安装包</li><li>yum install git 在线安装 git</li></ul><h4 id="_2、使用-git-克隆代码" tabindex="-1"><a class="header-anchor" href="#_2、使用-git-克隆代码" aria-hidden="true">#</a> 2、使用 Git 克隆代码</h4>',238),j=l("li",null,"cd /usr/local/",-1),A={href:"https://github.com/SummerW1nd/helloworld.git",target:"_blank",rel:"noopener noreferrer"},V=e('<h4 id="_3、在-linux-中安装-maven" tabindex="-1"><a class="header-anchor" href="#_3、在-linux-中安装-maven" aria-hidden="true">#</a> 3、在 Linux 中安装 maven</h4><p><img src="'+M+'" alt="1683976619945"></p><h4 id="_4、将资料中提供的-shell-脚本文件复制到-linux-bootstart-sh" tabindex="-1"><a class="header-anchor" href="#_4、将资料中提供的-shell-脚本文件复制到-linux-bootstart-sh" aria-hidden="true">#</a> 4、将资料中提供的 Shell 脚本文件复制到 Linux (bootStart.sh)</h4><ul><li>Shell 脚本(shell script)，是一种 Linux 系统中的脚本程序。</li><li>使用 Shell 脚本编程跟 JavaScript、Java 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了.</li><li>对于 Shell 脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件 bootStart.sh 即可。</li></ul><h4 id="五、为用户授权" tabindex="-1"><a class="header-anchor" href="#五、为用户授权" aria-hidden="true">#</a> 五、为用户授权</h4><p>chmod（英文全拼: change mode）命令是控制用户对文件的权限的命令</p><p>Linux 中的权限分为:读(r)、写(w)、执行(x)三种权限</p><p>Linux 的文件调用权限分为三级︰文件所有者（Owner)、用户组（Group)、其它用户(Other Users)</p><p>只有文件的所有者和超级用户可以修改文件或目录的权限</p><p>要执行 Shell 脚本需要有对此脚本文件的执行权限，如果没有则不能执行</p><p><img src="'+z+'" alt="1683976635140"></p><p>chmod 命令可以使用八进制数来指定权限</p><p><strong>举例</strong>:</p><ul><li>chmod 777 bootStart.sh 为所有用户授予读、写、执行权限</li><li>chmod 755 bootStart.sh 为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</li><li>chmod 210 bootstart.sh 为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</li></ul><p><strong>注意</strong>:三位数字分别代表不同用户的权限</p><ul><li>第 1 位表示文件拥有者的权限</li><li>第 2 位表示同组用户的权限</li><li>第 3 位表示其他用户的权限</li></ul><p><img src="'+B+`" alt="1683976656079"></p><h4 id="设置静态-ip" tabindex="-1"><a class="header-anchor" href="#设置静态-ip" aria-hidden="true">#</a> 设置静态 ip</h4><p>修改文件/etc/sysconfig/network-scripts/ifcfg-ens33，内容如下:</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">TYPE</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">Ethernet</span>&quot;</span>
<span class="token key attr-name">PROXY_METHOD</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">none</span>&quot;</span>
<span class="token key attr-name">BROWSER_ONLY</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">no</span>&quot;</span>
<span class="token key attr-name">BOOTPROTO</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;static&quot;#使用静态IP地址，默认为dhcp</span>
<span class="token key attr-name">IPADDR</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;192.168.138.100&quot;#设置的静态IP地址</span>
<span class="token key attr-name">NETMASK</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;255.255.255.0&quot;#子网掩码</span>
<span class="token key attr-name">GATEWAY</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;192.168.138.2&quot;#网关地址</span>
<span class="token key attr-name">DNS1</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;192.168.138. 2&quot;#DNS服务器</span>
<span class="token key attr-name">DEFROUTE</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">yes</span>&quot;</span>
<span class="token key attr-name">IPV4_FAILURE_FATAL</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">no</span>&quot;</span>
<span class="token key attr-name">IPV6INIT</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">yes </span>&quot;</span>
<span class="token key attr-name">IPV6_AUTOCONF</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">yes</span>&quot;</span>
<span class="token key attr-name">IPV6_DEFROUTE</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">yes</span>&quot;</span>
<span class="token key attr-name">IPV6_FAILURE_FATAL</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">no</span>&quot;</span>
<span class="token key attr-name">IPV6_ADDR_GEN_MODE</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">stable-privacy</span>&quot;</span>
<span class="token key attr-name">NAME</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">ens33</span>&quot;</span>
<span class="token key attr-name">UUID</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">95b614cd-79b0-4755-be8d-99f1cca7271b</span>&quot;</span>
<span class="token key attr-name">DEVICE</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">ens33</span>&quot;</span>
<span class="token key attr-name">ONBOOT</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;yes&quot;#是否开机启用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+T+'" alt="1683976670032"></p>',21);function C(H,R){const t=s("router-link"),p=s("ExternalLinkIcon");return o(),u("div",null,[E,I,l("nav",O,[l("ul",null,[l("li",null,[i(t,{to:"#linux-简介"},{default:n(()=>[a("Linux 简介")]),_:1}),l("ul",null,[l("li",null,[i(t,{to:"#不同应用领域的主流操作系统"},{default:n(()=>[a("不同应用领域的主流操作系统")]),_:1})]),l("li",null,[i(t,{to:"#linux-发展历史"},{default:n(()=>[a("Linux 发展历史")]),_:1})]),l("li",null,[i(t,{to:"#linux-系统版本"},{default:n(()=>[a("Linux 系统版本")]),_:1})])])]),l("li",null,[i(t,{to:"#linux-安装"},{default:n(()=>[a("Linux 安装")]),_:1}),l("ul",null,[l("li",null,[i(t,{to:"#安装方式介绍"},{default:n(()=>[a("安装方式介绍")]),_:1})]),l("li",null,[i(t,{to:"#安装-linux"},{default:n(()=>[a("安装 Linux")]),_:1})]),l("li",null,[i(t,{to:"#网卡设置"},{default:n(()=>[a("网卡设置")]),_:1})]),l("li",null,[i(t,{to:"#安装-ssh-连接工具"},{default:n(()=>[a("安装 SSH 连接工具")]),_:1})]),l("li",null,[i(t,{to:"#linux-和-windows-目录结构对比"},{default:n(()=>[a("Linux 和 windows 目录结构对比")]),_:1})]),l("li",null,[i(t,{to:"#linux-目录结构"},{default:n(()=>[a("Linux 目录结构")]),_:1})])])]),l("li",null,[i(t,{to:"#linux-常用命令"},{default:n(()=>[a("Linux 常用命令")]),_:1}),l("ul",null,[l("li",null,[i(t,{to:"#linux-命令初体验"},{default:n(()=>[a("Linux 命令初体验")]),_:1})]),l("li",null,[i(t,{to:"#文件目录操作命令"},{default:n(()=>[a("文件目录操作命令")]),_:1})]),l("li",null,[i(t,{to:"#拷贝移动命令"},{default:n(()=>[a("拷贝移动命令")]),_:1})]),l("li",null,[i(t,{to:"#打包压缩命令-tar"},{default:n(()=>[a("打包压缩命令 tar")]),_:1})]),l("li",null,[i(t,{to:"#文本编辑命令-vi-vim"},{default:n(()=>[a("文本编辑命令 vi/vim")]),_:1})]),l("li",null,[i(t,{to:"#查找命令"},{default:n(()=>[a("查找命令")]),_:1})])])]),l("li",null,[i(t,{to:"#linux-软件安装"},{default:n(()=>[a("Linux 软件安装")]),_:1}),l("ul",null,[l("li",null,[i(t,{to:"#软件安装方式"},{default:n(()=>[a("软件安装方式")]),_:1})]),l("li",null,[i(t,{to:"#安装-jdk"},{default:n(()=>[a("安装 jdk")]),_:1})]),l("li",null,[i(t,{to:"#安装-tomcat"},{default:n(()=>[a("安装 Tomcat")]),_:1})]),l("li",null,[i(t,{to:"#安装-mysql"},{default:n(()=>[a("安装 MySQL")]),_:1})]),l("li",null,[i(t,{to:"#安装-lrzsz"},{default:n(()=>[a("安装 lrzsz")]),_:1})])])]),l("li",null,[i(t,{to:"#项目部署"},{default:n(()=>[a("项目部署")]),_:1}),l("ul",null,[l("li",null,[i(t,{to:"#手工部署项目"},{default:n(()=>[a("手工部署项目")]),_:1})]),l("li",null,[i(t,{to:"#通过-shell-脚本自动部署项目"},{default:n(()=>[a("通过 Shell 脚本自动部署项目")]),_:1})])])])])]),P,l("ul",null,[j,l("li",null,[a("git clone "),l("a",A,[a("https://github.com/SummerW1nd/helloworld.git"),i(p)])])]),V])}const F=r(N,[["render",C],["__file","index.html.vue"]]);export{F as default};
