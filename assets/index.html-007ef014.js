import{_ as e,r as c,o,c as l,a as n,e as t,w as p,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1605698553122-b2d280ba.png",k={},d=n("h1",{id:"_02-常用类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_02-常用类","aria-hidden":"true"},"#"),s(" 02 - 常用类 🏄")],-1),r={class:"table-of-contents"},m=i(`<h2 id="objects-类" tabindex="-1"><a class="header-anchor" href="#objects-类" aria-hidden="true">#</a> Objects 类</h2><p>Object 类是所有 java 类的顶层父类（祖宗类），但是 Objects 是从 Java7 开始新增的一个对于 java 对象进行空指针安全操作的工具类</p><ul><li>Objects 类是一个工具类</li><li>Objects 对外不提供构造器，因此无法创建对象</li><li>Objects 类中的所有方法都是 static</li><li>提供的是对于对象的空指针安全操作的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;softeem&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">//		if(u2 != null) {</span>
<span class="token comment">//			System.out.println(u2.equals(u1));</span>
<span class="token comment">//		}</span>
<span class="token comment">//空指针安全的对象比较</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//空指针安全的toString</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对象若为null则输出“null”字符串</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对象若为null则输出“0”</span>

<span class="token comment">//空指针安全的hashCode</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//为空判断</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//不为空判断</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//检查对象不为空，若为空则抛出NullPointerException</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="random-类" tabindex="-1"><a class="header-anchor" href="#random-类" aria-hidden="true">#</a> Random 类</h2><p>​ Math 类中提供了一个<code>random()</code>的方法,用于随机一个从 0.0~1.0 之间的浮点数，当实际需求有个性化的要求时，只能通过计算获取其他类型的随机数，实际操作相对比较麻烦；因此，Java 中还提供了另一个专门用于生成各种需求的随机数类型,比如，随机整数，随机浮点数，随机布尔值。</p><p><strong>构造器：</strong></p><ul><li>Random()</li></ul><p><strong>常见方法：</strong></p><ul><li>nextBoolean()：随机一个布尔值</li><li>nextDouble()：随机一个 0.0~1.0 之间的 double 值</li><li>nextInt()：随机一个 int 范围内的整数值</li><li><strong>nextInt(int bounds)：随机一个从 0~bounds-1 位的整数值</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RandomGeneratorHolder</span><span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> randomNumberGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SOURCE</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//随机指定长度位验证码</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">genCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">RandomGeneratorHolder</span><span class="token punctuation">.</span>randomNumberGenerator<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token constant">SOURCE</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            code <span class="token operator">+=</span> <span class="token constant">SOURCE</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//随机布尔值</span>
        <span class="token keyword">boolean</span> f <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//随机一个从0.0~1.0之间的浮点数</span>
        <span class="token keyword">double</span> d <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//随机一个5以内的整数</span>
        i <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//随机一个5(含)~10(含)之间的整数</span>
        i <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//随机生成指定长度的验证码，包含0-9A-Za-z之间的字符</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token function">genCode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file-类" tabindex="-1"><a class="header-anchor" href="#file-类" aria-hidden="true">#</a> File 类</h2><p>​ File 类是来自于<code>java.io</code>包中的一个用于处理本机操作系统中的文件，文件可以是<strong>目录</strong>也可以是一个<strong>标准文件</strong>；File 类是用于在 Java 中实现跟本机文件系统进行关联的操作类。其中包含一些常见的文件操作：创建文件/目录，查看文件的状态，删除文件等。</p><h3 id="常见属性" tabindex="-1"><a class="header-anchor" href="#常见属性" aria-hidden="true">#</a> 常见属性</h3><table><thead><tr><th>常量</th><th>解释</th></tr></thead><tbody><tr><td>pathSeparator</td><td>获取与本机系统相关的路径分隔符（windows 是&quot;;&quot;符号,Linux 是”:“符号）</td></tr><tr><td>separator</td><td>获取与本机系统相关的目录分隔符（windows 是”\\“，Linux 是”/“）</td></tr></tbody></table><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h3><table><thead><tr><th><code>File(File parent, String child)</code> 使用父目录所表示的 File 对象，结合子文件名构建新的 File 对象</th></tr></thead><tbody><tr><td><code>File(String pathname)</code> 根据提供的文件路径构建一个 File 对象</td></tr><tr><td><code>File(String parent, String child)</code> 从父路径名字符串和子路径名字符串创建新的 <code>File</code>实例。</td></tr><tr><td><code>File(URI uri)</code> 通过将给定的 <code>file:</code> URI 转换为抽象路径名来创建新的 <code>File</code>实例。</td></tr></tbody></table><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><ul><li>createNewFile() 创建新文件（标准文件）</li><li>exists() 判断 File 对象是否存在</li><li>delete() 删除 File 对象所表示的文件或者目录(空目录)</li><li>deleteOnExit() 当 JVM 结束时删除</li><li>getName() 获取 File 对象所表示的文件名称</li><li>getParent() 获取 File 所指的文件或者目录的父路径</li><li>isFile() 判断当前 File 所指的是否是标准文件</li><li>isDirectory() 判断当前 File 所指的是否是目录</li><li>isHidden() 判断当前 File 对象是否是隐藏目录</li><li>lastModified() 获取最后修改时间</li><li>length() 获取 File 所表示文件大小(目录为 4096)</li><li>list() 获取 File 所表示目录下所有子文件的名称数组</li><li>listFiles() 获取 File 对象所表示目录下的所有子 File 数组</li><li>listFiles(FileFilter filter) 通过文件过滤器将 File 所表示目录中符合条件的 File 对象过滤出来</li><li>listRoots() 获取当前电脑可用的磁盘根</li><li>mkdir() 创建当前 File 所表示的目录(一级)</li><li>mkdirs() 创建当前 File 所表示的目录(多级)</li><li>renameTo(File file) 重命名文件</li></ul><p><strong>测试一：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo1</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

		<span class="token comment">//获取与本机系统相关的路径分割符</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// windows是;		linux是:</span>

		<span class="token comment">//获取与本机系统相关的名称（目录）分割符</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//windows是 \\ 			linux是 /</span>
<span class="token comment">//		System.out.println(File.separatorChar);</span>

		<span class="token comment">//通过java程序操作本地文件，在java中就必须存在文件对象(逻辑)</span>

		<span class="token comment">//根据提供的文件的绝对路径（abstract path）获取文件对象</span>
		<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/music_db.sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//根据提供的文件相对路径（relative path）获取文件对象</span>
		<span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//输出File对象所表示文件的绝对路径</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//输出File对象所有表示文件的相对路径</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//判断文件的可用性：可执行，可读，可写</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">canExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//判断文件是否存在</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件（或目录）是否存在--&gt;&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test/com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//创建新文件（标准文件）前提：父目录必须存在，否则IO异常</span>
		<span class="token keyword">boolean</span> b <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建结果---&gt;&quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

		file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\带班资料\\\\2020\\\\j2009\\\\code\\\\part1-javabase\\\\lesson17\\\\test\\\\org\\\\softeem\\\\demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//创建目录(创建一级目录)</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一级目录创建结果---&gt;&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建多级目录---&gt;&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//		Random r = new Random();</span>
<span class="token comment">//		for (int i = 0; i &lt; 1000; i++) {</span>
<span class="token comment">//			File f3 = new File(file2, r.nextInt(10000)+&quot;&quot;+i);</span>
<span class="token comment">//			if(f3.mkdirs()) {</span>
<span class="token comment">//				System.out.println(f3.getAbsolutePath()+&quot;创建成功!&quot;);</span>
<span class="token comment">//			}</span>
<span class="token comment">//		}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试二：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo2</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

		<span class="token comment">// 创建临时文件</span>
<span class="token comment">//		File f = File.createTempFile(&quot;softeem&quot;, &quot;.log&quot;,new File(&quot;test&quot;));</span>
<span class="token comment">//		System.out.println(f.getAbsolutePath());</span>

<span class="token comment">//		if(f.exists()) {</span>
<span class="token comment">//			立即删除文件</span>
<span class="token comment">//			boolean b = f.delete();</span>
<span class="token comment">//			System.out.println(&quot;删除结果：&quot;+b);</span>
<span class="token comment">//		}</span>

		<span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 删除目录的前提是目录下没有任何子文件或者子目录</span>
<span class="token comment">//		System.out.println(&quot;删除目录--&gt;&quot;+f2.delete());</span>
<span class="token comment">//		当jvm结束才删除</span>
<span class="token comment">//		f2.deleteOnExit();</span>

<span class="token comment">//		System.out.println(5/0);</span>

		<span class="token comment">// 休眠5秒</span>
<span class="token comment">//		Thread.sleep(10000);</span>
		<span class="token comment">// 返回当前文件所在磁盘的剩余空间(字节)</span>
		<span class="token keyword">long</span> size <span class="token operator">=</span> f2<span class="token punctuation">.</span><span class="token function">getFreeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;GB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取当前文件所在磁盘的总空间大小</span>
		size <span class="token operator">=</span> f2<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;GB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取file对象所表示的文件名称</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//获取File对象所表示文件所在的父目录名称（String）</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//获取File对象所表示文件所在的父目录File对象(File)</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



		<span class="token comment">// 实现一个程序：要求能清理指定目录下的所有字节码文件（清理缓存）包括多余的空目录</span>
		<span class="token comment">// 1. 如何获取一个目录下的所有子文件或者子目录（递归）</span>
		<span class="token comment">// 2. 如何获取所有的字节码文件（以 .class 结尾的文件，String类）</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件过滤" tabindex="-1"><a class="header-anchor" href="#文件过滤" aria-hidden="true">#</a> 文件过滤</h3><p>File 类中提供了几个用于列出指定目录下所有子文件的方法：</p><ul><li>list()</li><li>listFiles()</li></ul><p>以上两个方法不会对文件进行任何的限制和过滤，直接全部遍历，但是以上两个方法还提供了对应的重载方法</p><ul><li>list(FilenameFilter filter)</li><li>listFiles(FileFilter filter)</li><li>listFiles(FilenameFilter filter)</li></ul><h4 id="过滤方式一" tabindex="-1"><a class="header-anchor" href="#过滤方式一" aria-hidden="true">#</a> 过滤方式一</h4><p>以<code>listFiles(FileFilter filter)</code>为例，使用方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\素材\\\\音乐\\\\music素材&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建过滤器对象</span>
<span class="token class-name">FileFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//回调函数</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.mp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上程序执行之后会获取所有的 mp3 文件，实现原理如下：</p><p><img src="`+u+`" alt="1605698553122"></p><p>以上程序的实现，使用了匿名内部类，回调机制</p><h4 id="过滤方式二" tabindex="-1"><a class="header-anchor" href="#过滤方式二" aria-hidden="true">#</a> 过滤方式二：</h4><p>创建文件过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 	文件过滤器
 * <span class="token keyword">@author</span> mrchai
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFileFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FileFilter</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyFileFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	 * 	实现过滤规则
	 */</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo5</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\素材\\\\音乐\\\\music素材&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//创建过滤器对象</span>
		<span class="token class-name">FileFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFileFilter</span><span class="token punctuation">(</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用过滤器进行文件过滤</span>
		<span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件递归遍历" tabindex="-1"><a class="header-anchor" href="#文件递归遍历" aria-hidden="true">#</a> 文件递归遍历</h3><p>在对系统文件加遍历时往往会遇到一种情况：需要将一个目录下的所有子文件全部获取，但是该目录下可能还存在子目录，以及多个子目录嵌套的情况；而具体的嵌套层次是未知的，因此无法使用传统的循环语句进行遍历，此时，最好的方式可以通过递归实现遍历：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo6</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
	 * 	读取指定目录中的所有子文件
	 * <span class="token keyword">@param</span> <span class="token parameter">dir</span> 源目录
	 */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readDir</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取目录下所有的文件对象（数组）</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//判断数组对象是否为null</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//遍历所有的File对象</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token operator">:</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//判断当前File对象所表示的是否一个目录</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//如果是目录，则递归遍历</span>
                    <span class="token function">readDir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//输出文件（或者目录）名称</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//源目录</span>
        <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//读取</span>
        <span class="token function">readDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function v(b,f){const a=c("router-link");return o(),l("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#objects-类"},{default:p(()=>[s("Objects 类")]),_:1})]),n("li",null,[t(a,{to:"#random-类"},{default:p(()=>[s("Random 类")]),_:1})]),n("li",null,[t(a,{to:"#file-类"},{default:p(()=>[s("File 类")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#常见属性"},{default:p(()=>[s("常见属性")]),_:1})]),n("li",null,[t(a,{to:"#构造器"},{default:p(()=>[s("构造器")]),_:1})]),n("li",null,[t(a,{to:"#常用方法"},{default:p(()=>[s("常用方法")]),_:1})]),n("li",null,[t(a,{to:"#文件过滤"},{default:p(()=>[s("文件过滤")]),_:1})]),n("li",null,[t(a,{to:"#文件递归遍历"},{default:p(()=>[s("文件递归遍历")]),_:1})])])])])]),m])}const g=e(k,[["render",v],["__file","index.html.vue"]]);export{g as default};
