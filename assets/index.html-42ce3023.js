import{_ as o,r as l,o as i,c,a as n,e as t,w as e,b as s,d as u}from"./app-a153c100.js";const r="/MyBlog/assets/image-20210720193623245-9d6c0b4b.png",d="/MyBlog/assets/image-20210720193633483-f17af0d1.png",k="/MyBlog/assets/image-20210720193641907-59b23a76.png",v="/MyBlog/assets/image-20210720193648044-37122c43.png",m="/MyBlog/assets/image-20210720194008781-c0e82f3c.png",g="/MyBlog/assets/image-20210720194230265-9e93d2d0.png",b="/MyBlog/assets/image-20210720194547780-ce8d0cb2.png",h="/MyBlog/assets/image-20210720195001221-c10e8e09.png",q="/MyBlog/assets/image-20210720195142535-e53b5be6.png",_="/MyBlog/assets/image-20210720195306484-0ccaf1f5.png",y="/MyBlog/assets/image-20210720195531539-3032a650.png",f="/MyBlog/assets/image-20210720200457207-add0ed3f.png",x="/MyBlog/assets/image-20210720201115192-5f872420.png",w="/MyBlog/assets/image-20210720202707797-23446e07.png",j="/MyBlog/assets/image-20210720203022172-b933e852.png",E="/MyBlog/assets/image-20210720203534945-36de2249.png",p="/MyBlog/assets/image-20210720203805350-78ab4075.png",T="/MyBlog/assets/image-20210720211019329-d859b5a0.png",R="/MyBlog/assets/image-20210720212357390-68e20f65.png",L="/MyBlog/assets/image-20210720212123420-5fc6d1e1.png",D="/MyBlog/assets/image-20210720212933362-a6362f83.png",S="/MyBlog/assets/image-20210720213345003-c0133a73.png",N="/MyBlog/assets/image-20210720213634918-99c97ba6.png",I="/MyBlog/assets/image-20210720214555863-7cf743d7.png",M="/MyBlog/assets/image-20210720220400297-7f69dfb4.png",H="/MyBlog/assets/image-20210720220503411-a7e6b9fb.png",O="/MyBlog/assets/image-20210720220647541-f3b6a0c9.png",C="/MyBlog/assets/image-20210720222110126-705d0764.png",B="/MyBlog/assets/image-20210720222221516-41bb7f77.png",U="/MyBlog/assets/image-20210720223049408-b48e5dda.png",A="/MyBlog/assets/image-20210720230027240-a3500379.png",P="/MyBlog/assets/image-20210720230811674-63f5d311.png",J="/MyBlog/assets/image-20210720231040875-d3797244.png",G="/MyBlog/assets/image-20210720232105943-c39df613.png",F="/MyBlog/assets/image-20210720232431383-379b8dfb.png",z={},X=n("h1",{id:"分布式搜索引擎-01-🧀",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分布式搜索引擎-01-🧀","aria-hidden":"true"},"#"),s(" 分布式搜索引擎 01 🧀")],-1),K={class:"table-of-contents"},V=u('<div class="custom-container tip"><p class="custom-container-title">Hi</p><p>elasticsearch 基础</p></div><h1 id="_0-学习目标" tabindex="-1"><a class="header-anchor" href="#_0-学习目标" aria-hidden="true">#</a> 0.学习目标</h1><h1 id="_1-初识-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1-初识-elasticsearch" aria-hidden="true">#</a> 1.初识 elasticsearch</h1><h2 id="_1-1-了解-es" tabindex="-1"><a class="header-anchor" href="#_1-1-了解-es" aria-hidden="true">#</a> 1.1.了解 ES</h2><h3 id="_1-1-1-elasticsearch-的作用" tabindex="-1"><a class="header-anchor" href="#_1-1-1-elasticsearch-的作用" aria-hidden="true">#</a> 1.1.1.elasticsearch 的作用</h3><p>elasticsearch 是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容</p><p>例如：</p><ul><li><p>在 GitHub 搜索代码</p><p><img src="'+r+'" alt="image-20210720193623245"></p></li><li><p>在电商网站搜索商品</p><p><img src="'+d+'" alt="image-20210720193633483"></p></li><li><p>在百度搜索答案</p><p><img src="'+k+'" alt="image-20210720193641907"></p></li><li><p>在打车软件搜索附近的车</p><p><img src="'+v+'" alt="image-20210720193648044"></p></li></ul><h3 id="_1-1-2-elk-技术栈" tabindex="-1"><a class="header-anchor" href="#_1-1-2-elk-技术栈" aria-hidden="true">#</a> 1.1.2.ELK 技术栈</h3><p>elasticsearch 结合 kibana、Logstash、Beats，也就是 elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：</p><p><img src="'+m+'" alt="image-20210720194008781"></p><p>而 elasticsearch 是 elastic stack 的核心，负责存储、搜索、分析数据。</p><p><img src="'+g+'" alt="image-20210720194230265"></p><h3 id="_1-1-3-elasticsearch-和-lucene" tabindex="-1"><a class="header-anchor" href="#_1-1-3-elasticsearch-和-lucene" aria-hidden="true">#</a> 1.1.3.elasticsearch 和 lucene</h3><p>elasticsearch 底层是基于<strong>lucene</strong>来实现的。</p><p><strong>Lucene</strong>是一个 Java 语言的搜索引擎类库，是 Apache 公司的顶级项目，由 DougCutting 于 1999 年研发。官网地址：https://lucene.apache.org/ 。</p><p><img src="'+b+'" alt="image-20210720194547780"></p><p><strong>elasticsearch</strong>的发展历史：</p><ul><li>2004 年 Shay Banon 基于 Lucene 开发了 Compass</li><li>2010 年 Shay Banon 重写了 Compass，取名为 Elasticsearch。</li></ul><p><img src="'+h+'" alt="image-20210720195001221"></p><h3 id="_1-1-4-为什么不是其他搜索技术" tabindex="-1"><a class="header-anchor" href="#_1-1-4-为什么不是其他搜索技术" aria-hidden="true">#</a> 1.1.4.为什么不是其他搜索技术？</h3><p>目前比较知名的搜索引擎技术排名：</p><p><img src="'+q+'" alt="image-20210720195142535"></p><p>虽然在早期，Apache Solr 是最主要的搜索引擎技术，但随着发展 elasticsearch 已经渐渐超越了 Solr，独占鳌头：</p><p><img src="'+_+'" alt="image-20210720195306484"></p><h3 id="_1-1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-1-5-总结" aria-hidden="true">#</a> 1.1.5.总结</h3><p>什么是 elasticsearch？</p><ul><li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li></ul><p>什么是 elastic stack（ELK）？</p><ul><li>是以 elasticsearch 为核心的技术栈，包括 beats、Logstash、kibana、elasticsearch</li></ul><p>什么是 Lucene？</p><ul><li>是 Apache 的开源搜索引擎类库，提供了搜索引擎的核心 API</li></ul><h2 id="_1-2-倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-倒排索引" aria-hidden="true">#</a> 1.2.倒排索引</h2><p>倒排索引的概念是基于 MySQL 这样的正向索引而言的。</p><h3 id="_1-2-1-正向索引" tabindex="-1"><a class="header-anchor" href="#_1-2-1-正向索引" aria-hidden="true">#</a> 1.2.1.正向索引</h3><p>那么什么是正向索引呢？例如给下表（tb_goods）中的 id 创建索引：</p><p><img src="'+y+'" alt="image-20210720195531539"></p><p>如果是根据 id 查询，那么直接走索引，查询速度非常快。</p><p>但如果是基于 title 做模糊查询，只能是逐行扫描数据，流程如下：</p><p>1）用户搜索数据，条件是 title 符合<code>&quot;%手机%&quot;</code></p><p>2）逐行获取数据，比如 id 为 1 的数据</p><p>3）判断数据中的 title 是否符合用户搜索条件</p><p>4）如果符合则放入结果集，不符合则丢弃。回到步骤 1</p><p>逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p><h3 id="_1-2-2-倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-倒排索引" aria-hidden="true">#</a> 1.2.2.倒排索引</h3><p>倒排索引中有两个非常重要的概念：</p><ul><li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档 id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如 hash 表结构索引</li></ul><p>如图：</p><p><img src="'+f+'" alt="image-20210720200457207"></p><p>倒排索引的<strong>搜索流程</strong>如下（以搜索&quot;华为手机&quot;为例）：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p><p>2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p><p>3）拿着词条在倒排索引中查找，可以得到包含词条的文档 id：1、2、3。</p><p>4）拿着文档 id 到正向索引中查找具体文档。</p><p>如图：</p><p><img src="'+x+'" alt="image-20210720201115192"></p><p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档 id 都建立了索引，查询速度非常快！无需全表扫描。</p><h3 id="_1-2-3-正向和倒排" tabindex="-1"><a class="header-anchor" href="#_1-2-3-正向和倒排" aria-hidden="true">#</a> 1.2.3.正向和倒排</h3><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><p><strong>正向索引</strong>是最传统的，根据 id 索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</p></li><li><p>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的 id，然后根据 id 获取文档。是<strong>根据词条找文档的过程</strong>。</p></li></ul><p>是不是恰好反过来了？</p><p>那么两者方式的优缺点是什么呢？</p><p><strong>正向索引</strong>：</p><ul><li>优点： <ul><li>可以给多个字段创建索引</li><li>根据索引字段搜索、排序速度非常快</li></ul></li><li>缺点： <ul><li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li></ul></li></ul><p><strong>倒排索引</strong>：</p><ul><li>优点： <ul><li>根据词条搜索、模糊搜索时，速度非常快</li></ul></li><li>缺点： <ul><li>只能给词条创建索引，而不是字段</li><li>无法根据字段做排序</li></ul></li></ul><h2 id="_1-3-es-的一些概念" tabindex="-1"><a class="header-anchor" href="#_1-3-es-的一些概念" aria-hidden="true">#</a> 1.3.es 的一些概念</h2><p>elasticsearch 中有很多独有的概念，与 mysql 中略有差别，但也有相似之处。</p><h3 id="_1-3-1-文档和字段" tabindex="-1"><a class="header-anchor" href="#_1-3-1-文档和字段" aria-hidden="true">#</a> 1.3.1.文档和字段</h3><p>elasticsearch 是面向**文档（Document）**存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为 json 格式后存储在 elasticsearch 中：</p><p><img src="'+w+'" alt="image-20210720202707797"></p><p>而 Json 文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p><h3 id="_1-3-2-索引和映射" tabindex="-1"><a class="header-anchor" href="#_1-3-2-索引和映射" aria-hidden="true">#</a> 1.3.2.索引和映射</h3><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p><p>例如：</p><ul><li>所有用户文档，就可以组织在一起，称为用户的索引；</li><li>所有商品的文档，可以组织在一起，称为商品的索引；</li><li>所有订单的文档，可以组织在一起，称为订单的索引；</li></ul><p><img src="'+j+'" alt="image-20210720203022172"></p><p>因此，我们可以把索引当做是数据库中的表。</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p><h3 id="_1-3-3-mysql-与-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1-3-3-mysql-与-elasticsearch" aria-hidden="true">#</a> 1.3.3.mysql 与 elasticsearch</h3><p>我们统一的把 mysql 与 elasticsearch 的概念做一下对比：</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是 JSON 格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是 JSON 文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL 是 elasticsearch 提供的 JSON 风格的请求语句，用来操作 elasticsearch，实现 CRUD</td></tr></tbody></table><p>是不是说，我们学习了 elasticsearch 就不再需要 mysql 了呢？</p><p>并不是如此，两者各自有自己的擅长支出：</p><ul><li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p></li><li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p></li></ul><p>因此在企业中，往往是两者结合使用：</p><ul><li>对安全性要求较高的写操作，使用 mysql 实现</li><li>对查询性能要求较高的搜索需求，使用 elasticsearch 实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p><img src="'+E+'" alt="image-20210720203534945"></p><h2 id="_1-4-安装-es、kibana" tabindex="-1"><a class="header-anchor" href="#_1-4-安装-es、kibana" aria-hidden="true">#</a> 1.4.安装 es、kibana</h2><h3 id="_1-4-1-安装" tabindex="-1"><a class="header-anchor" href="#_1-4-1-安装" aria-hidden="true">#</a> 1.4.1.安装</h3><p>参考课前资料：</p><p><img src="'+p+'" alt="image-20210720203805350"></p><h3 id="_1-4-2-分词器" tabindex="-1"><a class="header-anchor" href="#_1-4-2-分词器" aria-hidden="true">#</a> 1.4.2.分词器</h3><p>参考课前资料：</p><p><img src="'+p+`" alt="image-20210720203805350"></p><h3 id="_1-4-3-总结" tabindex="-1"><a class="header-anchor" href="#_1-4-3-总结" aria-hidden="true">#</a> 1.4.3.总结</h3><p>分词器的作用是什么？</p><ul><li>创建倒排索引时对文档分词</li><li>用户搜索时，对输入的内容分词</li></ul><p>IK 分词器有几种模式？</p><ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><p>IK 分词器如何拓展词条？如何停用词条？</p><ul><li>利用 config 目录的 IkAnalyzer.cfg.xml 文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条或者停用词条</li></ul><h1 id="_2-索引库操作" tabindex="-1"><a class="header-anchor" href="#_2-索引库操作" aria-hidden="true">#</a> 2.索引库操作</h1><p>索引库就类似数据库表，mapping 映射就类似表的结构。</p><p>我们要向 es 中存储数据，必须先创建“库”和“表”。</p><h2 id="_2-1-mapping-映射属性" tabindex="-1"><a class="header-anchor" href="#_2-1-mapping-映射属性" aria-hidden="true">#</a> 2.1.mapping 映射属性</h2><p>mapping 是对索引库中文档的约束，常见的 mapping 属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有： <ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip 地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为 true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><p>例如下面的 json 文档：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
  <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">52.1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;isMarried&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员Java讲师&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.1</span><span class="token punctuation">,</span> <span class="token number">99.5</span><span class="token punctuation">,</span> <span class="token number">98.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的每个字段映射（mapping）：</p><ul><li>age：类型为 integer；参与搜索，因此需要 index 为 true；无需分词器</li><li>weight：类型为 float；参与搜索，因此需要 index 为 true；无需分词器</li><li>isMarried：类型为 boolean；参与搜索，因此需要 index 为 true；无需分词器</li><li>info：类型为字符串，需要分词，因此是 text；参与搜索，因此需要 index 为 true；分词器可以用 ik_smart</li><li>email：类型为字符串，但是不需要分词，因此是 keyword；不参与搜索，因此需要 index 为 false；无需分词器</li><li>score：虽然是数组，但是我们只看元素的类型，类型为 float；参与搜索，因此需要 index 为 true；无需分词器</li><li>name：类型为 object，需要定义多个子属性 <ul><li>name.firstName；类型为字符串，但是不需要分词，因此是 keyword；参与搜索，因此需要 index 为 true；无需分词器</li><li>name.lastName；类型为字符串，但是不需要分词，因此是 keyword；参与搜索，因此需要 index 为 true；无需分词器</li></ul></li></ul><h2 id="_2-2-索引库的-crud" tabindex="-1"><a class="header-anchor" href="#_2-2-索引库的-crud" aria-hidden="true">#</a> 2.2.索引库的 CRUD</h2><p>这里我们统一使用 Kibana 编写 DSL 的方式来演示。</p><h3 id="_2-2-1-创建索引库和映射" tabindex="-1"><a class="header-anchor" href="#_2-2-1-创建索引库和映射" aria-hidden="true">#</a> 2.2.1.创建索引库和映射</h3><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法：</h4><ul><li>请求方式：PUT</li><li>请求路径：/索引库名，可以自定义</li><li>请求参数：mapping 映射</li></ul><p>格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /索引库名称
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;字段名2&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;false&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;字段名3&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;子字段&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// ...略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /heima
<span class="token punctuation">{</span>
  <span class="token string">&quot;mappings&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;properties&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;info&quot;</span>:<span class="token punctuation">{</span>
        <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;text&quot;</span>,
        <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_smart&quot;</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;email&quot;</span>:<span class="token punctuation">{</span>
        <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;keyword&quot;</span>,
        <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;false&quot;</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;name&quot;</span>:<span class="token punctuation">{</span>
        <span class="token string">&quot;properties&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;firstName&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;keyword&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      // <span class="token punctuation">..</span>. 略
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-2-查询索引库" tabindex="-1"><a class="header-anchor" href="#_2-2-2-查询索引库" aria-hidden="true">#</a> 2.2.2.查询索引库</h3><p><strong>基本语法</strong>：</p><ul><li><p>请求方式：GET</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式</strong>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /索引库名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><p><img src="`+T+`" alt="image-20210720211019329"></p><h3 id="_2-2-3-修改索引库" tabindex="-1"><a class="header-anchor" href="#_2-2-3-修改索引库" aria-hidden="true">#</a> 2.2.3.修改索引库</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改 mapping</strong>。</p><p>虽然无法修改 mapping 中已有的字段，但是却允许添加新的字段到 mapping 中，因为不会对倒排索引产生影响。</p><p><strong>语法说明</strong>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /索引库名/_mapping
<span class="token punctuation">{</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;新字段名&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><p><img src="`+R+`" alt="image-20210720212357390"></p><h3 id="_2-2-4-删除索引库" tabindex="-1"><a class="header-anchor" href="#_2-2-4-删除索引库" aria-hidden="true">#</a> 2.2.4.删除索引库</h3><p><strong>语法：</strong></p><ul><li><p>请求方式：DELETE</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DELETE /索引库名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 kibana 中测试：</p><p><img src="`+L+`" alt="image-20210720212123420"></p><h3 id="_2-2-5-总结" tabindex="-1"><a class="header-anchor" href="#_2-2-5-总结" aria-hidden="true">#</a> 2.2.5.总结</h3><p>索引库操作有哪些？</p><ul><li>创建索引库：PUT /索引库名</li><li>查询索引库：GET /索引库名</li><li>删除索引库：DELETE /索引库名</li><li>添加字段：PUT /索引库名/_mapping</li></ul><h1 id="_3-文档操作" tabindex="-1"><a class="header-anchor" href="#_3-文档操作" aria-hidden="true">#</a> 3.文档操作</h1><h2 id="_3-1-新增文档" tabindex="-1"><a class="header-anchor" href="#_3-1-新增文档" aria-hidden="true">#</a> 3.1.新增文档</h2><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /索引库名/_doc/文档id
<span class="token punctuation">{</span>
    <span class="token property">&quot;字段1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;字段2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;字段3&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;子属性1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值3&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;子属性2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值4&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /heima/_doc/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员Java讲师&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>响应：</strong></p><p><img src="`+D+`" alt="image-20210720212933362"></p><h2 id="_3-2-查询文档" tabindex="-1"><a class="header-anchor" href="#_3-2-查询文档" aria-hidden="true">#</a> 3.2.查询文档</h2><p>根据 rest 风格，新增是 post，查询应该是 get，不过查询一般都需要条件，这里我们把文档 id 带上。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /<span class="token punctuation">{</span>索引库名称<span class="token punctuation">}</span>/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过 kibana 查看数据：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">GET</span> <span class="token operator">/</span> heima <span class="token operator">/</span> _doc <span class="token operator">/</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看结果：</strong></p><p><img src="`+S+`" alt="image-20210720213345003"></p><h2 id="_3-3-删除文档" tabindex="-1"><a class="header-anchor" href="#_3-3-删除文档" aria-hidden="true">#</a> 3.3.删除文档</h2><p>删除使用 DELETE 请求，同样，需要根据 id 进行删除：</p><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DELETE</span> <span class="token operator">/</span> <span class="token punctuation">{</span> 索引库名 <span class="token punctuation">}</span> <span class="token operator">/</span> _doc <span class="token operator">/</span> id值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code># 根据id删除数据
DELETE /heima/_doc/<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><p><img src="`+N+`" alt="image-20210720213634918"></p><h2 id="_3-4-修改文档" tabindex="-1"><a class="header-anchor" href="#_3-4-修改文档" aria-hidden="true">#</a> 3.4.修改文档</h2><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ul><h3 id="_3-4-1-全量修改" tabindex="-1"><a class="header-anchor" href="#_3-4-1-全量修改" aria-hidden="true">#</a> 3.4.1.全量修改</h3><p>全量修改是覆盖原来的文档，其本质是：</p><ul><li>根据指定的 id 删除文档</li><li>新增一个相同 id 的文档</li></ul><p><strong>注意</strong>：<code>如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</code></p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_doc/文档id
<span class="token punctuation">{</span>
    <span class="token property">&quot;字段1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;字段2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值2&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// ... 略</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /heima/_doc/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员高级Java讲师&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-2-增量修改" tabindex="-1"><a class="header-anchor" href="#_3-4-2-增量修改" aria-hidden="true">#</a> 3.4.2.增量修改</h3><p>增量修改是只修改指定 id 匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_update/文档id
<span class="token punctuation">{</span>
    <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span> <span class="token string">&quot;新的值&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /heima/_update/<span class="token number">1</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ZhaoYun@itcast.cn&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-5-总结" tabindex="-1"><a class="header-anchor" href="#_3-5-总结" aria-hidden="true">#</a> 3.5.总结</h2><p>文档操作有哪些？</p><ul><li>创建文档：POST /{索引库名}/_doc/文档 id { json 文档 }</li><li>查询文档：GET /{索引库名}/_doc/文档 id</li><li>删除文档：DELETE /{索引库名}/_doc/文档 id</li><li>修改文档： <ul><li>全量修改：PUT /{索引库名}/_doc/文档 id { json 文档 }</li><li>增量修改：POST /{索引库名}/_update/文档 id { &quot;doc&quot;: {字段}}</li></ul></li></ul><h1 id="_4-restapi" tabindex="-1"><a class="header-anchor" href="#_4-restapi" aria-hidden="true">#</a> 4.RestAPI</h1><p>ES 官方提供了各种不同语言的客户端，用来操作 ES。这些客户端的本质就是组装 DSL 语句，通过 http 请求发送给 ES。官方文档地址：https://www.elastic.co/guide/en/elasticsearch/client/index.html</p><p>其中的 Java Rest Client 又包括两种：</p><ul><li>Java Low Level Rest Client</li><li>Java High Level Rest Client</li></ul><p><img src="`+I+'" alt="image-20210720214555863"></p><p>我们学习的是 Java HighLevel Rest Client 客户端 API</p><h2 id="_4-0-导入-demo-工程" tabindex="-1"><a class="header-anchor" href="#_4-0-导入-demo-工程" aria-hidden="true">#</a> 4.0.导入 Demo 工程</h2><h3 id="_4-0-1-导入数据" tabindex="-1"><a class="header-anchor" href="#_4-0-1-导入数据" aria-hidden="true">#</a> 4.0.1.导入数据</h3><p>首先导入课前资料提供的数据库数据：</p><p><img src="'+M+'" alt="image-20210720220400297"></p><p>数据结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_hotel<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店名称；例：7天酒店&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店地址；例：航头路&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店价格；例：329&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>score<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店评分；例：45，就是4.5分&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店品牌；例：如家&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;所在城市；例：上海&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>star_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店星级，从低到高分别是：1星到5星，1钻到5钻&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>business<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;商圈；例：虹桥&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>latitude<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;纬度；例：31.2497&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>longitude<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;经度；例：120.3925&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>pic<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;酒店图片；例:/img/1.jpg&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-0-2-导入项目" tabindex="-1"><a class="header-anchor" href="#_4-0-2-导入项目" aria-hidden="true">#</a> 4.0.2.导入项目</h3><p>然后导入课前资料提供的项目:</p><p><img src="'+H+'" alt="image-20210720220503411"></p><p>项目结构如图：</p><p><img src="'+O+`" alt="image-20210720220647541"></p><h3 id="_4-0-3-mapping-映射分析" tabindex="-1"><a class="header-anchor" href="#_4-0-3-mapping-映射分析" aria-hidden="true">#</a> 4.0.3.mapping 映射分析</h3><p>创建索引库，最关键的是 mapping 映射，而 mapping 映射要考虑的信息包括：</p><ul><li>字段名</li><li>字段数据类型</li><li>是否参与搜索</li><li>是否需要分词</li><li>如果分词，分词器是什么？</li></ul><p>其中：</p><ul><li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li><li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li><li>是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词</li><li>分词器，我们可以统一使用 ik_max_word</li></ul><p>来看下酒店数据的索引库结构:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /hotel
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;copy_to&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;score&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;brand&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;copy_to&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;copy_to&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;starName&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;business&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;location&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;geo_point&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;pic&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;all&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个特殊字段说明：</p><ul><li>location：地理坐标，里面包含精度、纬度</li><li>all：一个组合字段，其目的是将多字段的值 利用 copy_to 合并，提供给用户搜索</li></ul><p>地理坐标说明：</p><p><img src="`+C+'" alt="image-20210720222110126"></p><p>copy_to 说明：</p><p><img src="'+B+`" alt="image-20210720222221516"></p><h3 id="_4-0-4-初始化-restclient" tabindex="-1"><a class="header-anchor" href="#_4-0-4-初始化-restclient" aria-hidden="true">#</a> 4.0.4.初始化 RestClient</h3><p>在 elasticsearch 提供的 API 中，与 elasticsearch 一切交互都封装在一个名为 RestHighLevelClient 的类中，必须先完成这个对象的初始化，建立与 elasticsearch 的连接。</p><p>分为三步：</p><p>1）引入 es 的 RestHighLevelClient 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）因为 SpringBoot 默认的 ES 版本是 7.6.2，所以我们需要覆盖默认的 ES 版本：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">&gt;</span></span>7.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）初始化 RestHighLevelClient：</p><p>初始化的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
        <span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.150.101:9200&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里为了单元测试方便，我们创建一个测试类 HotelIndexTest，然后将初始化的代码编写在@BeforeEach 方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">AfterEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelIndexTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
                <span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.150.101:9200&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-1-创建索引库" tabindex="-1"><a class="header-anchor" href="#_4-1-创建索引库" aria-hidden="true">#</a> 4.1.创建索引库</h2><h3 id="_4-1-1-代码解读" tabindex="-1"><a class="header-anchor" href="#_4-1-1-代码解读" aria-hidden="true">#</a> 4.1.1.代码解读</h3><p>创建索引库的 API 如下：</p><p><img src="`+U+`" alt="image-20210720223049408"></p><p>代码分为三步：</p><ul><li>1）创建 Request 对象。因为是创建索引库的操作，因此 Request 是 CreateIndexRequest。</li><li>2）添加请求参数，其实就是 DSL 的 JSON 参数部分。因为 json 字符串很长，这里是定义了静态字符串常量 MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>3）发送请求，client.indices()方法的返回值是 IndicesClient 类型，封装了所有与索引库操作有关的方法。</li></ul><h3 id="_4-1-2-完整示例" tabindex="-1"><a class="header-anchor" href="#_4-1-2-完整示例" aria-hidden="true">#</a> 4.1.2.完整示例</h3><p>在 hotel-demo 的 cn.itcast.hotel.constants 包下，创建一个类，定义 mapping 映射的 JSON 字符串常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel<span class="token punctuation">.</span>constants</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelConstants</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MAPPING_TEMPLATE</span> <span class="token operator">=</span> <span class="token string">&quot;{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;  \\&quot;mappings\\&quot;: {\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;    \\&quot;properties\\&quot;: {\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;id\\&quot;: {\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;name\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;address\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;index\\&quot;: false\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;price\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;score\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;brand\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;city\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;starName\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;business\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;location\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;geo_point\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;pic\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;index\\&quot;: false\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      },\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      \\&quot;all\\&quot;:{\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;        \\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;      }\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;    }\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;  }\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 hotel-demo 中的 HotelIndexTest 测试类中，编写单元测试，实现创建索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">createHotelIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.创建Request对象</span>
    <span class="token class-name">CreateIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.准备请求的参数：DSL语句</span>
    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">MAPPING_TEMPLATE</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.发送请求 indices()拿到的是操作索引库的对象（里面封装了所有与索引库操作有关的方法）</span>
    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-删除索引库" tabindex="-1"><a class="header-anchor" href="#_4-2-删除索引库" aria-hidden="true">#</a> 4.2.删除索引库</h2><p>删除索引库的 DSL 语句非常简单：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>DELETE /hotel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与创建索引库相比：</p><ul><li>请求方式从 PUT 变为 DELTE</li><li>请求路径不变</li><li>无请求参数</li></ul><p>所以代码的差异，注意体现在 Request 对象上。依然是三步走：</p><ul><li>1）创建 Request 对象。这次是 DeleteIndexRequest 对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用 delete 方法</li></ul><p>在 hotel-demo 中的 HotelIndexTest 测试类中，编写单元测试，实现删除索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testDeleteHotelIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.创建Request对象</span>
    <span class="token class-name">DeleteIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-判断索引库是否存在" tabindex="-1"><a class="header-anchor" href="#_4-3-判断索引库是否存在" aria-hidden="true">#</a> 4.3.判断索引库是否存在</h2><p>判断索引库是否存在，本质就是查询，对应的 DSL 是：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /hotel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此与删除的 Java 代码流程是类似的。依然是三步走：</p><ul><li>1）创建 Request 对象。这次是 GetIndexRequest 对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用 exists 方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testExistsHotelIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.创建Request对象</span>
    <span class="token class-name">GetIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.发送请求</span>
    <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.输出</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists <span class="token operator">?</span> <span class="token string">&quot;索引库已经存在！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;索引库不存在！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-总结" tabindex="-1"><a class="header-anchor" href="#_4-4-总结" aria-hidden="true">#</a> 4.4.总结</h2><p>JavaRestClient 操作 elasticsearch 的流程基本类似。核心是 client.indices()方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li>初始化 RestHighLevelClient</li><li>创建 XxxIndexRequest。XXX 是 Create、Get、Delete</li><li>准备 DSL（ Create 时需要，其它是无参）</li><li>发送请求。调用 RestHighLevelClient#indices().xxx()方法，xxx 是 create、exists、delete</li></ul><h1 id="_5-restclient-操作文档" tabindex="-1"><a class="header-anchor" href="#_5-restclient-操作文档" aria-hidden="true">#</a> 5.RestClient 操作文档</h1><p>为了与索引库操作分离，我们再次参加一个测试类，做两件事情：</p><ul><li>初始化 RestHighLevelClient</li><li>我们的酒店数据在数据库，需要利用 IHotelService 去查询，所以注入这个接口</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Hotel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IHotelService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">AfterEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelDocumentTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IHotelService</span> hotelService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
                <span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.150.101:9200&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-1-新增文档" tabindex="-1"><a class="header-anchor" href="#_5-1-新增文档" aria-hidden="true">#</a> 5.1.新增文档</h2><p>我们要将数据库的酒店数据查询出来，写入 elasticsearch 中。</p><h3 id="_5-1-1-索引库实体类" tabindex="-1"><a class="header-anchor" href="#_5-1-1-索引库实体类" aria-hidden="true">#</a> 5.1.1.索引库实体类</h3><p>数据库查询后的结果是一个 Hotel 类型的对象。结构如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;tb_hotel&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hotel</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">INPUT</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> starName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> business<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> longitude<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> latitude<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> pic<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与我们的索引库结构存在差异：</p><ul><li>longitude 和 latitude 需要合并为 location</li></ul><p>因此，我们需要定义一个新的类型，与索引库结构吻合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelDoc</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> starName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> business<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> pic<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span><span class="token class-name">Hotel</span> hotel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>starName <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getStarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>business <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> hotel<span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pic <span class="token operator">=</span> hotel<span class="token punctuation">.</span><span class="token function">getPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-2-语法说明" tabindex="-1"><a class="header-anchor" href="#_5-1-2-语法说明" aria-hidden="true">#</a> 5.1.2.语法说明</h3><p>新增文档的 DSL 语句如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_doc/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">21</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的 java 代码如图：</p><p><img src="`+A+`" alt="image-20210720230027240"></p><p>可以看到与创建索引库类似，同样是三步走：</p><ul><li>1）创建 Request 对象</li><li>2）准备请求参数，也就是 DSL 中的 JSON 文档</li><li>3）发送请求</li></ul><p>变化的地方在于，这里直接使用 client.xxx()的 API，不再需要 client.indices()了。</p><h3 id="_5-1-3-完整代码" tabindex="-1"><a class="header-anchor" href="#_5-1-3-完整代码" aria-hidden="true">#</a> 5.1.3.完整代码</h3><p>我们导入酒店数据，基本流程一致，但是需要考虑几点变化：</p><ul><li>酒店数据来自于数据库，我们需要先查询出来，得到 hotel 对象</li><li>hotel 对象需要转为 HotelDoc 对象</li><li>HotelDoc 需要序列化为 json 格式</li></ul><p>因此，代码整体步骤如下：</p><ul><li>1）根据 id 查询酒店数据 Hotel</li><li>2）将 Hotel 封装为 HotelDoc</li><li>3）将 HotelDoc 序列化为 JSON</li><li>4）创建 IndexRequest，指定索引库名和 id</li><li>5）准备请求参数，也就是 JSON 文档</li><li>6）发送请求</li></ul><p>在 hotel-demo 的 HotelDocumentTest 测试类中，编写单元测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testAddDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.根据id查询酒店数据</span>
    <span class="token class-name">Hotel</span> hotel <span class="token operator">=</span> hotelService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">61083L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.转换为文档类型</span>
    <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span>hotel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.将HotelDoc转json</span>
    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 1.准备Request对象</span>
    <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.准备Json文档</span>
    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-查询文档" tabindex="-1"><a class="header-anchor" href="#_5-2-查询文档" aria-hidden="true">#</a> 5.2.查询文档</h2><h3 id="_5-2-1-语法说明" tabindex="-1"><a class="header-anchor" href="#_5-2-1-语法说明" aria-hidden="true">#</a> 5.2.1.语法说明</h3><p>查询的 DSL 语句如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /hotel/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>非常简单，因此代码大概分两步：</p><ul><li>准备 Request 对象</li><li>发送请求</li></ul><p>不过查询的目的是得到结果，解析为 HotelDoc，因此难点是结果的解析。完整代码如下：</p><p><img src="`+P+`" alt="image-20210720230811674"></p><p>可以看到，结果是一个 JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为 Java 对象即可。</p><p>与之前类似，也是三步走：</p><ul><li>1）准备 Request 对象。这次是查询，所以是 GetRequest</li><li>2）发送请求，得到结果。因为是查询，这里调用 client.get()方法</li><li>3）解析结果，就是对 JSON 做反序列化</li></ul><h3 id="_5-2-2-完整代码" tabindex="-1"><a class="header-anchor" href="#_5-2-2-完整代码" aria-hidden="true">#</a> 5.2.2.完整代码</h3><p>在 hotel-demo 的 HotelDocumentTest 测试类中，编写单元测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testGetDocumentById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.准备Request</span>
    <span class="token class-name">GetRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;61082&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.发送请求，得到响应</span>
    <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.解析响应结果</span>
    <span class="token class-name">String</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-删除文档" tabindex="-1"><a class="header-anchor" href="#_5-3-删除文档" aria-hidden="true">#</a> 5.3.删除文档</h2><p>删除的 DSL 为是这样的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>DELETE /hotel/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与查询相比，仅仅是请求方式从 DELETE 变成 GET，可以想象 Java 代码应该依然是三步走：</p><ul><li>1）准备 Request 对象，因为是删除，这次是 DeleteRequest 对象。要指定索引库名和 id</li><li>2）准备参数，无参</li><li>3）发送请求。因为是删除，所以是 client.delete()方法</li></ul><p>在 hotel-demo 的 HotelDocumentTest 测试类中，编写单元测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testDeleteDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.准备Request</span>
    <span class="token class-name">DeleteRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;61083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4-修改文档" tabindex="-1"><a class="header-anchor" href="#_5-4-修改文档" aria-hidden="true">#</a> 5.4.修改文档</h2><h3 id="_5-4-1-语法说明" tabindex="-1"><a class="header-anchor" href="#_5-4-1-语法说明" aria-hidden="true">#</a> 5.4.1.语法说明</h3><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据 id 删除，再新增</li><li>增量修改：修改文档中的指定字段值</li></ul><p>在 RestClient 的 API 中，全量修改与新增的 API 完全一致，判断依据是 ID：</p><ul><li>如果新增时，ID 已经存在，则修改</li><li>如果新增时，ID 不存在，则新增</li></ul><p>这里不再赘述，我们主要关注增量修改。</p><p>代码示例如图：</p><p><img src="`+J+`" alt="image-20210720231040875"></p><p>与之前类似，也是三步走：</p><ul><li>1）准备 Request 对象。这次是修改，所以是 UpdateRequest</li><li>2）准备参数。也就是 JSON 文档，里面包含要修改的字段</li><li>3）更新文档。这里调用 client.update()方法</li></ul><h3 id="_5-4-2-完整代码" tabindex="-1"><a class="header-anchor" href="#_5-4-2-完整代码" aria-hidden="true">#</a> 5.4.2.完整代码</h3><p>在 hotel-demo 的 HotelDocumentTest 测试类中，编写单元测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testUpdateDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.准备Request</span>
    <span class="token class-name">UpdateRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;61083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.准备请求参数</span>
    request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>
        <span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;952&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;starName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;四钻&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-5-批量导入文档" tabindex="-1"><a class="header-anchor" href="#_5-5-批量导入文档" aria-hidden="true">#</a> 5.5.批量导入文档</h2><p>案例需求：利用 BulkRequest 批量将数据库数据导入到索引库中。</p><p>步骤如下：</p><ul><li><p>利用 mybatis-plus 查询酒店数据</p></li><li><p>将查询到的酒店数据（Hotel）转换为文档类型数据（HotelDoc）</p></li><li><p>利用 JavaRestClient 中的 BulkRequest 批处理，实现批量新增文档</p></li></ul><h3 id="_5-5-1-语法说明" tabindex="-1"><a class="header-anchor" href="#_5-5-1-语法说明" aria-hidden="true">#</a> 5.5.1.语法说明</h3><p>批量处理 BulkRequest，其本质就是将多个普通的 CRUD 请求组合在一起发送。</p><p>其中提供了一个 add 方法，用来添加其他请求：</p><p><img src="`+G+'" alt="image-20210720232105943"></p><p>可以看到，能添加的请求包括：</p><ul><li>IndexRequest，也就是新增</li><li>UpdateRequest，也就是修改</li><li>DeleteRequest，也就是删除</li></ul><p>因此 Bulk 中添加了多个 IndexRequest，就是批量新增功能了。示例：</p><p><img src="'+F+`" alt="image-20210720232431383"></p><p>其实还是三步走：</p><ul><li>1）创建 Request 对象。这里是 BulkRequest</li><li>2）准备参数。批处理的参数，就是其它 Request 对象，这里就是多个 IndexRequest</li><li>3）发起请求。这里是批处理，调用的方法为 client.bulk()方法</li></ul><p>我们在导入酒店数据时，将上述代码改造成 for 循环处理即可。</p><h3 id="_5-5-2-完整代码" tabindex="-1"><a class="header-anchor" href="#_5-5-2-完整代码" aria-hidden="true">#</a> 5.5.2.完整代码</h3><p>在 hotel-demo 的 HotelDocumentTest 测试类中，编写单元测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testBulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 批量查询酒店数据</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Hotel</span><span class="token punctuation">&gt;</span></span> hotels <span class="token operator">=</span> hotelService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 1.创建Request</span>
    <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.准备参数，添加多个新增的Request</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Hotel</span> hotel <span class="token operator">:</span> hotels<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.1.转换为文档类型HotelDoc</span>
        <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span>hotel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.2.创建新增文档的Request对象</span>
        request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.发送请求</span>
    client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-6-小结" tabindex="-1"><a class="header-anchor" href="#_5-6-小结" aria-hidden="true">#</a> 5.6.小结</h2><p>文档操作的基本步骤：</p><ul><li>初始化 RestHighLevelClient</li><li>创建 XxxRequest。XXX 是 Index、Get、Update、Delete、Bulk</li><li>准备参数（Index、Update、Bulk 时需要）</li><li>发送请求。调用 RestHighLevelClient#.xxx()方法，xxx 是 index、get、update、delete、bulk</li><li>解析结果（Get 时需要）</li></ul>`,347);function Q(Y,Z){const a=l("router-link");return i(),c("div",null,[X,n("nav",K,[n("ul",null,[n("li",null,[t(a,{to:"#_1-1-了解-es"},{default:e(()=>[s("1.1.了解 ES")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-1-1-elasticsearch-的作用"},{default:e(()=>[s("1.1.1.elasticsearch 的作用")]),_:1})]),n("li",null,[t(a,{to:"#_1-1-2-elk-技术栈"},{default:e(()=>[s("1.1.2.ELK 技术栈")]),_:1})]),n("li",null,[t(a,{to:"#_1-1-3-elasticsearch-和-lucene"},{default:e(()=>[s("1.1.3.elasticsearch 和 lucene")]),_:1})]),n("li",null,[t(a,{to:"#_1-1-4-为什么不是其他搜索技术"},{default:e(()=>[s("1.1.4.为什么不是其他搜索技术？")]),_:1})]),n("li",null,[t(a,{to:"#_1-1-5-总结"},{default:e(()=>[s("1.1.5.总结")]),_:1})])])]),n("li",null,[t(a,{to:"#_1-2-倒排索引"},{default:e(()=>[s("1.2.倒排索引")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-2-1-正向索引"},{default:e(()=>[s("1.2.1.正向索引")]),_:1})]),n("li",null,[t(a,{to:"#_1-2-2-倒排索引"},{default:e(()=>[s("1.2.2.倒排索引")]),_:1})]),n("li",null,[t(a,{to:"#_1-2-3-正向和倒排"},{default:e(()=>[s("1.2.3.正向和倒排")]),_:1})])])]),n("li",null,[t(a,{to:"#_1-3-es-的一些概念"},{default:e(()=>[s("1.3.es 的一些概念")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-3-1-文档和字段"},{default:e(()=>[s("1.3.1.文档和字段")]),_:1})]),n("li",null,[t(a,{to:"#_1-3-2-索引和映射"},{default:e(()=>[s("1.3.2.索引和映射")]),_:1})]),n("li",null,[t(a,{to:"#_1-3-3-mysql-与-elasticsearch"},{default:e(()=>[s("1.3.3.mysql 与 elasticsearch")]),_:1})])])]),n("li",null,[t(a,{to:"#_1-4-安装-es、kibana"},{default:e(()=>[s("1.4.安装 es、kibana")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-4-1-安装"},{default:e(()=>[s("1.4.1.安装")]),_:1})]),n("li",null,[t(a,{to:"#_1-4-2-分词器"},{default:e(()=>[s("1.4.2.分词器")]),_:1})]),n("li",null,[t(a,{to:"#_1-4-3-总结"},{default:e(()=>[s("1.4.3.总结")]),_:1})])])]),n("li",null,[t(a,{to:"#_2-1-mapping-映射属性"},{default:e(()=>[s("2.1.mapping 映射属性")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-索引库的-crud"},{default:e(()=>[s("2.2.索引库的 CRUD")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_2-2-1-创建索引库和映射"},{default:e(()=>[s("2.2.1.创建索引库和映射")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-2-查询索引库"},{default:e(()=>[s("2.2.2.查询索引库")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-3-修改索引库"},{default:e(()=>[s("2.2.3.修改索引库")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-4-删除索引库"},{default:e(()=>[s("2.2.4.删除索引库")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-5-总结"},{default:e(()=>[s("2.2.5.总结")]),_:1})])])]),n("li",null,[t(a,{to:"#_3-1-新增文档"},{default:e(()=>[s("3.1.新增文档")]),_:1})]),n("li",null,[t(a,{to:"#_3-2-查询文档"},{default:e(()=>[s("3.2.查询文档")]),_:1})]),n("li",null,[t(a,{to:"#_3-3-删除文档"},{default:e(()=>[s("3.3.删除文档")]),_:1})]),n("li",null,[t(a,{to:"#_3-4-修改文档"},{default:e(()=>[s("3.4.修改文档")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_3-4-1-全量修改"},{default:e(()=>[s("3.4.1.全量修改")]),_:1})]),n("li",null,[t(a,{to:"#_3-4-2-增量修改"},{default:e(()=>[s("3.4.2.增量修改")]),_:1})])])]),n("li",null,[t(a,{to:"#_3-5-总结"},{default:e(()=>[s("3.5.总结")]),_:1})]),n("li",null,[t(a,{to:"#_4-0-导入-demo-工程"},{default:e(()=>[s("4.0.导入 Demo 工程")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_4-0-1-导入数据"},{default:e(()=>[s("4.0.1.导入数据")]),_:1})]),n("li",null,[t(a,{to:"#_4-0-2-导入项目"},{default:e(()=>[s("4.0.2.导入项目")]),_:1})]),n("li",null,[t(a,{to:"#_4-0-3-mapping-映射分析"},{default:e(()=>[s("4.0.3.mapping 映射分析")]),_:1})]),n("li",null,[t(a,{to:"#_4-0-4-初始化-restclient"},{default:e(()=>[s("4.0.4.初始化 RestClient")]),_:1})])])]),n("li",null,[t(a,{to:"#_4-1-创建索引库"},{default:e(()=>[s("4.1.创建索引库")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_4-1-1-代码解读"},{default:e(()=>[s("4.1.1.代码解读")]),_:1})]),n("li",null,[t(a,{to:"#_4-1-2-完整示例"},{default:e(()=>[s("4.1.2.完整示例")]),_:1})])])]),n("li",null,[t(a,{to:"#_4-2-删除索引库"},{default:e(()=>[s("4.2.删除索引库")]),_:1})]),n("li",null,[t(a,{to:"#_4-3-判断索引库是否存在"},{default:e(()=>[s("4.3.判断索引库是否存在")]),_:1})]),n("li",null,[t(a,{to:"#_4-4-总结"},{default:e(()=>[s("4.4.总结")]),_:1})]),n("li",null,[t(a,{to:"#_5-1-新增文档"},{default:e(()=>[s("5.1.新增文档")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_5-1-1-索引库实体类"},{default:e(()=>[s("5.1.1.索引库实体类")]),_:1})]),n("li",null,[t(a,{to:"#_5-1-2-语法说明"},{default:e(()=>[s("5.1.2.语法说明")]),_:1})]),n("li",null,[t(a,{to:"#_5-1-3-完整代码"},{default:e(()=>[s("5.1.3.完整代码")]),_:1})])])]),n("li",null,[t(a,{to:"#_5-2-查询文档"},{default:e(()=>[s("5.2.查询文档")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_5-2-1-语法说明"},{default:e(()=>[s("5.2.1.语法说明")]),_:1})]),n("li",null,[t(a,{to:"#_5-2-2-完整代码"},{default:e(()=>[s("5.2.2.完整代码")]),_:1})])])]),n("li",null,[t(a,{to:"#_5-3-删除文档"},{default:e(()=>[s("5.3.删除文档")]),_:1})]),n("li",null,[t(a,{to:"#_5-4-修改文档"},{default:e(()=>[s("5.4.修改文档")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_5-4-1-语法说明"},{default:e(()=>[s("5.4.1.语法说明")]),_:1})]),n("li",null,[t(a,{to:"#_5-4-2-完整代码"},{default:e(()=>[s("5.4.2.完整代码")]),_:1})])])]),n("li",null,[t(a,{to:"#_5-5-批量导入文档"},{default:e(()=>[s("5.5.批量导入文档")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_5-5-1-语法说明"},{default:e(()=>[s("5.5.1.语法说明")]),_:1})]),n("li",null,[t(a,{to:"#_5-5-2-完整代码"},{default:e(()=>[s("5.5.2.完整代码")]),_:1})])])]),n("li",null,[t(a,{to:"#_5-6-小结"},{default:e(()=>[s("5.6.小结")]),_:1})])])]),V])}const $=o(z,[["render",Q],["__file","index.html.vue"]]);export{$ as default};
