import{_ as e,r as o,o as c,c as l,a as n,e as t,w as p,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1610327744657-4ccdf6c4.png",r="/MyBlog/assets/1610327935982-44d8c37d.png",k="/MyBlog/assets/1610328101842-5af55d3c.png",d="/MyBlog/assets/1610348132156-94d10702.png",m="/MyBlog/assets/1610348170980-16c5c13b.png",v={},b=n("h1",{id:"_01-io-一",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01-io-一","aria-hidden":"true"},"#"),s(" 01 - IO（一） ✒️")],-1),g={class:"table-of-contents"},w=i('<h2 id="流概述" tabindex="-1"><a class="header-anchor" href="#流概述" aria-hidden="true">#</a> 流概述</h2><h3 id="什么是流-io" tabindex="-1"><a class="header-anchor" href="#什么是流-io" aria-hidden="true">#</a> 什么是流(IO)</h3><p>​ 流(Stream)，是一种抽象的概念，比如:现实生活中的的：水流，河流等；指的是一种物质(数据)从一个位置以一种特殊的方式，转移到另一个位置的过程，那么这种特殊的转移方式称之为流；流在计算中以 IO(Input/Output)的形式存在，即输入（耳朵）与输出（嘴巴），比如通过程序将数据写入文件的过程称之为<strong>输出</strong>，将文件中的数据读取到程序中的过程称之为<strong>输入</strong></p><p>输入输出目标:</p><ul><li>文件</li><li><strong>网络</strong></li></ul><blockquote><p>JavaIO 中的所有类都是位于<code>java.io</code>包</p></blockquote><h3 id="流向说明" tabindex="-1"><a class="header-anchor" href="#流向说明" aria-hidden="true">#</a> 流向说明</h3><p>java 中的流向指的是<strong>输入</strong>与<strong>输出</strong>，并且这个概念是站在程序的角度考虑。</p><p><img src="'+u+'" alt="1610327744657"></p><h3 id="流的分类" tabindex="-1"><a class="header-anchor" href="#流的分类" aria-hidden="true">#</a> 流的分类</h3><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h4><p>流根据不同的分类方式分为以下几类:</p><ol><li>按流向分:输入流与输出流</li><li>按传输的数据类型分:字节流和字符流</li><li>按照处理能力分为:节点流与处理流(包装流)</li></ol><blockquote><p>java 中大多数以 Stream 结尾的流都是字节流，大多数以 Reader 或 Writer 结尾的流都是字符流</p></blockquote><h4 id="体系结构" tabindex="-1"><a class="header-anchor" href="#体系结构" aria-hidden="true">#</a> 体系结构</h4><p><img src="'+r+'" alt="1610327935982"></p><h4 id="顶级父类" tabindex="-1"><a class="header-anchor" href="#顶级父类" aria-hidden="true">#</a> 顶级父类</h4><p>java 中所有的流的顶级父类都从以下几个父类继承，以下这些所有的都是抽象类(abstrtact)</p><p><img src="'+k+`" alt="1610328101842"></p><h2 id="字节流与字符流" tabindex="-1"><a class="header-anchor" href="#字节流与字符流" aria-hidden="true">#</a> 字节流与字符流</h2><h4 id="字节流" tabindex="-1"><a class="header-anchor" href="#字节流" aria-hidden="true">#</a> 字节流</h4><p>所谓字节流，即数据的传输方式以字节为单位进行，字节流的读取方式为每次以一个字节进行传输，一般字节流相对比较通用的一种流，比如常见二进制文件(图片，视频，音频)的操作都可以通过字节流完成。</p><p>字节流的顶级父类主要包含：</p><ul><li>InputStream：字节输入流</li><li>OutputStream：字节输出流</li></ul><h5 id="inputstream" tabindex="-1"><a class="header-anchor" href="#inputstream" aria-hidden="true">#</a> InputStream</h5><p>字节输入流，是一个抽象类，其中常见的子类主要有：</p><ul><li>FileInputStream</li><li>BufferedInputStream</li><li>ByteArrayInputStream</li><li>ObjectInputStream</li></ul><p><strong>InputStream 常见方法：</strong></p><ul><li>available()：获取流中的可读字节数</li><li>read()：读取一个字节的数据，并返回（如果流中没有可读字节内容则返回-1）</li><li>read(byte[] b)：将输入的字节内容存储到字节缓冲区(b)中，并返回实际的读取长度</li><li>skip(int i)：跳过指定个字节发生下一次读取</li><li>close()：关闭程序与系统资源之间的通道</li></ul><p>基本案例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//0  0.0 false &#39; &#39; null</span>
<span class="token comment">//跳过指定个字节读取</span>
is<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将流中的数据读取到字节数组中</span>
is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将字节数组转换为字符串</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//关闭资源</span>
is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="outputstream" tabindex="-1"><a class="header-anchor" href="#outputstream" aria-hidden="true">#</a> OutputStream</h5><p>字节输出流基类，所有的的字节输出流都是从该类继承，OutputStream 是一个抽象类，常见子类有:</p><ul><li>FileOutputStream</li><li>BufferedOutputStream</li><li>ByteArrayOutputStream</li><li>ObjectOutputStream</li></ul><p><strong>OutputStream 常见方法</strong></p><ul><li>write(int b)：向指定输出源输出一个字节</li><li>write(byte[] b)：向指定输出源输出字节数组</li><li>write(byte[] b,int offset,int len)：向指定输出源输出字节数组，并且偏移 offset 个字节，写入 len 长度个字节</li><li>close()：关闭程序与系统资源之间的连接通道</li></ul><p>使用案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputDemo1</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;day1-IO01/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建文件的输出流，使用追加模式(在文件末尾发生写入操作)</span>
        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向输入流中写入一个字节</span>
<span class="token comment">//        os.write(97);</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;宝剑锋自磨砺出，梅花香自苦寒来&quot;</span><span class="token punctuation">;</span>
        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符流" tabindex="-1"><a class="header-anchor" href="#字符流" aria-hidden="true">#</a> 字符流</h4><p>所谓字节流，即数据的传输方式以字符为单位进行，数据的传输为每次传输一个字符(即两个字节)，因此比较适合与传输文本信息，但是不适用与传输二进制文件数据，会导致文件格式破坏从而无法正常打开。另外一种常见的字符流使用为字符格式转码(例如:UTF-8 转 GBK)</p><p>JavaIO 中的字符流都从以下两个抽象类继承而来:</p><ul><li>Reader：字符输入流</li><li>Writer：字符输出流</li></ul><h5 id="reader" tabindex="-1"><a class="header-anchor" href="#reader" aria-hidden="true">#</a> Reader</h5><p>Reader 用于使用字符的形式从输入源(文件或网络)中读取字符内容，读取方式是一个一个字符读取，常见方法类似 InputStream：</p><ul><li>read()：读取一个字符</li><li>read(char[] ch)：将读取的字符存储到字符缓冲区，返回真实读取字符数，读取到末尾时返回-1</li><li>read(char[] ch,int offset,int len)：将读取的字符存储到字符缓冲区，偏移 offset 位读取，读取 len 为位</li><li>skip(long l)：跳过指定个字符发生下一次读取</li></ul><p><strong>Reader 常见的子类:</strong></p><ul><li>FileReader</li><li>InputStreamReader</li><li>BufferedReader</li></ul><p>基本案例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\文档资料\\\\电子书\\\\书籍推荐.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//根据提供的文件构建一个字符文件输入流</span>
<span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> encoding <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符编码:&quot;</span><span class="token operator">+</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上的读取方式，从底层来看，效率比较低，因为循环的时候是每次读取一个字符，因此循环的次数较多，必然会增加时间上的开销。若需要提高读取效率，则可以考虑使用空间换取时间的方式,使用字符缓冲区：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\文档资料\\\\电子书\\\\书籍推荐.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//根据提供的文件构建一个字符文件输入流</span>
<span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> encoding <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符编码:&quot;</span><span class="token operator">+</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="writer" tabindex="-1"><a class="header-anchor" href="#writer" aria-hidden="true">#</a> Writer</h5><p>Writer 用于以字符的形式将文本内容输出到指定的输出源，常见方法：</p><ul><li>write(int b)</li><li>write(char[] c)</li><li>write(char[] c,int offset,int len)</li><li>write(String s)</li><li>flush()</li></ul><p>基本案例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;day1-IO01/test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;床前明月光，汗滴禾下土&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用字符流实现文件拷贝：</strong></p><blockquote><p><strong>在 GBK 的编码模式下 1 个中文字符等于 2 个字节；</strong></p><p><strong>在 UTF-8 的编码模式下 1 个中文字符等于 3 个字节；</strong></p><p>字节流字符流的区别：</p><p>两种流分别采用的不同形式读取文件，<strong>在进行二进制文件读取时适合使用字节流，而对文本文件读取时适合使用字符流</strong></p></blockquote><h2 id="流案例之文件拷贝" tabindex="-1"><a class="header-anchor" href="#流案例之文件拷贝" aria-hidden="true">#</a> 流案例之文件拷贝</h2><p>所谓文件拷贝，即将一个文件从一个指定的目录复制到另一个目录的过程，原理：对源文件使用输入流读取，将读取的字节缓存到程序的内存中，然后再获取目标文件的输出流，将缓存的字节通过输出流写出到指定位置</p><p>实现代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * @Author mrchai 2021/1/11 11:32
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCopy</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 将一个源文件拷贝到目标目录中
     * <span class="token keyword">@param</span> <span class="token parameter">source</span> 源文件
     * <span class="token keyword">@param</span> <span class="token parameter">dir</span>  目标目录
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">File</span> source<span class="token punctuation">,</span> <span class="token class-name">File</span> dir<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取源文件的输出流</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span>
            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取目标文件的输出流</span>
            <span class="token class-name">FileOutputStream</span> fos  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//声明字节缓冲区</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始拷贝...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;拷贝完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;day1-IO01/35.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//思考:如何实现目录拷贝(目录中还可能包含子目录)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资源文件读取与-properties-类" tabindex="-1"><a class="header-anchor" href="#资源文件读取与-properties-类" aria-hidden="true">#</a> 资源文件读取与 Properties 类</h2><h3 id="读取-resources-目录下的资源" tabindex="-1"><a class="header-anchor" href="#读取-resources-目录下的资源" aria-hidden="true">#</a> 读取 resources 目录下的资源</h3><p><img src="`+d+'" alt="1610348132156"></p><p>java 项目中的资源文件或配置文件(比如:xml 文件，properties 文件)一般会存放在 resources 目录下，该目录在 maven 项目中自动包含，如果是非 maven 项目，需要手动创建目录,并将目录设置为<code>Resource Root</code>,参考以上操作，操作完成后，目录显示效果如下:</p><p><img src="'+m+`" alt="1610348170980"></p><p>在程序中对资源文件的读取方式如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//读取资源为InputStream</span>
<span class="token comment">//方式一：</span>
<span class="token class-name">InputStream</span> is1 <span class="token operator">=</span> <span class="token class-name">PropertiesDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式二:</span>
<span class="token class-name">InputStream</span> is2 <span class="token operator">=</span> <span class="token class-name">PropertiesDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读取资源为URL</span>
<span class="token comment">//方式一：</span>
<span class="token class-name">URL</span> url1 <span class="token operator">=</span> <span class="token class-name">PropertiesDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式二：</span>
<span class="token class-name">URL</span> url2 <span class="token operator">=</span> <span class="token class-name">PropertiesDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="properties-类" tabindex="-1"><a class="header-anchor" href="#properties-类" aria-hidden="true">#</a> Properties 类</h3><p>Properties 是从 Hashtable 继承而来，存储的结构为键值对的属性信息，通过加载输入流(字节，字符)将流中的数据读取为属性列表(键值对对结构)；</p><p>属性文件的结构:</p><p>jdbc.properties：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">driverClass</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/test</span>
<span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取属性文件内容:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//加载指定资源文件成为流</span>
<span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">PropertiesDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建Properties对象</span>
<span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将流数据装载Properties对象中</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//根据属性的键获取值</span>
<span class="token class-name">String</span> className <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driverClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> url <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> user <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> password <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理流与打印流" tabindex="-1"><a class="header-anchor" href="#处理流与打印流" aria-hidden="true">#</a> 处理流与打印流</h2><p>​ 之前所了解的流都是直接与输入输出源对接的流，这些流称之节点流（低级流）；因此在 IO 的体系结构中，另外还存在一些用于对其他流进行处理的高级流，也称之处理流（包装流），比如流类型的转换会使用<strong>转换流</strong>，提高读写效率时使用<strong>缓冲流</strong>，进行打印输出操作时使用<strong>打印流</strong>等。高级流实际是基于一种设计模式所实现(装饰器模式)；处理流主要有以下几类：</p><ul><li>转换流：用于字节流和字符流之间的转换 <ul><li><strong>InputStreamReader</strong>：将字节输入流转换为字符输入流（从字节通往字符的桥梁）</li><li>OutputStreamWriter：将字符输出流转换为字节输出流（从字符通往字节的桥梁）</li></ul></li><li>缓冲流 <ul><li>BufferedInputStream</li><li>BufferedOutputStream</li><li>BufferedReader</li><li>BufferedWriter</li></ul></li><li>打印流</li></ul><h3 id="转换流基本使用" tabindex="-1"><a class="header-anchor" href="#转换流基本使用" aria-hidden="true">#</a> 转换流基本使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        InputStream is = System.in;</span>
<span class="token comment">//        //将字节流包装为字符流</span>
<span class="token comment">//        InputStreamReader isr = new InputStreamReader(is,&quot;gbk&quot;);</span>
<span class="token comment">//        int i = -1;</span>
<span class="token comment">//        while((i = isr.read()) != -1){</span>
<span class="token comment">//            System.out.print((char)i);</span>
<span class="token comment">//        }</span>
<span class="token comment">//        isr.close();</span>

<span class="token comment">//将字符输出流转换为字节输出流</span>
<span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;day1-IO01/test.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;鹅鹅鹅，曲项向天歌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件编码转换-主要针对文本文件" tabindex="-1"><a class="header-anchor" href="#文件编码转换-主要针对文本文件" aria-hidden="true">#</a> 文件编码转换(主要针对文本文件)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterConverterUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">File</span> source<span class="token punctuation">,</span> <span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> oldEncoding<span class="token punctuation">,</span> <span class="token class-name">String</span> newEncoding<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span>
            <span class="token comment">//将源文件以字节流读取，并以指定的字符编码读取并转换为字符流</span>
            <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span>oldEncoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取目标文件的输出流并以自定的字符编码写入</span>
            <span class="token class-name">OutputStreamWriter</span> osw  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>newEncoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始转换...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;转换完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\gbk\\\\Config.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">convert</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>dir<span class="token punctuation">,</span><span class="token string">&quot;gbk&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓冲流" tabindex="-1"><a class="header-anchor" href="#缓冲流" aria-hidden="true">#</a> 缓冲流</h3><p>缓冲流是 IO 包中提供的用于高效进行读写操作的流，流的内部实现包含了一个固定大小的缓冲区，缓冲流主要包含以下四个类:</p><ul><li>BufferedInputStream</li><li>BufferedOutputStream</li><li>BufferedReader</li><li>BufferedWriter</li></ul><p>BufferedInputStream 基本使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;day1-IO01/35.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BufferedReader 基本使用:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedDemo2</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;day1-IO01/书籍推荐.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line  <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89);function h(f,y){const a=o("router-link");return c(),l("div",null,[b,n("nav",g,[n("ul",null,[n("li",null,[t(a,{to:"#流概述"},{default:p(()=>[s("流概述")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#什么是流-io"},{default:p(()=>[s("什么是流(IO)")]),_:1})]),n("li",null,[t(a,{to:"#流向说明"},{default:p(()=>[s("流向说明")]),_:1})]),n("li",null,[t(a,{to:"#流的分类"},{default:p(()=>[s("流的分类")]),_:1})])])]),n("li",null,[t(a,{to:"#字节流与字符流"},{default:p(()=>[s("字节流与字符流")]),_:1})]),n("li",null,[t(a,{to:"#流案例之文件拷贝"},{default:p(()=>[s("流案例之文件拷贝")]),_:1})]),n("li",null,[t(a,{to:"#资源文件读取与-properties-类"},{default:p(()=>[s("资源文件读取与 Properties 类")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#读取-resources-目录下的资源"},{default:p(()=>[s("读取 resources 目录下的资源")]),_:1})]),n("li",null,[t(a,{to:"#properties-类"},{default:p(()=>[s("Properties 类")]),_:1})])])]),n("li",null,[t(a,{to:"#处理流与打印流"},{default:p(()=>[s("处理流与打印流")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#转换流基本使用"},{default:p(()=>[s("转换流基本使用")]),_:1})]),n("li",null,[t(a,{to:"#缓冲流"},{default:p(()=>[s("缓冲流")]),_:1})])])])])]),w])}const q=e(v,[["render",h],["__file","index.html.vue"]]);export{q as default};
