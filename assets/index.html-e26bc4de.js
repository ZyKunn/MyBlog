import{_ as p,r as o,o as c,c as l,a as n,e,w as t,b as a,d as i}from"./app-a153c100.js";const u={},r=n("h1",{id:"🏔️java-中-var-类型的用法和使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🏔️java-中-var-类型的用法和使用","aria-hidden":"true"},"#"),a(" 🏔️Java 中 var 类型的用法和使用")],-1),d=n("hr",null,null,-1),k={class:"table-of-contents"},v=i(`<blockquote><p>简评：Java var != JavaScript var。</p></blockquote><h2 id="什么是类型推断" tabindex="-1"><a class="header-anchor" href="#什么是类型推断" aria-hidden="true">#</a> 什么是类型推断</h2><p>其实在 Java 中类型推断早就存在了，看下下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中给 ArrayList 定义持有的类型就没必要了，因为 List&lt;\\String&gt; 已经定义了我们需要的类型 String ，在 Java 7 中增加了类型推断，这时例子可以直接写成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种写法是完全合法的，而且最终会形成一样的字节码。对经常使用泛型的开发者来说，可能早就对上面的类型推断写法习以为常。</p><h2 id="那什么是局部变量类型推断" tabindex="-1"><a class="header-anchor" href="#那什么是局部变量类型推断" aria-hidden="true">#</a> 那什么是局部变量类型推断？</h2><p>即能推断出方法中局部变量的类型，这是 Java 10 中新增的特性，对应关键词 var，看个例子 ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span> name <span class="token operator">=</span> <span class="token string">&quot;Todd&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>name 是什么类型，很明显是 String，而 Java 10 就可以让编译器帮我们判断其类型，我们只要写成下面的形式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Todd&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>var 的使用不局限于函数内声明的变量，同时也可以用于循环的索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> names<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我必须使用 var 吗？不是的，老方法一样完美支持。</p><h2 id="这样的做法危险吗" tabindex="-1"><a class="header-anchor" href="#这样的做法危险吗" aria-hidden="true">#</a> 这样的做法危险吗？</h2><p>一个字：不。 简单说它是受限于它们存在的方法（或循环声明）的范围。这意味着除了声明它们的方法的开发之外，人们不编写依赖于这些类型的代码。 还有大家会有一个疑惑，很多语言也是不需要定义类型的，完全由编译器搞定，以 JavaScript 举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;Todd&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>简单吧，x 是 String 类型的，但是在 JS 中能重新定义类型，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;Todd&#39;</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>像这种 Java 以后是不是也不用考虑变量类型了？错，和 JS 不一样，Java 中的 var 只能在局部变量使用外，同时是不能重复赋值的，就拿上面的例子，会导致编译错误：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&quot;Todd&quot;</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 是强类型语言，每个变量都有固定的变量类型。</p><p>所以 var 一点都不危险，Java 也不会因此变成动态类型分配语言，这仅仅是对局部变量多了一种定义方式。</p><h2 id="总结下" tabindex="-1"><a class="header-anchor" href="#总结下" aria-hidden="true">#</a> 总结下</h2><ol><li>Java var != JavaScript var；</li><li>Var 解决了你显示声明变量的一些麻烦，但他们依然存在；</li><li>Var 声明的变量和显示声明的变量是一模一样的；</li><li>Var 类型变量不会影响到你其他的代码；</li></ol><p><strong>用 var 声明变量的注意事项：</strong></p><ol><li>var 只能在方法内定义变量，不允许定义类的成员变量。</li><li>var 定义变量必须赋初始值，------》以后不能在赋初始值。</li><li>var 每次只能定义一个变量，不能复合声明变量。</li></ol><p><strong>使用 var 定义变量的优缺点：</strong> 优点：使代码简洁和整齐。 缺点：降低了程序的可读性。</p><p><strong>什么时候该用 var 定义变量：</strong> 如果你定义变量时，给变量赋给一个直观的值，这时就可以使用 var 定义变量，</p><p><strong>最不能使用 var 定义变量：</strong></p><ol><li>给 var 定义的变量赋给一个很复杂的表达式时，这样使表达式的返回值不直观，不能用 var 定义变量。</li><li>var 定义的变量作用域很长时，方法长和 var 变量影响较大时，不用 var 定义变量。</li></ol>`,32);function m(g,b){const s=o("router-link");return c(),l("div",null,[r,d,n("nav",k,[n("ul",null,[n("li",null,[e(s,{to:"#什么是类型推断"},{default:t(()=>[a("什么是类型推断")]),_:1})]),n("li",null,[e(s,{to:"#那什么是局部变量类型推断"},{default:t(()=>[a("那什么是局部变量类型推断？")]),_:1})]),n("li",null,[e(s,{to:"#这样的做法危险吗"},{default:t(()=>[a("这样的做法危险吗？")]),_:1})]),n("li",null,[e(s,{to:"#总结下"},{default:t(()=>[a("总结下")]),_:1})])])]),v])}const f=p(u,[["render",m],["__file","index.html.vue"]]);export{f as default};
