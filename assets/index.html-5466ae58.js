import{_ as r,r as i,o as l,c,a,e as s,w as e,b as n,d as o}from"./app-a153c100.js";const u="/MyBlog/assets/image-20230620151930869-9c6bbc11.png",d="/MyBlog/assets/image-20230620151937274-2c548de9.png",g="/MyBlog/assets/image-20230620151946554-df2d4161.png",h="/MyBlog/assets/image-20230620152036217-a4f24086.png",k="/MyBlog/assets/image-20230620152136368-6565557b.png",m="/MyBlog/assets/image-20230620152141700-ff7c41a5.png",_="/MyBlog/assets/image-20230620152146184-71dd99ec.png",v="/MyBlog/assets/image-20230611161756277-ae1ea375.png",b="/MyBlog/assets/image-20230620152223608-09fc7411.png",y="/MyBlog/assets/image-20230620152227294-dcabf2a8.png",f="/MyBlog/assets/image-20230620152232125-d51d0fdf.png",q="/MyBlog/assets/image-20230620152235582-fed87b93.png",x="/MyBlog/assets/image-20230521181030647-2759cf7e.png",M="/MyBlog/assets/image-20230620152246398-17256724.png",w="/MyBlog/assets/image-20230620152252632-200c0800.png",B="/MyBlog/assets/image-20230620152308093-a8d296c8.png",S="/MyBlog/assets/image-20230620152317478-15a2d743.png",C="/MyBlog/assets/image-20230531095803107-a6f22ab3.png",j="/MyBlog/assets/image-20230531095809466-9b74a196.png",O="/MyBlog/assets/image-20230620152359610-2ab2ac08.png",A="/MyBlog/assets/image-20230531092042421-67b247f3.png",F="/MyBlog/assets/image-20230531094310426-03b918d7.png",E="/MyBlog/assets/image-20230531093151238-c5b2503b.png",N="/MyBlog/assets/image-20230531094744663-bc7ec7c1.png",T="/MyBlog/assets/image-20230531094752141-89013dbf.png",J="/MyBlog/assets/image-20230620152513177-1883ed47.png",I="/MyBlog/assets/image-20230620152246398-17256724.png",P="/MyBlog/assets/image-20230620152524539-eacee110.png",R="/MyBlog/assets/image-20230526163246021-443e036e.png",X="/MyBlog/assets/image-20230604181459231-287c7ae3.png",L="/MyBlog/assets/image-20230604180528863-b5c2b918.png",H="/MyBlog/assets/image-20230604180558722-9816be29.png",W="/MyBlog/assets/image-20230604182837011-01e03588.png",z="/MyBlog/assets/image-20230604183218592-e5db4b3e.png",D="/MyBlog/assets/image-20230604182219723-56f9a38b.png",U="/MyBlog/assets/image-20230604181025173-557d683a.png",G="/MyBlog/assets/image-20230604180517699-2ce2e59f.png",V="/MyBlog/assets/image-20230611154901217-c4d357c6.png",Q="/MyBlog/assets/image-20230611154911811-aa2effc8.png",Y="/MyBlog/assets/image-20230611154916637-518fe440.png",Z="/MyBlog/assets/image-20230611155603305-105cd717.png",K="/MyBlog/assets/image-20230611161217060-3228d871.png",$="/MyBlog/assets/image-20230611160731156-728b04b8.png",nn="/MyBlog/assets/image-20230611161756277-ae1ea375.png",an="/MyBlog/assets/image-20230620152743945-32c1c347.png",sn="/MyBlog/assets/image-20230620152749587-45373c5a.png",pn="/MyBlog/assets/image-20230616105412553-642747f5.png",en="/MyBlog/assets/image-20230620152802468-b39bf255.png",tn="/MyBlog/assets/image-20230620152805764-4e4f38ac.png",on={},rn=a("h1",{id:"项目总结",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#项目总结","aria-hidden":"true"},"#"),n(),a("strong",null,"项目总结")],-1),ln={class:"table-of-contents"},cn=o('<p><strong>1 简介</strong></p><p>学成在线项目是一个 B2B2C 的在线教育平台，本项目包括了用户端、机构端、运营端。</p><p>核心模块包括：内容管理、媒资管理、课程搜索、订单支付、选课管理、认证授权等。</p><p>下图是项目的功能模块图：</p><p><img src="'+u+'" alt="image-20230620151930869"></p><p>项目采用前后端分离的技术架构，使用 Spring Cloud 技术栈构建微服务，数据库采用 MySQL，还使用了 Redis、RabbitMQ、Elasticsearch 等技术。</p><p>技术栈如下图：</p><p><img src="'+d+'" alt="image-20230620151937274"></p><h2 id="_2-项目技术架构相关" tabindex="-1"><a class="header-anchor" href="#_2-项目技术架构相关" aria-hidden="true">#</a> <strong>2 项目技术架构相关</strong></h2><h3 id="_2-1-项目采用什么技术架构" tabindex="-1"><a class="header-anchor" href="#_2-1-项目采用什么技术架构" aria-hidden="true">#</a> <strong>2.1 项目采用什么技术架构?</strong></h3><p>项目采用前后端分离的技术架构，使用 Spring Cloud 技术栈构建微服务，数据库采用 MySQL，还使用了 Nacos、Spring Cloud Gateway、Redis、RabbitMQ、Elasticsearch、XXL-Job 等技术。</p><h3 id="_2-2-微服务都用了哪些技术" tabindex="-1"><a class="header-anchor" href="#_2-2-微服务都用了哪些技术" aria-hidden="true">#</a> <strong>2.2 微服务都用了哪些技术?</strong></h3><p>所有微服务基于 Spring Boot 构建，分为接口层、模型层、业务层。</p><p>1）接口层</p><p>提供与前端的 HTTP 接口实现。</p><p>Spring MVC、Spring Security Oauth2 、Swagger</p><p>2）模型层</p><p>提供 PO 类、DTO 类统一管理。</p><p>3）业务层</p><p>包括业务 Service 与 MyBatis Mapper。</p><p>使用 MyBatis-Plus 框架实现 Mapper 开发。</p><p>业务 Service 调用 Mapper 完成数据持久化。</p><p>全部 bean 被 Spring 进行管理。</p><p>基于 Spring 进行本地数据库事务控制。</p><p>使用 XXL-JOB 完成任务调度。</p><p>RabbitTemplate 和消息队列通信。</p><p>搜索服务基于 Elasticsearch 构建。</p><p>4）配置文件由 Nacos 统一管理。</p><p>5）微服务远程调用使用 Feign 实现。</p><p>6）服务注册中心使用 Nacos 实现。</p><p>7）使用 Spring Cloud Gateway 实现网关统一路由。</p><h3 id="_2-3-微服务的-maven-工程结构是什么样" tabindex="-1"><a class="header-anchor" href="#_2-3-微服务的-maven-工程结构是什么样" aria-hidden="true">#</a> <strong>2.3 微服务的 maven 工程结构是什么样?</strong></h3><p>项目分模块进行 maven 工程构建，如下图：</p><p><img src="'+g+`" alt="image-20230620151946554"></p><p>1、项目由一个父工程对依赖版本进行统一管理、对打包规则进行定义。</p><p>2、项目由一个基本工程提供一些公用的工具类、架构基础类库。</p><p>3、每个模块基本上分为四个工程如下：</p><p>xuecheng-plus-content-api：接口工程，为前端提供接口。</p><p>xuecheng-plus-content-service: 业务工程，为接口工程提供业务支撑。</p><p>xuecheng-plus-content-model: 数据模型工程，存储数据模型类、数据传输类型等。</p><p>xuecheng-plus-content：内容管理模块父工程，负责聚合 xuecheng-plus-content-api、xuecheng-plus-content-service、xuecheng-plus-content-model。</p><h3 id="_2-4-nacos-有什么用-怎么用" tabindex="-1"><a class="header-anchor" href="#_2-4-nacos-有什么用-怎么用" aria-hidden="true">#</a> <strong>2.4 Nacos 有什么用？怎么用？</strong></h3><p>Naocs 作为本项目的服务注册中心和配置中心。</p><p>服务注册中心：也叫服务发现中心，微服务将自己注册到服务注册中心，服务间远程调用通过服务注册中心获取目标服务的地址，从而进行远程调用。</p><p>市面上的服务注册中心有：Zookeeper、Eureka、Nacos、Consul，本项目使用 Nacos。</p><p>配置中心：统一管理微服务的配置文件。</p><p>市面上的配置中心有：Spring Cloud config、Apollo、Nacos。本项目使用 Nacos。</p><p>微服务中怎么用 Nacos？</p><p>1、作为配置中心</p><p>1）首先配置 nacos-config 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）在 nacos 添加配置文件</p><p>添加配置文件注意四部分：namespace、group、dataid 及文件扩展名。</p><p>namespace：命名空间，项目的运行环境。</p><p>group: 项目名</p><p>Dataid: 包括三部分：服务名、环境名、扩展名，</p><p>Dataid 举例：content-service-dev.yaml 配置文件 由（content-service）-（dev）. (yaml)三部分组成</p><p>content-service：第一部分，它是在 application.yaml 中配置的应用名，即 spring.application.name 的值。</p><p>dev：第二部分，它是环境名，通过 spring.profiles.active 指定，</p><p>Yaml: 第三部分，它是配置文件 的后缀，目前 nacos 支持 properties、yaml 等格式类型，本项目选择 yaml 格式类型。</p><p>示例图如下：</p><p><img src="`+h+`" alt="image-20230620152036217"></p><p>3）在项目工程配置 boostrap.yml</p><p>在 boostrap.yml 中配置 nacos 的地址，启动工程将会请求 nacos 读取配置信息，下边是个例子</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> content<span class="token punctuation">-</span>api
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.101.65<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev1010
        <span class="token key atrule">group</span><span class="token punctuation">:</span> xuecheng<span class="token punctuation">-</span>plus<span class="token punctuation">-</span>project
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev1010
        <span class="token key atrule">group</span><span class="token punctuation">:</span> xuecheng<span class="token punctuation">-</span>plus<span class="token punctuation">-</span>project
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml
        <span class="token key atrule">refresh-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、作用服务发现中心</p><p>1）首先配置 nacos-discovery 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）启动微服务，自动上传到 nacos</p><p><img src="`+k+'" alt="image-20230620152136368"></p><h3 id="_2-5-gateway-怎么用的" tabindex="-1"><a class="header-anchor" href="#_2-5-gateway-怎么用的" aria-hidden="true">#</a> <strong>2.5 Gateway 怎么用的？</strong></h3><p>本项目使用 Spring Cloud Gateway 作用网关，网关的作用是负载均衡、路由转发，见下图：</p><p><img src="'+m+'" alt="image-20230620152141700"></p><p>前端请求到 Nginx，通过负载均衡到 Gateway 网关，通过网关将请求转发至各个微服务。</p><p>网关进行路由时需要知道每个微服务实例的地址，网关从 nacos 读取服务地址，如下图：</p><p><img src="'+_+'" alt="image-20230620152146184"></p><p>流程如下：</p><p>1、微服务启动，将自己注册到 Nacos，Nacos 记录了各微服务实例的地址。</p><p>2、网关从 Nacos 读取服务列表，包括服务名称、服务地址等。</p><p>3、请求到达网关，网关将请求路由到具体的微服务。</p><p>本项目网关还具有统一鉴权功能：</p><p>1、网站白名单</p><p>在白名单的中的地址不进行身份校验直接放行。</p><p>2、身份校验</p><p>校验请求中 jwt 令牌的合法性，令牌合法则继续访问，否则拒绝访问。</p><h3 id="_2-6-redis-怎么用的" tabindex="-1"><a class="header-anchor" href="#_2-6-redis-怎么用的" aria-hidden="true">#</a> <strong>2.6 Redis 怎么用的？</strong></h3><p>项目中使用 Redis 缓存以下信息，每种类型的信息缓存时间不同：</p><p>1、验证码</p><p>30 秒</p><p>2、课程发布信息</p><p>7 天</p><p>3、课程视频信息</p><p>7 天</p><p>4、我的课程</p><p>5 分钟</p><p>5、我的订单</p><p>5 分钟</p><p>项目使用 Redisson 实现分布式锁，避免课程查询等公开接口出现缓存击穿问题。</p><h3 id="_2-7-rabbitmq-怎么用的" tabindex="-1"><a class="header-anchor" href="#_2-7-rabbitmq-怎么用的" aria-hidden="true">#</a> <strong>2.7 RabbitMQ 怎么用的？</strong></h3><p>消息队列在本项目用于订单服务，支付成功通过消息队列将结果通知给其它微服务。</p><p>具体使用方法见下图：</p><p><img src="'+v+`" alt="image-20230620152156527"></p><p>订单服务完成支付后将支付结果发给每一个与订单服务对接的微服务，订单服务将消息发给交换机，由交换机广播消息，每个订阅消息的微服务都可以接收到支付结果.</p><p>微服务收到支付结果根据订单的类型去更新自己的业务数据。</p><h3 id="_2-8-elasticsearch-怎么用的" tabindex="-1"><a class="header-anchor" href="#_2-8-elasticsearch-怎么用的" aria-hidden="true">#</a> <strong>2.8 Elasticsearch 怎么用的？</strong></h3><p>本项目使用 Elasticsearch 对课程发布信息进行索引和搜索。</p><p>1、首先创建课程信息的索引</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /course-publish
<span class="token punctuation">{</span>
  <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;number_of_shards&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;companyId&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;companyName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;search_analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;search_analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;users&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;search_analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;mt&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;mtName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;st&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;stName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;grade&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;teachmode&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;pic&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;search_analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;createDate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;date&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;remark&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;charge&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;scaled_float&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;scaling_factor&quot;</span><span class="token operator">:</span> <span class="token number">100</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;originalPrice&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;scaled_float&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;scaling_factor&quot;</span><span class="token operator">:</span> <span class="token number">100</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;validDays&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义索引、搜索接口。</p><p>3、课程信息索引。</p><p>课程发布由内容管理服务远程调用搜索服务添加索引接口将课程信息添加至 ES 索引库。</p><p>课程下架由内容管理服务远程调用搜索服务删除索引接口将课程信息从 ES 索引库删除。</p><p>4、课程搜索接口使用了布尔查询、聚合搜索、过滤器、高亮显示等功能。</p><h3 id="_2-9-xxl-job-怎么用的" tabindex="-1"><a class="header-anchor" href="#_2-9-xxl-job-怎么用的" aria-hidden="true">#</a> <strong>2.9 XXL-Job 怎么用的？</strong></h3><p>首先说 XXL-JOB 的工作流程，然后说本项目使用 XXL-JOB 具体方案。</p><p>1 XXL-JOB 的工作流程</p><p>XXL-JOB 分布式任务调度服务由调用中心和执行器组成，调用中心负责按任务调度策略向执行器下发任务，执行器负责接收任务执行任务。如下图：</p><p><img src="`+b+'" alt="image-20230620152223608"></p><p>1）在微服务配置执行器名称、端口，启动微服务后执行器向调用中心注册。</p><p>可通过调度中心页面查询执行器是否注册成功</p><p><img src="'+y+'" alt="image-20230620152227294"></p><p>2）在微服务定义任务方法</p><p>下边是课程发布任务的示例</p><p><img src="'+f+'" alt="image-20230620152232125"></p><p>3）在调用中心配置任务调度策略</p><p><img src="'+q+'" alt="image-20230620152235582"></p><p>4）启动任务进行任务调度。</p><p>2、本项目使用 XXL-JOB 的具体方案</p><p>本项目使用 XXL-JOB 完成课程发布数据同步、支付结果通知等任务。</p><p>下边以视频处理任务为例说明：</p><p>1) 调度中心采用分片广播方式下发任务</p><p>执行器部署在多个微服务实例，收到任务从数据库读取待处理任务列表：</p><p><img src="'+x+'" alt="image-20230620152240874"></p><p>每个执行器收到广播任务有两个参数：分片总数、分片序号。每个执行器从数据表取任务时可以让任务 id 模上 分片总数，如果等于分片序号则执行此任务。</p><p>上边两个执行器实例的分片总数为 2，序号为 0、1，从任务 1 开始，如下：</p><p>1 % 2 = 1 执行器 2 执行</p><p>2 % 2 = 0 执行器 1 执行</p><p>3 % 2 = 1 执行器 2 执行</p><p>2）得到待处理任务启动多任务进行任务处理</p><p>下图是视频上传及处理的业务流程：</p><p><img src="'+M+'" alt="image-20230620152246398"></p><p>上传视频成功向视频处理待处理表添加记录</p><p>由于调度中心进行任务调度，执行器从数据库查询待处理任务，启动多线程进行处理。</p><h3 id="_2-10-如何保证任务不重复执行" tabindex="-1"><a class="header-anchor" href="#_2-10-如何保证任务不重复执行" aria-hidden="true">#</a> <strong>2.10 如何保证任务不重复执行?</strong></h3><p>1、执行器收到作业分片广播，计算 任务 id 模上 分片总数的结果，等于分片序号任务去执行，这里保证了不同的执行器执行不同的任务。</p><p>2、配置调度过期策略，避免同一个执行器多次重复执行同一个任务</p><p>调度过期策略如下：</p><ul><li>忽略：调度过期后，忽略过期的任务，从当前时间开始重新计算下次触发时间；</li><li>立即执行一次：调度过期后，立即执行一次，并从当前时间开始重新计算下次触发时间；</li><li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；</li></ul><p>这里我们选择忽略，如果立即执行一次可能会重复调度。</p><p><img src="'+w+'" alt="image-20230620152252632"></p><p>其次，再看阻塞处理策略，阻塞处理策略就是当前执行器正在执行任务还没有结束时调度时间到达到，此时该如何处理。</p><p>查看文档如下：<br> 单机串行（默认）：调度请求进入单机执行器后，调度请求进入 FIFO 队列并以串行方式运行；<br> 丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；<br> 覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</p><p>这里选择 丢弃后续调度，避免重复调度。</p><p>3、保证任务处理的幂等性</p><p>幂等性是为了解决重复提交问题，比如：恶意刷单，重复支付等。</p><p>解决幂等性常用的方案：</p><p>1）数据库约束，比如：唯一索引，主键。</p><p>2）乐观锁，常用于数据库，更新数据时根据乐观锁状态去更新。</p><p>3）唯一序列号，操作传递一个唯一序列号，操作时判断与该序列号相等则执行。</p><p>这里我们在数据库视频处理表中添加处理状态字段，视频处理完成更新状态为完成，执行视频处理前判断状态是否完成，如果完成则不再处理。</p><h3 id="_2-11-如何定义一个接口" tabindex="-1"><a class="header-anchor" href="#_2-11-如何定义一个接口" aria-hidden="true">#</a> <strong>2.11 如何定义一个接口？</strong></h3><p>1、确定协议</p><p>定义一个接口首先确定接口的协议，Http 协议及具体的方法（GET、POST、PUT、DELETE）</p><p>2、请求</p><p>接下来需要分析请求及响应的数据格式与内容。</p><p>get 请求时，前端请求 key/value 串，SpringMVC 采用基本数据类型（String、Integer 等）或自定义类型接收。</p><p>Post 请求时，前端请 Form 表单数据（application/x-www-form-urlencoded）和 Json 数据(Content-Type=application/json)、多部件类型数据（multipart/form-data），对于 Json 数据 SpringMVC 使用@RequestBody 注解解析请求的 json 数据。</p><p>3、响应</p><p>基本上都是返回 Json 格式的响应结果。</p><p>4、生成接口文档</p><p>使用 swagger 注解描述接口的内容，使用 Swagger 生成接口文档。</p><h3 id="_2-12-如何进行接口开发" tabindex="-1"><a class="header-anchor" href="#_2-12-如何进行接口开发" aria-hidden="true">#</a> <strong>2.12 如何进行接口开发?</strong></h3><p>1、首先要仔细阅读接口文档</p><p>搞清楚接口的协议、请求及响应的数据格式、http 状态码要求等。</p><p>2、使用代码生成器生成 Mapper 接口、Mapper xml 文件和 PO 类。</p><p>3、编写 Service 接口与 Service 实现。</p><p>4、对自定义的 Mapper 与 Service 方法进行单元测试。</p><p>5、在 Controller 调用 Service 完成业务逻辑处理。</p><p>6、使用 HttpClient 工具测试 Controller 接口。</p><h3 id="_2-13-接口异常如何处理" tabindex="-1"><a class="header-anchor" href="#_2-13-接口异常如何处理" aria-hidden="true">#</a> <strong>2.13 接口异常如何处理？</strong></h3><p>接口在过程中存在异常由统一异常处理器进行处理。</p><p>1、处理自定义异常</p><p>程序在编写代码时根据校验结果主动抛出自定义异常类 XueChengPlusException 的对象，并编写详细的异常信息，异常处理器捕获异常信息记录异常日志并响应给用户。</p><p>2、处理未知异常</p><p>接口执行过程中的一些运行时异常也会由异常处理器统一捕获，记录异常日志，统一响应给用户 500 错误及统一的异常信息。</p><p>异常处理器使用控制器增加注解@ControllerAdvice 和异常处理注解@ExceptionHandler 来实现。</p><h3 id="_2-14-如何进行接口测试和前后端联调" tabindex="-1"><a class="header-anchor" href="#_2-14-如何进行接口测试和前后端联调" aria-hidden="true">#</a> <strong>2.14 如何进行接口测试和前后端联调？</strong></h3><p>每个接口开发完成在本地使用 HttpClient 工具进行测试。</p><p>一个模块的接口开发完成后会和前端进行前后端联调。</p><p>什么是前后端联调？</p><p>前期接口定义好，前后端的工程师就开始并行开发了，前端开发人员在展示数据时会使用 mock 数据即假数据或叫虚拟数据进行开发，当前后端代码完成后，通常以模块为单位前后端工程开始进行接口联调，前端工程师将 mock 数据删除改为请求后端接口获取，前端代码请求后端服务测试接口是否正常，这个过程是前后端联调。</p><p>当前后端联调出现问题需要根据测试环境下接口的请求及响应数据内容去判断是否符合接口文档的要求。查出是前端或后端的问题由具体的工程师负责修改，修改后再次回归测试。</p><h3 id="_2-15-如何解决接口跨域问题" tabindex="-1"><a class="header-anchor" href="#_2-15-如何解决接口跨域问题" aria-hidden="true">#</a> <strong>2.15 如何解决接口跨域问题?</strong></h3><p>什么是跨域问题？</p><p>当浏览器通过 Ajax 调用服务端接口出现 No &#39;Access-Control-Allow-Origin&#39; header..的信息时说明浏览器在调用接口时出现了跨域问题。</p><p>跨域是基于浏览器的同源策略，去判断是否跨域请求，同源策略是浏览器的一种安全机制，从一个地址请求另一个地址，如果协议、主机、端口三者相同则不是跨域，否则就是跨域请求。</p><p>比如下边的跨域例子：</p>',197),un={href:"http://localhost:8601",target:"_blank",rel:"noopener noreferrer"},dn={href:"http://localhost:8602",target:"_blank",rel:"noopener noreferrer"},gn={href:"http://192.168.101.10:8601",target:"_blank",rel:"noopener noreferrer"},hn={href:"http://192.168.101.11:8601",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://192.168.101.10:8601",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://192.168.101.11:8601",target:"_blank",rel:"noopener noreferrer"},_n=o('<p>解决跨域问题的方法如下：</p><p>1、JSONP</p><p>通过 script 标签的 src 属性进行跨域请求，如果服务端要响应内容则首先读取请求参数 callback 的值，callback 是一个回调函数的名称，服务端读取 callback 的值后将响应内容通过调用 callback 函数的方式告诉请求方。如下图：</p><p><img src="'+B+'" alt="image-20230620152308093"></p><p>2、添加响应头</p><p>服务端定义过滤器，在响应头添加 Access-Control-Allow-Origin：*</p><p>3、通过 nginx 代理跨域</p><p>由于服务端之间没有跨域，浏览器通过 nginx 去访问跨域地址。</p><p>下边是一个示例说明：</p><p><img src="'+S+'" alt="image-20230620152317478"></p>',10),vn={href:"http://192.168.101.10:8601",target:"_blank",rel:"noopener noreferrer"},bn={href:"http://192.168.101.11:8601",target:"_blank",rel:"noopener noreferrer"},yn={href:"http://www.baidu.com:8601",target:"_blank",rel:"noopener noreferrer"},fn={href:"http://192.168.101.11:8601/api",target:"_blank",rel:"noopener noreferrer"},qn={href:"http://192.168.101.11:8601/api",target:"_blank",rel:"noopener noreferrer"},xn={href:"http://www.baidu.com:8601",target:"_blank",rel:"noopener noreferrer"},Mn=a("p",null,"这样就实现了跨域访问。",-1),wn={href:"http://192.168.101.11:8601/api",target:"_blank",rel:"noopener noreferrer"},Bn={href:"http://www.baidu.com:8601",target:"_blank",rel:"noopener noreferrer"},Sn=o('<h3 id="_2-16-微服务之间接口如何调用" tabindex="-1"><a class="header-anchor" href="#_2-16-微服务之间接口如何调用" aria-hidden="true">#</a> <strong>2.16 微服务之间接口如何调用？</strong></h3><p>微服务之间使用 Feign 进行远程调用，每个微服务都将自己注册到了服务注册中心 nacos 中，微服务在远程调用时会从服务注册中心找到目标服务的地址进行远程调用。</p><p>当目标服务异常在远程调用时发生熔断，此时调用方要定义降级方法保证请求快速响应。</p><p>项目中使用 FeignClient 的 fallbackFactory 编写降级方法，使用 fallbackFactory 的好处可以获取发生熔断的异常信息。</p><h3 id="_2-17-什么是熔断降级" tabindex="-1"><a class="header-anchor" href="#_2-17-什么是熔断降级" aria-hidden="true">#</a> <strong>2.17 什么是熔断降级？</strong></h3><p>熔断：</p><p>当下游服务异常而断开与上游服务的交互，它就相当于保险丝，下游服务异常触发了熔断，从而保证上游服务不受影响。</p><p><img src="'+C+'" alt="image-20230620152324313"></p><p>降级：</p><p>当下游服务异常触发熔断后，上游服务就不再去调用异常的微服务而是执行了降级处理逻辑，这个降级处理逻辑可以是本地一个单独的方法。</p><p><img src="'+j+`" alt="image-20230620152329661"></p><p>两者都是为了保护系统，熔断是当下游服务异常时一种保护系统的手段，降级是熔断后上游服务处理熔断的方法。</p><p>项目中使用 FeignClient 的 fallbackFactory 编写降级方法，使用 fallbackFactory 的好处可以获取发生熔断的异常信息。</p><p>如下代码示例：</p><p>定义 FeignClient 接口时指定 fallbackFactory 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;media-api&quot;</span><span class="token punctuation">,</span>fallbackFactory <span class="token operator">=</span> <span class="token class-name">MediaServiceClientFallbackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定义 fallbackFactory ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediaServiceClientFallbackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaServiceClient</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MediaServiceClient</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MediaServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> upload<span class="token punctuation">,</span> <span class="token class-name">String</span> folder<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程调用媒资管理服务熔断异常：{}&quot;</span><span class="token punctuation">,</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-18-如何解决微服务雪崩" tabindex="-1"><a class="header-anchor" href="#_2-18-如何解决微服务雪崩" aria-hidden="true">#</a> <strong>2.18 如何解决微服务雪崩?</strong></h3><p>什么是雪崩效应？</p><p><img src="`+O+'" alt="image-20230620152359610"></p><p>微服务的雪崩效应表现在服务与服务之间调用，当其中一个服务无法提供服务可能导致其它服务也死掉，比如：服务 B 调用服务 A，由于 A 服务异常导致 B 服务响应缓慢，最后 B、C 等服务都不可用，像这样由一个服务所引起的一连串的多个服务无法提供服务即是微服务的雪崩效应。</p><p>如何解决微服务雪崩效应？</p><p>发生服务等待的原因可能是 Feign 的请求超时过长，也可能是 Tomcat 的线程用完，解决前者只要配置 Feign 的连接超时时长小一些即可，解决后者则需要线程隔离，给高并发的方法设置自己的专属线程池，这样当高并发到来其它的接口不受高并发方法的影响。</p><p>另外在还可以从以下方面去预防微服务雪崩：</p><p>1、熔断</p><p>当目标服务无法请求可以通过熔断将链路断开。</p><p>使用 histrix 框架实现。</p><p>2、降级</p><p>当熔断发生走降级方法可以返回预先设置的数据。</p><p>使用 histrix 框架实现。</p><p>3、限流</p><p>对于高并发请求的接口要进行限流，避免无限制的请求压力全部到达系统。</p><p>限流的方法可以用 nginx 实现，也可以用 sentinel 等中间件。</p><h2 id="_3-业务流程与技术方案" tabindex="-1"><a class="header-anchor" href="#_3-业务流程与技术方案" aria-hidden="true">#</a> <strong>3 业务流程与技术方案</strong></h2><h3 id="_3-1-内容管理模块" tabindex="-1"><a class="header-anchor" href="#_3-1-内容管理模块" aria-hidden="true">#</a> <strong>3.1 内容管理模块</strong></h3><h4 id="_3-1-1-整体业务流程" tabindex="-1"><a class="header-anchor" href="#_3-1-1-整体业务流程" aria-hidden="true">#</a> <strong>3.1.1 整体业务流程</strong></h4><p>内容管理由教学机构人员和平台的运营人员共同完成。</p><p>教学机构人员的业务流程如下：</p><p>1、登录教学机构。</p><p>2、维护课程信息，添加一门课程需要编辑课程的基本信息、上传课程图片、课程营销信息、课程计划、上传课程视频、课程师资信息等内容。</p><p>3、课程信息编辑完成，通过课程预览确认无误后提交课程审核。</p><p>4、待运营人员课程审核通过后方可进行课程发布。</p><p>运营人员的业务流程如下：</p><p>1、查询待审核的课程信息。</p><p>2、审核课程信息。</p><p>3、提交审核结果。</p><p>课程从添加到发布的整体流程如下：</p><p><img src="'+A+'" alt="image-20230620152408576"></p><h4 id="_3-1-2-流程控制方案" tabindex="-1"><a class="header-anchor" href="#_3-1-2-流程控制方案" aria-hidden="true">#</a> <strong>3.1.2 流程控制方案</strong></h4><p>如何控制课程审核通过才可以发布课程呢？</p><p>在课程基本表 course_base 表设置课程审核状态字段，包括：未提交、已提交(未审核)、审核通过、审核不通过。</p><p>下边是课程状态的转化关系：</p><p><img src="'+F+'" alt="image-20230620152415478"></p><p>说明如下：</p><p>1、一门课程新增后它的审核状为”未提交“，发布状态为”未发布“。</p><p>2、课程信息编辑完成，教学机构人员执行”提交审核“操作。此时课程的审核状态为”已提交“。</p><p>3、当课程状态为已提交时运营平台人员对课程进行审核。</p><p>4、运营平台人员审核课程，结果有两个：审核通过、审核不通过。</p><p>5、课程审核过后不管状态是通过还是不通过，教学机构可以再次修改课程并提交审核，此时课程状态为”已提交“。此时运营平台人员再次审核课程。</p><p>6、课程审核通过，教学机构人员可以发布课程，发布成功后课程的发布状态为”已发布“。</p><p>7、课程发布后通过”下架“操作可以更改课程发布状态为”下架“</p><p>8、课程下架后通过”上架“操作可以再次发布课程，上架后课程发布状态为“发布”。</p><h4 id="_3-1-3-课程审核流程" tabindex="-1"><a class="header-anchor" href="#_3-1-3-课程审核流程" aria-hidden="true">#</a> <strong>3.1.3 课程审核流程</strong></h4><p>教学机构提交课程审核后，平台运营人员登录运营平台查询待审核的记录。</p><p><img src="'+E+'" alt="image-20230620152421085"></p><p>具体审核的过程与课程预览的过程类似，运营人员查看课程信息、课程视频等内容。</p><p>如果存在问题则审核不通过，并附上审核不通过的原因供教学机构人员查看。</p><p>如果课程内容没有违规信息且课程内容全面则审核通过。</p><p>课程审核通过后教学机构发布课程成功。</p><h4 id="_3-1-4-课程发布分布式事务方案" tabindex="-1"><a class="header-anchor" href="#_3-1-4-课程发布分布式事务方案" aria-hidden="true">#</a> <strong>3.1.4 课程发布分布式事务方案</strong></h4><p>课程发布操作后，先更新数据库中的课程发布状态，更新后向 redis、elasticsearch、MinIO 写课程信息，这里存在分布式事务，只要在一定时间内最终向 redis、elasticsearch、MinIO 写数据成功即可，所以课程发布满足 AP 即可，保证可用性实现最终数据一致性。</p><p>分布式事务控制的方案采用本地消息表加任务调度的方案，下图是具体的技术方案：</p><p><img src="'+N+'" alt="image-20230620152500582"></p><p>1、在内容管理服务的数据库中添加一个消息表，消息表和课程发布表在同一个数据库。</p><p>2、点击课程发布通过本地事务向课程发布表写入课程发布信息，同时向消息表写课程发布的消息。两条记录保证同时存在或同时不存在。</p><p>3、启动任务调度系统定时调度内容管理服务去定时扫描消息表的记录。</p><p>4、当扫描到课程发布的消息时即开始完成向 redis、elasticsearch、MinIO 同步数据的操作。</p><p>5、同步数据的任务完成后删除消息表记录。</p><p>下图是课程发布操作的流程：</p><p><img src="'+T+'" alt="image-20230620152505729"></p><p>1、执行发布操作，内容管理服务存储课程发布表的同时向消息表添加一条“课程发布任务”。这里使用本地事务保证课程发布信息保存成功，同时消息表也保存成功。</p><p>2、任务调度服务定时调度内容管理服务扫描消息表，由于课程发布操作后向消息表插入一条课程发布任务，此时扫描到一条任务。</p><p>3、拿到任务开始执行任务，分别向 redis、elasticsearch 及文件系统存储数据。</p><p>4、任务完成后删除消息表记录。</p><h4 id="_3-1-5-课程发布任务调度方案" tabindex="-1"><a class="header-anchor" href="#_3-1-5-课程发布任务调度方案" aria-hidden="true">#</a> <strong>3.1.5 课程发布任务调度方案</strong></h4><p>由 xxl-job 调度中心根据任务策略通过分片广播的模式下发任务到执行器，执行器扫描本地消息表中的未处理的消息(任务)，通过多线程执行任务，每个任务为一门课程的发布任务，执行完成删除本地消息表的记录。</p><p>xxl-job 的使用方法及如何保证任务不重复执行请参考 “ 第 2 节项目技术架构相关” 。</p><h4 id="_3-1-6-页面静态化方案" tabindex="-1"><a class="header-anchor" href="#_3-1-6-页面静态化方案" aria-hidden="true">#</a> <strong>3.1.6 页面静态化方案</strong></h4><p>课程信息页面的访问量较大，并且课程信息发布后在一段时间不会修改，这里使用 Freemarker 静态化技术将课程信息页面静态化，提前生成 html 页面并通过媒资管理模块的文件服务上传到文件系统，用户浏览课程信息页面通过分布文件系统浏览，提高了课程信息页面访问性能。</p><h4 id="_3-1-7-课程搜索方案" tabindex="-1"><a class="header-anchor" href="#_3-1-7-课程搜索方案" aria-hidden="true">#</a> <strong>3.1.7 课程搜索方案</strong></h4><p>本项目使用 Elasticsearch 对课程发布信息进行索引和搜索。</p><p>详细参考“ 第 2 节项目技术架构相关” 。</p><h3 id="_3-2-媒资管理模块" tabindex="-1"><a class="header-anchor" href="#_3-2-媒资管理模块" aria-hidden="true">#</a> <strong>3.2 媒资管理模块</strong></h3><h4 id="_3-1-1-断点续传流程" tabindex="-1"><a class="header-anchor" href="#_3-1-1-断点续传流程" aria-hidden="true">#</a> <strong>3.1.1 断点续传流程</strong></h4><p>下图是大文件上传的整体流程：</p><p><img src="'+J+'" alt="image-20230620152513177"></p><p>1、前端上传文件前请求媒资接口层检查文件是否存在，如果已经存在则不再上传。</p><p>2、如果文件在系统不存在则前端开始上传，首先对视频文件进行分块</p><p>3、前端分块进行上传，上传前首先检查分块是否上传，如已上传则不再上传，如果未上传则开始上传分块。</p><p>4、前端请求媒资管理接口层请求上传分块。</p><p>5、接口层请求服务层上传分块。</p><p>6、服务端将分块信息上传到 MinIO。</p><p>7、前端将分块上传完毕请求接口层合并分块。</p><p>8、接口层请求服务层合并分块。</p><p>9、服务层根据文件信息找到 MinIO 中的分块文件，下载到本地临时目录，将所有分块下载完毕后开始合并 。</p><p>10、合并完成将合并后的文件上传到 MinIO。</p><h4 id="_3-1-2-任务调度视频处理流程" tabindex="-1"><a class="header-anchor" href="#_3-1-2-任务调度视频处理流程" aria-hidden="true">#</a> <strong>3.1.2 任务调度视频处理流程</strong></h4><p>视频上传及处理的业务流程如下：</p><p><img src="'+I+'" alt="image-20230620152519357"></p><p>上传视频成功向视频处理待处理表添加记录。</p><p>视频处理的详细流程如下：</p><p><img src="'+P+'" alt="image-20230620152524539"></p><p>1、任务调度中心广播作业分片。</p><p>2、执行器收到广播作业分片，从数据库读取待处理任务。</p><p>3、执行器根据任务内容从 MinIO 下载要处理的文件。</p><p>4、执行器启动多线程去处理任务。</p><p>5、任务处理完成，上传处理后的视频到 MinIO。</p><p>6、将更新任务处理结果，如果视频处理完成除了更新任务处理结果以外还要将文件的访问地址更新至任务处理表及文件表中，最后将任务完成记录写入历史表。</p><h4 id="_3-1-3-文件服务访问方案" tabindex="-1"><a class="header-anchor" href="#_3-1-3-文件服务访问方案" aria-hidden="true">#</a> <strong>3.1.3 文件服务访问方案</strong></h4><p>在线插放课程视频，课程图片、视频这些都在 MinIO 文件系统存储，统一由 Nginx 代理，通过文件服务域名统一访问。如下图：</p><p><img src="'+R+`" alt="image-20230620152530659"></p><p>在 nginx 配置文件服务的二级域名</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>   server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span>;
        server_name  file.xuecheng-plus.com;
        ....

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-认证授权模块" tabindex="-1"><a class="header-anchor" href="#_3-3-认证授权模块" aria-hidden="true">#</a> <strong>3.3 认证授权模块</strong></h3><h4 id="_3-3-1-认证流程" tabindex="-1"><a class="header-anchor" href="#_3-3-1-认证流程" aria-hidden="true">#</a> <strong>3.3.1 认证流程</strong></h4><p>下图是本项目的认证流程：</p><p><img src="`+X+'" alt="image-20230620152549209"></p><p>1、提供统一认证入口。</p><p>2、前端请求认证，认证通过颁发 jwt 令牌返给前端</p><p>3、前端携带 jwt 令牌通过网关访问微服务。</p><p>4、网关负责校验 jwt 令牌的合法性，微服务负责进行授权。</p><h4 id="_3-3-2-网关统一鉴权做什么" tabindex="-1"><a class="header-anchor" href="#_3-3-2-网关统一鉴权做什么" aria-hidden="true">#</a> <strong>3.3.2 网关统一鉴权做什么?</strong></h4><p>所有访问微服务的请求都要经过网关，在网关进行用户身份的认证可以将很多非法的请求拦截到微服务以外，这叫做网关鉴权。</p><p>下边需要明确网关鉴权的职责：</p><p>1、网站白名单维护</p><p>针对不用认证的 URL 全部放行。</p><p>2、校验 jwt 的合法性。</p><p>除了白名单剩下的就是需要认证的请求，网关需要验证 jwt 的合法性，jwt 合法则说明用户身份合法，否则说明身份不合法则拒绝继续访问。</p><p>3、网关不负责授权，授权在各个微服务进行，因为微服务最清楚用户有哪些权限访问哪些接口。</p><h4 id="_3-3-3-什么是-oauth2" tabindex="-1"><a class="header-anchor" href="#_3-3-3-什么是-oauth2" aria-hidden="true">#</a> <strong>3.3.3 什么是 OAuth2</strong></h4><p>OAUTH 协议为用户资源的授权提供了一个安全的、开放而又简易的标准，Oauth 协议目前发展到 2.0 版本，1.0 版本过于复杂，2.0 版本已得到广泛应用，通常一些大平台如微信、支付宝都提供 OAuth2 协议的认证授权接口。</p><p>理解 OAuth2 协议可以通过一个例子，这里以微信扫码登录黑马网站为例说明：</p><p><img src="'+L+'" alt="image-20230620152558521"></p><p>Oauth2.0 认证流程如下：</p>',145),Cn={href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},jn=o('<p><img src="'+H+'" alt="image-20230620152602598"></p><p>Oauth2 包括以下角色：</p><p>1、客户端</p><p>本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：手机客户端、浏览器等。</p><p>上边示例中黑马网站即为客户端，它需要通过浏览器打开。</p><p>2、资源拥有者</p><p>通常为用户，也可以是应用程序，即该资源的拥有者。</p><p>A 表示 客户端请求资源拥有者授权。</p><p>B 表示 资源拥有者授权客户端即黑马网站访问自己的用户信息。</p><p>3、授权服务器（也称认证服务器）</p><p>认证服务器对资源拥有者进行认证，还会对客户端进行认证并颁发令牌。</p><p>C 客户端即黑马网站携带授权码请求认证。</p><p>D 认证通过颁发令牌。</p><p>4、资源服务器</p><p>存储资源的服务器。</p><p>E 表示客户端即黑马网站携带令牌请求资源服务器获取资源。</p><p>F 表示资源服务器校验令牌通过后提供受保护资源。</p><h4 id="_3-3-2-微信扫码流程" tabindex="-1"><a class="header-anchor" href="#_3-3-2-微信扫码流程" aria-hidden="true">#</a> <strong>3.3.2 微信扫码流程</strong></h4><p>根据 OAuth2 协议授权码流程，结合本项目自身特点，分析接入微信扫码登录的流程如下：</p><p><img src="'+W+'" alt="image-20230620152611532"></p><p>本项目认证服务需要做哪些事？</p><p>1、需要定义接口接收微信下发的授权码。</p><p>2、收到授权码调用微信接口申请令牌。</p><p>3、申请到令牌调用微信获取用户信息</p><p>4、获取用户信息成功将其写入本项目用户中心数据库。</p><p>5、最后重定向到浏览器自动登录。</p><h4 id="_3-3-3-授权相关的数据模型" tabindex="-1"><a class="header-anchor" href="#_3-3-3-授权相关的数据模型" aria-hidden="true">#</a> <strong>3.3.3 授权相关的数据模型</strong></h4><p>本项目授权相关的数据表如下：</p><p><img src="'+z+`" alt="image-20230620152617661"></p><p>说明如下：</p><p>xc_user：用户表，存储了系统用户信息，用户类型包括：学生、老师、管理员等</p><p>xc_role：角色表，存储了系统的角色信息，学生、老师、教学管理员、系统管理员等。</p><p>xc_user_role：用户角色表，一个用户可拥有多个角色，一个角色可被多个用户所拥有</p><p>xc_menu:模块表，记录了菜单及菜单下的权限</p><p>xc_permission:角色权限表，一个角色可拥有多个权限，一个权限可被多个角色所拥有</p><p>如何查询用户的权限？</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> xc_menu <span class="token keyword">WHERE</span> id <span class="token operator">IN</span><span class="token punctuation">(</span>
<span class="token keyword">SELECT</span> menu_id <span class="token keyword">FROM</span> xc_permission <span class="token keyword">WHERE</span> role_id <span class="token operator">IN</span><span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> role_id <span class="token keyword">FROM</span> xc_user_role <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token string">&#39;49&#39;</span>
<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-4-验证码校验流程" tabindex="-1"><a class="header-anchor" href="#_3-3-4-验证码校验流程" aria-hidden="true">#</a> <strong>3.3.4 验证码校验流程</strong></h4><p>验证码服务对外提供的接口有：</p><p>1、生成验证码</p><p>2、校验验证码。</p><p>验证码服务如何生成并校验验证码？</p><p>拿图片验证码举例：</p><p>1、先生成一个指定位数的验证码，根据需要可能是数字、数字字母组合或文字。</p><p>2、根据生成的验证码生成一个图片并返回给页面</p><p>3、给生成的验证码分配一个 key，将 key 和验证码一同存入缓存。这个 key 和图片一同返回给页面。</p><p>4、用户输入验证码，连同 key 一同提交至认证服务。</p><p>5、认证服务拿 key 和输入的验证码请求验证码服务去校验</p><p>6、验证码服务根据 key 从缓存取出正确的验证码和用户输入的验证码进行比对，如果相同则校验通过，否则不通过。</p><p><img src="`+D+'" alt="image-20230620152640041"></p><h4 id="_3-3-5-什么是-jwt-令牌" tabindex="-1"><a class="header-anchor" href="#_3-3-5-什么是-jwt-令牌" aria-hidden="true">#</a> <strong>3.3.5 什么是 JWT 令牌</strong></h4><p>JSON Web Token（JWT）是一种使用 JSON 格式传递数据的网络令牌技术，它是一个开放的行业标准（RFC 7519），用于在通信双方传递 json 对象，传递的信息经过数字签名可以被验证和信任，它可以使用 HMAC 算法或使用 RSA 的公钥/私钥对来签名，防止内容篡改。</p><p>JWT 令牌的优点：</p><p>1、jwt 基于 json，非常方便解析。</p><p>2、可以在令牌中自定义丰富的内容，易扩展。</p><p>3、通过非对称加密算法及数字签名技术，JWT 防止篡改，安全性高。</p><p>4、资源服务使用 JWT 可不依赖认证服务即可完成授权。</p><p>缺点：</p><p>１、JWT 令牌较长，占存储空间比较大。</p><p>JWT 令牌由三部分组成，每部分中间使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz</p><ol><li>Header</li></ol><p>头部包括令牌的类型（即 JWT）及使用的哈希算法（如 HMAC SHA256 或 RSA）</p><ol><li>Payload</li></ol><p>第二部分是负载，内容也是一个 json 对象，它是存放有效信息的地方，它可以存放 jwt 提供的现成字段，比如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。</p><ol><li>Signature</li></ol><p>第三部分是签名，此部分用于防止 jwt 内容被篡改。</p><p>这个部分使用 base64url 将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用 header 中声明签名算法进行签名。</p><h4 id="_3-3-6-jwt-令牌可以防止篡改吗" tabindex="-1"><a class="header-anchor" href="#_3-3-6-jwt-令牌可以防止篡改吗" aria-hidden="true">#</a> <strong>3.3.6 JWT 令牌可以防止篡改吗？</strong></h4><p>JWT 可以防止篡改。</p><p>第三部分使用签名算法对第一部分和第二部分的内容进行签名，常用的签名算法是 HS256，常见的还有 md5,sha 等，签名算法需要使用密钥进行签名，密钥不对外公开，并且签名是不可逆的，如果第三方更改了内容那么服务器验证签名就会失败，要想保证验证签名正确必须保证内容、密钥与签名前一致。</p><p><img src="'+U+'" alt="image-20230620152649798"></p><p>从上图可以看出认证服务和资源服务使用相同的密钥，这叫对称加密，对称加密效率高，如果一旦密钥泄露可以伪造 jwt 令牌。</p><p>JWT 还可以使用非对称加密，认证服务自己保留私钥，将公钥下发给受信任的客户端、资源服务，公钥和私钥是配对的，成对的公钥和私钥才可以正常加密和解密，非对称加密效率低但相比对称加密非对称加密更安全一些。</p><h4 id="_3-3-7-spring-security-的工作原理是什么" tabindex="-1"><a class="header-anchor" href="#_3-3-7-spring-security-的工作原理是什么" aria-hidden="true">#</a> <strong>3.3.7 Spring Security 的工作原理是什么?</strong></h4><p>Spring Security 所解决的问题就是<strong>安全访问控制</strong>，初始化 Spring Security 时，会创建一个名为 SpringSecurityFilterChain 的 Servlet 过滤器， 它是一个过滤器链，账号密码登录方式使用 UsernamePasswordAuthenticationFilter 过滤器。</p><p>Spring Security 的执行流程如下：</p><p><img src="'+G+'" alt="image-20230620152656133"></p><ol><li>用户提交用户名、密码被 SecurityFilterChain 中的 UsernamePasswordAuthenticationFilter 过滤器获取到，封装为请求 Authentication，通常情况下是 UsernamePasswordAuthenticationToken 这个实现类。</li></ol><p> </p><ol><li>然后过滤器将 Authentication 提交至认证管理器（AuthenticationManager）进行认证</li></ol><p> </p><ol><li>认证成功后，AuthenticationManager 身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）Authentication 实例。</li></ol><p> </p><ol><li>SecurityContextHolder 安全上下文容器将第 3 步填充了信息的 Authentication，通过 SecurityContextHolder.getContext().setAuthentication(…)方法，设置到其中。</li></ol><p> </p><ol><li>可以看出 AuthenticationManager 接口（认证管理器）是认证相关的核心接口，也是发起认证的出发点，它的实现类为 ProviderManager。而 Spring Security 支持多种认证方式，因此 ProviderManager 维护着一个 List&lt;AuthenticationProvider&gt;列表，存放多种认证方式，最终实际的认证工作是由 AuthenticationProvider 完成的。咱们知道 web 表单的对应的 AuthenticationProvider 实现类为 DaoAuthenticationProvider，它的内部又维护着一个 UserDetailsService 负责 UserDetails 的获取。最终 AuthenticationProvider 将 UserDetails 填充至 Authentication。</li></ol><h3 id="_3-4-选课学习" tabindex="-1"><a class="header-anchor" href="#_3-4-选课学习" aria-hidden="true">#</a> <strong>3.4 选课学习</strong></h3><h4 id="_3-4-1-选课流程" tabindex="-1"><a class="header-anchor" href="#_3-4-1-选课流程" aria-hidden="true">#</a> <strong>3.4.1 选课流程</strong></h4><p>选课是将课程加入我的课程表的过程。</p><p>对免费课程选课后可直接加入我的课程表，对收费课程选课后需要下单支付成功系统自动加入我的课程表。</p><p>流程如下：</p><p><img src="'+V+'" alt="image-20230620152704688"></p><h4 id="_3-4-2-在线学习流程" tabindex="-1"><a class="header-anchor" href="#_3-4-2-在线学习流程" aria-hidden="true">#</a> <strong>3.4.2 在线学习流程</strong></h4><p>课成功用户使可以在线学习，对于免费课程无需选课即可在线学习。</p><p>流程如下：</p><p><img src="'+Q+'" alt="image-20230620152708462"></p><h4 id="_3-4-3-免费课程续期流程" tabindex="-1"><a class="header-anchor" href="#_3-4-3-免费课程续期流程" aria-hidden="true">#</a> <strong>3.4.3 免费课程续期流程</strong></h4><p>免费课程加入我的课程表默认为 1 年有效期，到期用户可申请续期，流程如下：</p><p><img src="'+Y+'" alt="image-20230620152713655"></p><h3 id="_3-5-订单支付" tabindex="-1"><a class="header-anchor" href="#_3-5-订单支付" aria-hidden="true">#</a> <strong>3.5 订单支付</strong></h3><h4 id="_3-5-1-支付流程" tabindex="-1"><a class="header-anchor" href="#_3-5-1-支付流程" aria-hidden="true">#</a> <strong>3.5.1 支付流程</strong></h4><p>当用户点击“微信支付”或支付宝支付时执行流程如下：</p><p><img src="'+Z+'" alt="image-20230620152719169"></p><p>1、请求学习中心服务创建选课</p><p>2、请求订单服务创建商品订单、生成支付二维码。</p><p>3、用户扫码请求订单支付服务，订单支付服务请求第三方支付平台生成支付订单。</p><p>4、前端唤起支付客户端，用户输入密码完成支付。</p><p>5、第三方支付平台支付完成发起支付通知。</p><p>6、订单支付服务接收支付通知结果。</p><p>7、用户在前端查询支付结果，请求订单支付服务查询支付结果，如果订单支付服务还没有收到支付结果则请求学习中心查询支付结果。</p><p>8、订单支付服务向学习中心服务通知支付结果。</p><p>9、学习中心服务收到支付结果，如果支付成功则更新选课记录，并添加到我的课程表。</p><h4 id="_3-5-2-生成二维码执行流程" tabindex="-1"><a class="header-anchor" href="#_3-5-2-生成二维码执行流程" aria-hidden="true">#</a> <strong>3.5.2 生成二维码执行流程</strong></h4><p>生成二维码执行流程如下：</p><p><img src="'+K+'" alt="image-20230620152726345"></p><p>执行流程：</p><p>1、前端调用学习中心服务的添加选课接口。</p><p>2、添加选课成功请求订单服务生成支付二维码接口。</p><p>3、生成二维码接口：创建商品订单、生成支付交易记录、生成二维码。</p><p>4、将二维码返回到前端，用户扫码。</p><h4 id="_3-5-3-用户扫码支付流程" tabindex="-1"><a class="header-anchor" href="#_3-5-3-用户扫码支付流程" aria-hidden="true">#</a> <strong>3.5.3 用户扫码支付流程</strong></h4><p>用户扫码支付流程如下：</p><p><img src="'+$+'" alt="image-20230620152731780"></p><h4 id="_3-5-4-支付结果通知流程" tabindex="-1"><a class="header-anchor" href="#_3-5-4-支付结果通知流程" aria-hidden="true">#</a> <strong>3.5.4 支付结果通知流程</strong></h4><p>订单服务作为通用服务在订单支付成功后需要将支付结果通知给与订单服务对接的其它微服务。</p><p>为了保证通知过程的简便还要保证消息全部到达消费服务，采用发布订阅的方式通知支付结果。</p><p><img src="'+nn+'" alt="image-20230620152736444"></p><p>学习中心服务：对收费课程选课需要支付，与订单服务对接完成支付。</p><p>学习资源服务：对收费的学习资料需要购买后下载，与订单服务对接完成支付。</p><p>订单服务完成支付后将支付结果发给每一个与订单服务对接的微服务，订单服务将消息发给交换机，由交换机广播消息，每个订阅消息的微服务都可以接收到支付结果.</p><p>微服务收到支付结果根据订单的类型去更新自己的业务数据。</p><h2 id="_4-研发流程相关" tabindex="-1"><a class="header-anchor" href="#_4-研发流程相关" aria-hidden="true">#</a> <strong>4 研发流程相关</strong></h2><h3 id="_4-1-项目的标准过程" tabindex="-1"><a class="header-anchor" href="#_4-1-项目的标准过程" aria-hidden="true">#</a> <strong>4.1 项目的标准过程</strong></h3><p>启动阶段<br> 项目的可行性分析、立项、招投标、合同签署。<br> 计划阶段<br> 范围定义、进度安排、资源计划、成本估计、质量保证计划、风险计划、实施计划等。<br> 实施及控制阶段<br> 项目实施、进度控制、费用控制、质量控制、变更控制等。<br> 结束阶段<br> 范围确认、质量验收、费用结算与审计、项目资料验收、项目交接与清算、项目审计与评估、项目总结等。</p><h3 id="_4-2-缺陷修复流程" tabindex="-1"><a class="header-anchor" href="#_4-2-缺陷修复流程" aria-hidden="true">#</a> <strong>4.2 缺陷修复流程</strong></h3><p>开发结束由测试人员对软件进行测试，通常使用项目管理软件管理缺陷，流程如下：</p><p><img src="'+an+'" alt="image-20230620152743945"></p><h3 id="_4-3-运维流程" tabindex="-1"><a class="header-anchor" href="#_4-3-运维流程" aria-hidden="true">#</a> <strong>4.3 运维流程</strong></h3><p><img src="'+sn+'" alt="image-20230620152749587"></p><h3 id="_4-4-持续集成" tabindex="-1"><a class="header-anchor" href="#_4-4-持续集成" aria-hidden="true">#</a> <strong>4.4 持续集成</strong></h3><h4 id="_4-4-1-什么是持续集成" tabindex="-1"><a class="header-anchor" href="#_4-4-1-什么是持续集成" aria-hidden="true">#</a> <strong>4.4.1 什么是持续集成？</strong></h4><p>传统的软件开发流程如下：</p><p>1、项目经理分配模块给开发人员</p><p>2、每个模块的开发人员并行开发，并进行单元测试</p><p>3、开发完毕，将代码集成部署到测试服务器，测试人员进行测试。</p><p>4、测试人员发现 bug，提交 bug、开发人员修改 bug</p><p>5、bug 修改完毕再次集成、测试。</p><p>问题描述：</p><p>1、模块之间依赖关系复杂，在集成时发现大量 bug</p><p>2、测试人员等待测试时间过长</p><p>3、软件交付无法保障</p><p>解决上述问题的思考：</p><p>1、能否把集成测试时间提前？</p><p>2、能否使用自动化工具代替人工集成部署的过程？</p><p>查阅百度百科</p>',155),On={href:"https://baike.baidu.com/item/%E7%BC%96%E8%AF%91/1258343?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},An=o('<p>持续集成的好处：</p><p>1、自动化集成部署，提高了集成效率。</p><p>2、更快的修复问题。</p><p>3、更快的进行交付。</p><p>4、提高了产品质量。</p><h4 id="_4-4-2-如何做持续集成" tabindex="-1"><a class="header-anchor" href="#_4-4-2-如何做持续集成" aria-hidden="true">#</a> <strong>4.4.2 如何做持续集成</strong></h4><p>下图说明了持续集成的流程：</p><p><img src="'+pn+'" alt="image-20230620152758141"></p><p>软件序列图：</p><p><img src="'+en+'" alt="image-20230620152802468"></p><p>持续集成的工具有很多，上图中使用的 Jenkins 是一个优秀的持续集成工具，请自行查阅资料学习。</p><p>Jenkins 是一个领先的开源自动化服务器，可用于自动化构建，测试，部署软件等相关任务。</p>',12),Fn={href:"https://jenkins.io",target:"_blank",rel:"noopener noreferrer"},En=a("p",null,[a("img",{src:tn,alt:"image-20230620152805764"})],-1);function Nn(Tn,Jn){const p=i("router-link"),t=i("ExternalLinkIcon");return l(),c("div",null,[rn,a("nav",ln,[a("ul",null,[a("li",null,[s(p,{to:"#_2-项目技术架构相关"},{default:e(()=>[n("2 项目技术架构相关")]),_:1}),a("ul",null,[a("li",null,[s(p,{to:"#_2-1-项目采用什么技术架构"},{default:e(()=>[n("2.1 项目采用什么技术架构?")]),_:1})]),a("li",null,[s(p,{to:"#_2-2-微服务都用了哪些技术"},{default:e(()=>[n("2.2 微服务都用了哪些技术?")]),_:1})]),a("li",null,[s(p,{to:"#_2-3-微服务的-maven-工程结构是什么样"},{default:e(()=>[n("2.3 微服务的 maven 工程结构是什么样?")]),_:1})]),a("li",null,[s(p,{to:"#_2-4-nacos-有什么用-怎么用"},{default:e(()=>[n("2.4 Nacos 有什么用？怎么用？")]),_:1})]),a("li",null,[s(p,{to:"#_2-5-gateway-怎么用的"},{default:e(()=>[n("2.5 Gateway 怎么用的？")]),_:1})]),a("li",null,[s(p,{to:"#_2-6-redis-怎么用的"},{default:e(()=>[n("2.6 Redis 怎么用的？")]),_:1})]),a("li",null,[s(p,{to:"#_2-7-rabbitmq-怎么用的"},{default:e(()=>[n("2.7 RabbitMQ 怎么用的？")]),_:1})]),a("li",null,[s(p,{to:"#_2-8-elasticsearch-怎么用的"},{default:e(()=>[n("2.8 Elasticsearch 怎么用的？")]),_:1})]),a("li",null,[s(p,{to:"#_2-9-xxl-job-怎么用的"},{default:e(()=>[n("2.9 XXL-Job 怎么用的？")]),_:1})]),a("li",null,[s(p,{to:"#_2-10-如何保证任务不重复执行"},{default:e(()=>[n("2.10 如何保证任务不重复执行?")]),_:1})]),a("li",null,[s(p,{to:"#_2-11-如何定义一个接口"},{default:e(()=>[n("2.11 如何定义一个接口？")]),_:1})]),a("li",null,[s(p,{to:"#_2-12-如何进行接口开发"},{default:e(()=>[n("2.12 如何进行接口开发?")]),_:1})]),a("li",null,[s(p,{to:"#_2-13-接口异常如何处理"},{default:e(()=>[n("2.13 接口异常如何处理？")]),_:1})]),a("li",null,[s(p,{to:"#_2-14-如何进行接口测试和前后端联调"},{default:e(()=>[n("2.14 如何进行接口测试和前后端联调？")]),_:1})]),a("li",null,[s(p,{to:"#_2-15-如何解决接口跨域问题"},{default:e(()=>[n("2.15 如何解决接口跨域问题?")]),_:1})]),a("li",null,[s(p,{to:"#_2-16-微服务之间接口如何调用"},{default:e(()=>[n("2.16 微服务之间接口如何调用？")]),_:1})]),a("li",null,[s(p,{to:"#_2-17-什么是熔断降级"},{default:e(()=>[n("2.17 什么是熔断降级？")]),_:1})]),a("li",null,[s(p,{to:"#_2-18-如何解决微服务雪崩"},{default:e(()=>[n("2.18 如何解决微服务雪崩?")]),_:1})])])]),a("li",null,[s(p,{to:"#_3-业务流程与技术方案"},{default:e(()=>[n("3 业务流程与技术方案")]),_:1}),a("ul",null,[a("li",null,[s(p,{to:"#_3-1-内容管理模块"},{default:e(()=>[n("3.1 内容管理模块")]),_:1})]),a("li",null,[s(p,{to:"#_3-2-媒资管理模块"},{default:e(()=>[n("3.2 媒资管理模块")]),_:1})]),a("li",null,[s(p,{to:"#_3-3-认证授权模块"},{default:e(()=>[n("3.3 认证授权模块")]),_:1})]),a("li",null,[s(p,{to:"#_3-4-选课学习"},{default:e(()=>[n("3.4 选课学习")]),_:1})]),a("li",null,[s(p,{to:"#_3-5-订单支付"},{default:e(()=>[n("3.5 订单支付")]),_:1})])])]),a("li",null,[s(p,{to:"#_4-研发流程相关"},{default:e(()=>[n("4 研发流程相关")]),_:1}),a("ul",null,[a("li",null,[s(p,{to:"#_4-1-项目的标准过程"},{default:e(()=>[n("4.1 项目的标准过程")]),_:1})]),a("li",null,[s(p,{to:"#_4-2-缺陷修复流程"},{default:e(()=>[n("4.2 缺陷修复流程")]),_:1})]),a("li",null,[s(p,{to:"#_4-3-运维流程"},{default:e(()=>[n("4.3 运维流程")]),_:1})]),a("li",null,[s(p,{to:"#_4-4-持续集成"},{default:e(()=>[n("4.4 持续集成")]),_:1})])])])])]),cn,a("p",null,[n("从"),a("a",un,[n("http://localhost:8601"),s(t)]),n(" 到 "),a("a",dn,[n("http://localhost:8602"),s(t)]),n(" 由于端口不同，是跨域。")]),a("p",null,[n("从"),a("a",gn,[n("http://192.168.101.10:8601"),s(t)]),n(" 到 "),a("a",hn,[n("http://192.168.101.11:8601"),s(t)]),n(" 由于主机不同，是跨域。")]),a("p",null,[n("从"),a("a",kn,[n("http://192.168.101.10:8601"),s(t)]),n(" 到 "),a("a",mn,[n("https://192.168.101.11:8601"),s(t)]),n(" 由于协议不同，是跨域。")]),_n,a("p",null,[n("1）浏览器先访问"),a("a",vn,[n("http://192.168.101.10:8601"),s(t)]),n(" nginx 提供的地址，进入页面")]),a("p",null,[n("2）此页面要跨域访问"),a("a",bn,[n("http://192.168.101.11:8601"),s(t)]),n(" ，不能直接跨域访问"),a("a",yn,[n("http://www.baidu.com:8601"),s(t)]),n(" ，而是访问 nginx 的一个同源地址，比如："),a("a",fn,[n("http://192.168.101.11:8601/api"),s(t)]),n(" ，通过"),a("a",qn,[n("http://192.168.101.11:8601/api"),s(t)]),n(" 的代理去访问"),a("a",xn,[n("http://www.baidu.com:8601"),s(t)]),n("。")]),Mn,a("p",null,[n("浏览器到"),a("a",wn,[n("http://192.168.101.11:8601/api"),s(t)]),n(" 没有跨域")]),a("p",null,[n("nginx 到"),a("a",Bn,[n("http://www.baidu.com:8601"),s(t)]),n("通过服务端通信，没有跨域。")]),Sn,a("p",null,[n("引自 Oauth2.0 协议 rfc6749 "),a("a",Cn,[n("https://tools.ietf.org/html/rfc6749"),s(t)])]),jn,a("p",null,[n("持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括"),a("a",On,[n("编译"),s(t)]),n("，发布，自动化测试）来验证，从而尽早地发现集成错误。")]),An,a("p",null,[n("官网地址："),a("a",Fn,[n("https://jenkins.io"),s(t)])]),En])}const Pn=r(on,[["render",Nn],["__file","index.html.vue"]]);export{Pn as default};
