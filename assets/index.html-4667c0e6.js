import{_ as p,r as o,o as l,c,a as n,e,w as t,b as s,d as i}from"./app-a153c100.js";const d="/MyBlog/assets/1596078377803-8521453e.png",r="/MyBlog/assets/1596079997391-d6b28d01.png",u="/MyBlog/assets/1596089489736-734a185d.png",k="/MyBlog/assets/1596090904115-aec8abef.png",m="/MyBlog/assets/1596093789302-cd60f41e.png",v="/MyBlog/assets/1596094489993-c8c4053e.png",b="/MyBlog/assets/1596094769618-5e3c3bb2.png",y="/MyBlog/assets/1596104686639-3e4f6461.png",h="/MyBlog/assets/1596104342361-88979f55.png",w={},g=n("h1",{id:"_03-mysql-数据库-三",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_03-mysql-数据库-三","aria-hidden":"true"},"#"),s(" 03 - Mysql 数据库 (三) 💦")],-1),f={class:"table-of-contents"},_=i(`<h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h2><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>count()</td><td>统计数据行</td></tr><tr><td>sum()</td><td>对指定列求和</td></tr><tr><td>avg()</td><td>对指定列求平均值</td></tr><tr><td>max()</td><td>获取指定列最大值</td></tr><tr><td>min()</td><td>获取指定列最小值</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--查询表中一共有多少员工</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">--查询所有员工的总薪资</span>
<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">--查询所有员工的月薪平均值</span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">--查询工资最低的员工薪资</span>
<span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">--查询工资最高的员工薪资</span>
<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符函数" tabindex="-1"><a class="header-anchor" href="#字符函数" aria-hidden="true">#</a> 字符函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>concat (st2 [,... ])</td><td>连接多个字符串为一个字符串</td></tr><tr><td>length(s)</td><td>获取字符串的字节长度</td></tr><tr><td>lcase/ucase</td><td>字符串转小写/字符串转大写</td></tr><tr><td>ltrim(s)/rtrim(s)</td><td>去除字符串左边空格/右边空格</td></tr><tr><td>substr(s,pos,len)</td><td>将字符串 s 从 pos 开始截取 len 长</td></tr><tr><td>lpad/rpad</td><td>左填充/右填充</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 获取字符串使用的字符集</span>
<span class="token keyword">select</span> <span class="token keyword">charset</span><span class="token punctuation">(</span><span class="token string">&#39;helloworld&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 将多个字符串连接为一个字符串</span>
<span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;softeem&#39;</span><span class="token punctuation">)</span>
<span class="token comment">-- 应用</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> concat<span class="token punctuation">(</span>ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%阿%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 返回字符占据的字节数（中文字符占3字节(utf-8),英文字母占1个字节）</span>
<span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token string">&#39;软帝softeem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 将字母转小写（toLowerCase）</span>
<span class="token keyword">select</span> <span class="token function">LCASE</span><span class="token punctuation">(</span><span class="token string">&#39;HELLO&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 转大写</span>
<span class="token keyword">select</span> upper <span class="token punctuation">(</span><span class="token string">&#39;dsasa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 去除字符串空格</span>
<span class="token keyword">select</span> TRIM<span class="token punctuation">(</span><span class="token string">&#39; world &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 左填充(对指定的字符串检测，长度如果未到达目标长度，则使用指定占位符从左边开始填充)</span>
<span class="token keyword">select</span> LPAD<span class="token punctuation">(</span><span class="token string">&#39;softeem&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> LPAD<span class="token punctuation">(</span>ename<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> RPAD<span class="token punctuation">(</span>ename<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token keyword">use</span> mydb<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbemp<span class="token punctuation">;</span>
<span class="token comment">-- 字符串截取</span>
<span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">&#39;abdcsa&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数值函数" tabindex="-1"><a class="header-anchor" href="#数值函数" aria-hidden="true">#</a> 数值函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>abs(n)</td><td>取数值绝对值</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>ceiling(n)</td><td>向上取整</td></tr><tr><td>floor(n)</td><td>向下取整</td></tr><tr><td>format(n,len)</td><td>截取 len 位小数（四舍五入）</td></tr><tr><td>rand()</td><td>获取随机数(0-1)，取 0-1 之间随机的小数，无限接近于 0 且不会等于 0，无限接近于 1，且不会等于 1</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	数值函数
*/</span>
<span class="token comment">-- 绝对值</span>
<span class="token keyword">select</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 向上、向下取整</span>
<span class="token keyword">select</span> CEILING<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> FLOOR<span class="token punctuation">(</span><span class="token number">3.54</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 保留指定位小数点</span>
<span class="token keyword">select</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">---随机数</span>
<span class="token keyword">SELECT</span> <span class="token function">ROUND</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日期函数" tabindex="-1"><a class="header-anchor" href="#日期函数" aria-hidden="true">#</a> 日期函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>now()</td><td>获取当前时间</td></tr><tr><td>current_date()</td><td>获取当前日期</td></tr><tr><td>current_time()</td><td>获取当前时间（时分秒）</td></tr><tr><td>current_timestamp()</td><td>获取当前时间戳</td></tr><tr><td>date()</td><td>获取时间的日期部分</td></tr><tr><td>day()</td><td>获取日期中的天数部分</td></tr><tr><td>datediff(t1,t2)</td><td>获取两个日期之差（天数）</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
 时间日期函数
*/</span>
<span class="token comment">-- 获取当前的系统时间</span>
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 获取当前日期</span>
<span class="token keyword">select</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 获取当前时间</span>
<span class="token keyword">select</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 获取当前时间戳</span>

<span class="token keyword">select</span> <span class="token keyword">date</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 统计从出生到现在一共安全生活了多少天</span>
<span class="token keyword">select</span> DATEDIFF<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;1998-07-29&#39;</span><span class="token punctuation">)</span>

<span class="token comment">-- 获取日期中的day部分(天数)</span>
<span class="token keyword">select</span> <span class="token keyword">day</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">temp</span><span class="token punctuation">(</span>today <span class="token keyword">date</span><span class="token punctuation">,</span>msg <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">temp</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;nothing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">temp</span><span class="token punctuation">;</span>

<span class="token comment">-- 日报表中获取当天提交的日报信息</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> log<span class="token punctuation">(</span>
id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">time</span> <span class="token keyword">timestamp</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> log<span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token keyword">time</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;n天前收获很多！！！&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020-03-29 10:11:11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log <span class="token keyword">where</span> <span class="token keyword">date</span><span class="token punctuation">(</span><span class="token keyword">time</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">date</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询所有的在29号发布的日志</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log <span class="token keyword">where</span> <span class="token keyword">day</span><span class="token punctuation">(</span><span class="token keyword">time</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加密函" tabindex="-1"><a class="header-anchor" href="#加密函" aria-hidden="true">#</a> 加密函</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>md5(s)</td><td>对字符串使用 md5 算法加密</td></tr><tr><td>sha(s)</td><td>对字符串使用 sha 加密</td></tr><tr><td>password(s)</td><td>使用 sha1 对字符串加密</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 加密函数（非对称加密）</span>
<span class="token keyword">select</span> password<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> MD5<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> SHA<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

这三种加密方式都是不可逆，不能反推破解
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复制表与数据复制" tabindex="-1"><a class="header-anchor" href="#复制表与数据复制" aria-hidden="true">#</a> 复制表与数据复制</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 复制表（同时复制数据） 对关键表的数据进行备份</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> tbemp <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 复制表结构（只需要结构不要数据）</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> tbemp <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">-- 复制数据(蠕虫复制:一般用于表机构稳定性的测试)</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tbemp<span class="token punctuation">(</span>ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dno<span class="token punctuation">)</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dno <span class="token keyword">from</span> tbemp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p>​ 当表中有大量记录时，若要对表进行查询，第一种搜索信息方式是全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录，这样做会消耗大量数据库系统时间，并造成大量磁盘 I/O 操作；第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的 ROWID（相当于页码）快速找到表中对应的记录。</p><p>​ 索引提供指向存储在表的指定列中的数据值的指针，然后根据您指定的排序顺序对这些指针排序。数据库使用索引以找到特定值，然后顺指针找到包含该值的行。这样可以使对应于表的 SQL 语句执行得更快，可快速访问数据库表中的特定信息。</p><p>​ <strong>索引类似字典的目录，可通过索引快速查询到目标数据。</strong></p><h3 id="索引分类" tabindex="-1"><a class="header-anchor" href="#索引分类" aria-hidden="true">#</a> 索引分类</h3><p>1、普通索引：MySQL 中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点</p><p>2、唯一性索引：索引列中的值必须是唯一的，但是允许为空值</p><p>3、主键索引(聚簇索引)：即表中主键列</p><p>4、全文索引：全文索引，只有在 MyISAM 引擎上才能使用，只能在 CHAR,VARCHAR,TEXT 类型字段上使用全文索引。（mysql 数据库在 5.5 版本以前，使用的引擎是 MylSAM;在 5.5 以及以上的版本，mysql 的引擎使用的是 InnoDB）</p><p>5、组合索引： 在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。</p><h6 id="如果某个字段不是经常被作为查询条件进行使用时-那么该字段尽量就不要作为索引" tabindex="-1"><a class="header-anchor" href="#如果某个字段不是经常被作为查询条件进行使用时-那么该字段尽量就不要作为索引" aria-hidden="true">#</a> 如果某个字段不是经常被作为查询条件进行使用时，那么该字段尽量就不要作为索引</h6><p>因为添加字段索引，就是将该字段的索引添加在服务器内存当中，如果每张表的索引过多，会对整个服务器的运行产生巨大的影响</p><h3 id="索引创建语法" tabindex="-1"><a class="header-anchor" href="#索引创建语法" aria-hidden="true">#</a> 索引创建语法</h3><p><img src="`+d+`" alt="1596078377803"></p><h4 id="创建普通索引" tabindex="-1"><a class="header-anchor" href="#创建普通索引" aria-hidden="true">#</a> 创建普通索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> index_ename <span class="token keyword">on</span> tbemp<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建唯一索引" tabindex="-1"><a class="header-anchor" href="#创建唯一索引" aria-hidden="true">#</a> 创建唯一索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> index_username <span class="token keyword">on</span> tbuser<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>唯一索引要求被添加索引的列值必须唯一</strong></p></blockquote><h4 id="创建组合索引" tabindex="-1"><a class="header-anchor" href="#创建组合索引" aria-hidden="true">#</a> 创建组合索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> index_emp <span class="token keyword">on</span> tbemp<span class="token punctuation">(</span>ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>组合索引的使用一般在进行多条件查询时提升查询效率</strong></p></blockquote><p><img src="`+r+'" alt="1596079997391"></p><blockquote><p>注意事项：</p><p>任何一张数据库表都应该有一个主键列，默认数据系统对主键列增加了聚簇索引，因此针对主键列的查询速度比较快。</p><p>Mysql 中的索引实现基于 B+树（二叉树） 最左匹配原则</p></blockquote><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h2><p>​ 视图实际上就是一张虚拟的表，视图是针对基表的一部分字段的缩影，一般用于对一些字段比较多的表，通过视图可以简化表结构；另外针对一些涉及到多表的查询操作时，建立视图可以简化查询语句；</p><h3 id="创建语法" tabindex="-1"><a class="header-anchor" href="#创建语法" aria-hidden="true">#</a> 创建语法</h3><p><img src="'+u+`" alt="1596089489736"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建视图</span>
<span class="token keyword">create</span> <span class="token keyword">view</span> v$emp <span class="token keyword">as</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$emp<span class="token punctuation">;</span>
<span class="token keyword">update</span> v$emp <span class="token keyword">set</span> hiredate<span class="token operator">=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> ename<span class="token operator">=</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 复杂视图创建</span>
<span class="token keyword">create</span> <span class="token keyword">view</span> v$details
<span class="token keyword">as</span>
<span class="token keyword">select</span>
e<span class="token punctuation">.</span>eno<span class="token punctuation">,</span>e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>e<span class="token punctuation">.</span>job<span class="token punctuation">,</span>e<span class="token punctuation">.</span>hiredate<span class="token punctuation">,</span>e<span class="token punctuation">.</span>age<span class="token punctuation">,</span>e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span>
d<span class="token punctuation">.</span>dno<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname<span class="token punctuation">,</span>d<span class="token punctuation">.</span>tel<span class="token punctuation">,</span>
s<span class="token punctuation">.</span><span class="token keyword">level</span>
<span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d<span class="token punctuation">,</span>sallevel s <span class="token keyword">where</span> e<span class="token punctuation">.</span>dno<span class="token operator">=</span>d<span class="token punctuation">.</span>dno <span class="token operator">and</span>
e<span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>lowsal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token keyword">level</span> <span class="token keyword">from</span> v$details <span class="token keyword">where</span> eno<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询研发部所有人的薪资等级和部门信息</span>
<span class="token keyword">select</span> <span class="token keyword">level</span><span class="token punctuation">,</span>ename <span class="token keyword">from</span> v$details <span class="token keyword">where</span> dname<span class="token operator">=</span><span class="token string">&#39;研发部&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项：</p><p>视图不占据存储空间，只是一种逻辑存在（非物理存储）；只有在使用视图时才通过视图的定义，加载对应的数据</p><p>对视图的操作会影响基表(物理表，实际开发中一般针对视图做查询，避免基于视图做修改</p><p><strong>索引提高查询速度，视图简化了查询的方式</strong></p></blockquote><h2 id="事务-transaction" tabindex="-1"><a class="header-anchor" href="#事务-transaction" aria-hidden="true">#</a> 事务（Transaction）</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>​ 事务是实际开发中，比较常见业务逻辑操作中都会存在问题，比如转账的业务，需要将一个账户的钱转向到另一个账号，此时会涉及到两个修改操作：A 账户钱减少，B 账户钱增加；这两个操作要保证能同时成功或者同时失败，那么这一个业务需求(逻辑单元)就称之为一个事务。</p><p><img src="`+k+'" alt="1596090904115"></p><h3 id="事务特性" tabindex="-1"><a class="header-anchor" href="#事务特性" aria-hidden="true">#</a> 事务特性</h3><p>数据库事务包含四大特征(ACID)：</p><ol><li>原子性：对于事务中的多次更新操作要么同时成功，要么同时失败</li><li>一致性：保证事务操作完成之后，所有的结果一致</li><li>隔离性：事物之间各自独立存在相互不影响</li><li>持久性：事务完成之后，确保所有的数据长期持久的存在</li></ol><h3 id="mysql-事务的使用" tabindex="-1"><a class="header-anchor" href="#mysql-事务的使用" aria-hidden="true">#</a> Mysql 事务的使用</h3><p>mysql 中只有使用 InnoDB 引擎才支持事务；MyISAM 引擎不支持事务</p><p>​ show table status where name = &#39;emp&#39; \\G</p><p><img src="'+m+`" alt="1596093789302"></p><p>参考代码</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启事务(事务一旦开，后续的所有更新操作都在这个事务中，直到提交后才会对物理表产生影响)</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>

<span class="token comment">-- 设置保存点(在当前位置设置保存点，通过rollback to 保存点，可以回滚到该位置)</span>
<span class="token keyword">savepoint</span> p1<span class="token punctuation">;</span>

<span class="token comment">-- 回滚保存点（回滚到指定的保存点：一旦回滚，则当前保存点会撤销）</span>
<span class="token keyword">rollback</span> <span class="token keyword">to</span> p1<span class="token punctuation">;</span>

<span class="token comment">-- 回滚到事务开始的位置</span>
<span class="token keyword">rollback</span><span class="token punctuation">;</span>

<span class="token comment">-- 提交事务</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h3><p>由于实际的业务操作可能会涉及到很多事务的并发操作，因此在事务并发时可能会遇到以下问题：</p><ol><li><p>**丢失更新：**撤消一个事务时，把其它事务已提交的更新的数据覆盖了。</p></li><li><p><strong>脏读</strong>：事务 A 读取了事务 B 更新的数据，而此时事务 B 并未提交，那么 A 读取到的数据是脏数据</p><p>脏数据</p></li><li><p>**不可重复读：**事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新 并提交，导致事务 A 多次读取同一数据时，结果 不一致。</p></li><li><p>**幻读：**系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有 改过来，就好像发生了幻觉一样，这就叫幻读。</p></li></ol><p>对于以上可能出现的问题，数据库中引入事务隔离级别的解决方案：</p><p><img src="`+v+'" alt="1596094489993"></p><p>以上是解决事务并发问题的方案，其中隔离级别从低到高，对数据操作的效率影响从低到高；Mysql 中默认的隔离级别是：repeatable-read</p><p><img src="'+b+'" alt="1596094769618"></p><h2 id="数据库可编程性介绍" tabindex="-1"><a class="header-anchor" href="#数据库可编程性介绍" aria-hidden="true">#</a> 数据库可编程性介绍</h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><p>​ 在之前学习到所有有关数据库操作几乎都是一行命令解决问题，这些命令大多都是 sql 标准语法；但是不同的数据库管理系统对 sql 语句都添加了扩展支持，允许通过一些常见数据类型，运算符，分支语句，循环语句等实现一些类似常规编程语言的操作，这个概念称之为数据库的可编程性；对于不同的数据库产品对于可编程的命名也存在差异：</p><ol><li>MSSQLServer 的可编程性称之为 T-SQL</li><li>Oracle 中的可编程性称之为 PL/SQL</li></ol><h3 id="数据库可编程性分类" tabindex="-1"><a class="header-anchor" href="#数据库可编程性分类" aria-hidden="true">#</a> 数据库可编程性分类</h3><ul><li>存储过程(procedure)</li><li>触发器(trigger)</li></ul><h3 id="存储过程-procedure" tabindex="-1"><a class="header-anchor" href="#存储过程-procedure" aria-hidden="true">#</a> 存储过程（Procedure）</h3><p>​ 存储过程(Procedure),是数据库操作语言 SQL 的可编程性实现，传统的 SQL 语句通常是在数据库服务器中执行一条命令，命令在数据库引擎内部需要经过创建与分析的过程，因此在运行时间上开销较大；而存储过程是预编译的，在首次运行一个存储过程时，查询优化器对其进行分析、优化，并给出最终被存在系统表中的存储计划，这样，后期的使用只需通过命令调用即可，因此，在执行过程时便可节省此开销。</p><p><img src="'+y+`" alt="1596104686639"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--最基础简单存储过程</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> testP1 <span class="token punctuation">(</span>a <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">if</span> a <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span>
		<span class="token keyword">set</span> a <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
		<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sex <span class="token operator">=</span> a<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">call</span> testP1<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 使用零时变量的存储过程</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> emp1 <span class="token punctuation">(</span>$ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">DECLARE</span> $job <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">SELECT</span> job <span class="token keyword">into</span> $job <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">=</span> $ename<span class="token punctuation">;</span>
	<span class="token keyword">if</span> $job <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span>
		<span class="token keyword">set</span> $job <span class="token operator">=</span> <span class="token string">&#39;普通员工&#39;</span><span class="token punctuation">;</span>
		<span class="token keyword">update</span> emp <span class="token keyword">set</span> job <span class="token operator">=</span> $job <span class="token keyword">where</span> ename <span class="token operator">=</span> $ename<span class="token punctuation">;</span>
		<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">=</span> $ename<span class="token punctuation">;</span>
		<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">call</span> emp1<span class="token punctuation">(</span><span class="token string">&#39;沙和尚&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">DROP</span> <span class="token keyword">procedure</span> emp1<span class="token punctuation">;</span>

<span class="token comment">-- 查询指定部门名的员工信息？如何使用存储过程实现</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> sp_emp3<span class="token punctuation">(</span>$dname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
  <span class="token comment">-- 声明临时变量</span>
	<span class="token keyword">declare</span> $dno <span class="token keyword">int</span><span class="token punctuation">;</span>
	<span class="token comment">-- 根据指定的部门名称查询到部门号并赋值到临时变量中</span>
	<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dno <span class="token keyword">from</span> dept <span class="token keyword">where</span> dname<span class="token operator">=</span>$dname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token keyword">call</span> sp_emp3<span class="token punctuation">(</span><span class="token string">&#39;研发部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 如何利用存储过程实现一个分页操作：输入一个每页数据行数和页码数，显示该页数据</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> sp_page<span class="token punctuation">(</span>pagesize <span class="token keyword">int</span><span class="token punctuation">,</span>pagenum <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
	<span class="token comment">-- 声明临时变量</span>
	<span class="token keyword">declare</span> startNum <span class="token keyword">int</span><span class="token punctuation">;</span>
	<span class="token comment">-- 对变量赋值操作</span>
	<span class="token keyword">set</span> startNum <span class="token operator">=</span> <span class="token punctuation">(</span>pagenum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize<span class="token punctuation">;</span>
	<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> startNum<span class="token punctuation">,</span>pagesize<span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">call</span> sp_page<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">-- 删除存储过程</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> sp_page<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>存储过程优劣势：</p><p><img src="`+h+'" alt="1596104342361"></p></blockquote><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习：</h4><p>​ 1：索引的使用</p><p>​ 对 emp 表中的 enam 字段添加索引</p><p>​ 对 emp 表中 ename,job,age 三个字段添加组合索引</p><p>​ 修改索引，将上条组合索引修改为 ename 和 job 的组合</p><p>2：视图的使用</p><p>​ 新建员工表的视图</p><p>​ 新建部门表的视图</p><p>​ 新建获取 T8 薪资等，所有研发部员工的个人信息和部门名称</p><p>3: 事务的使用</p><p>​ 修改 emp 表为不自动提交事务，新建事务对员工的薪资调整的完整事务</p><p>​ 分别对员工薪资做两次调整，并且对这两次操作分别设置保存点；</p><p>​ 最后回滚到第一个保存点</p><p>​ 并提交事务，完成对第一次薪资的修改</p><p>4：存储过程的实现</p><p>​ 新建存储过程，当修改员工的薪资低于当前员工岗位等级（比如 T5,T6）最低薪资时，让员工的薪资默认为最低薪资,并最终显示员工修改后的所有信息</p>',95);function q(x,M){const a=o("router-link");return l(),c("div",null,[g,n("nav",f,[n("ul",null,[n("li",null,[e(a,{to:"#内置函数"},{default:t(()=>[s("内置函数")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#聚合函数"},{default:t(()=>[s("聚合函数")]),_:1})]),n("li",null,[e(a,{to:"#字符函数"},{default:t(()=>[s("字符函数")]),_:1})]),n("li",null,[e(a,{to:"#数值函数"},{default:t(()=>[s("数值函数")]),_:1})]),n("li",null,[e(a,{to:"#日期函数"},{default:t(()=>[s("日期函数")]),_:1})]),n("li",null,[e(a,{to:"#加密函"},{default:t(()=>[s("加密函")]),_:1})])])]),n("li",null,[e(a,{to:"#复制表与数据复制"},{default:t(()=>[s("复制表与数据复制")]),_:1})]),n("li",null,[e(a,{to:"#索引"},{default:t(()=>[s("索引")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#索引分类"},{default:t(()=>[s("索引分类")]),_:1})]),n("li",null,[e(a,{to:"#索引创建语法"},{default:t(()=>[s("索引创建语法")]),_:1})])])]),n("li",null,[e(a,{to:"#视图"},{default:t(()=>[s("视图")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#创建语法"},{default:t(()=>[s("创建语法")]),_:1})])])]),n("li",null,[e(a,{to:"#事务-transaction"},{default:t(()=>[s("事务（Transaction）")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#概述"},{default:t(()=>[s("概述")]),_:1})]),n("li",null,[e(a,{to:"#事务特性"},{default:t(()=>[s("事务特性")]),_:1})]),n("li",null,[e(a,{to:"#mysql-事务的使用"},{default:t(()=>[s("Mysql 事务的使用")]),_:1})]),n("li",null,[e(a,{to:"#事务隔离级别"},{default:t(()=>[s("事务隔离级别")]),_:1})])])]),n("li",null,[e(a,{to:"#数据库可编程性介绍"},{default:t(()=>[s("数据库可编程性介绍")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#概述-1"},{default:t(()=>[s("概述")]),_:1})]),n("li",null,[e(a,{to:"#数据库可编程性分类"},{default:t(()=>[s("数据库可编程性分类")]),_:1})]),n("li",null,[e(a,{to:"#存储过程-procedure"},{default:t(()=>[s("存储过程（Procedure）")]),_:1})])])])])]),_])}const A=p(w,[["render",q],["__file","index.html.vue"]]);export{A as default};
