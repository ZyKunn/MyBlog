import{_ as p,r,o as d,c as o,a,e as n,w as l,b as e,d as c}from"./app-a153c100.js";const u="/MyBlog/assets/image-20210725144240631-7098511e.png",m="/MyBlog/assets/image-20210725144536958-981d82c0.png",g="/MyBlog/assets/image-20210725144725943-25f555fc.png",h="/MyBlog/assets/image-20210725151319695-ac3eab79.png",v="/MyBlog/assets/image-20210725151543640-eeea19b7.png",_="/MyBlog/assets/image-20210725151654046-f9697d10.png",b="/MyBlog/assets/image-20210725151729118-d827d93a.png",f="/MyBlog/assets/image-20210725151940515-33dd1bef.png",k="/MyBlog/assets/image-20210725152037611-36202b4d.png",y="/MyBlog/assets/image-20210725152052501-b8a7a9fb.png",R="/MyBlog/assets/image-20210725152222497-d2223f19.png",B="/MyBlog/assets/image-20210725152700914-0d6d2065.png",x="/MyBlog/assets/image-20210725153201086-ba535b71.png",M="/MyBlog/assets/image-20210725153359022-435875fd.png",D="/MyBlog/assets/image-20210725153524190-b370fb4c.png",A="/MyBlog/assets/image-20210725153715910-6e3ac8b0.png",F="/MyBlog/assets/image-20210725153937031-15526cc6.png",O="/MyBlog/assets/image-20210725154155984-9ebea34f.png",E="/MyBlog/assets/image-20210725154216392-9b347241.png",C="/MyBlog/assets/image-20210725154405899-841f6635.png",S="/MyBlog/assets/image-20210725154528072-0ba9baca.png",w="/MyBlog/assets/image-20210725154632354-028b8f0f.png",I="/MyBlog/assets/image-20210725154816841-42f84e57.png",T="/MyBlog/assets/image-20210725152052501-b8a7a9fb.png",q="/MyBlog/assets/image-20210725155124958-d4fba741.png",j="/MyBlog/assets/image-20210725155747294-ed902a02.png",P="/MyBlog/assets/image-20210725152052501-b8a7a9fb.png",L="/MyBlog/assets/image-20210725155820320-9f23e1bb.png",N="/MyBlog/assets/image-20210725155850200-799238af.png",V="/MyBlog/assets/image-20210725160138290-8a6c83a9.png",i="/MyBlog/assets/image-20210725160448139-c77ca11f.png",z="/MyBlog/assets/image-20210725161007099-147c6794.png",G="/MyBlog/assets/image-20210725161241793-2a08dbd3.png",H="/MyBlog/assets/image-20210725161401925-8b02a66b.png",J="/MyBlog/assets/image-20210725161506241-76ac78d7.png",K="/MyBlog/assets/image-20210725161540841-763076e0.png",Q="/MyBlog/assets/image-20210725161637152-56b30113.png",U="/MyBlog/assets/image-20210725161731738-0dd8b685.png",W="/MyBlog/assets/image-20210725161817642-0b3e5a8c.png",X="/MyBlog/assets/image-20210725162030478-80de5fa3.png",Y="/MyBlog/assets/image-20210725162101228-b2e82cbd.png",Z="/MyBlog/assets/image-20210725162145497-17930b14.png",$="/MyBlog/assets/image-20210725162224058-f4d2a452.png",t="/MyBlog/assets/image-20210727161152065-8a322451.png",aa="/MyBlog/assets/image-20210725162319490-a4d765bf.png",ea="/MyBlog/assets/image-20210725162408979-44f1254b.png",sa="/MyBlog/assets/image-20210727160803386-3c719a73.png",na="/MyBlog/assets/image-20210725162441407-234af58b.png",la="/MyBlog/assets/image-20210727160037766-4a7b9e57.png",ia={},ta=a("h1",{id:"day03-分布式缓存",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#day03-分布式缓存","aria-hidden":"true"},"#"),e(" day03-分布式缓存")],-1),pa={class:"table-of-contents"},ra=c('<p>-- 基于 Redis 集群解决单机 Redis 存在的问题</p><p>单机的 Redis 存在四大问题：</p><p><img src="'+u+'" alt="image-20210725144240631"></p><h1 id="_0-学习目标" tabindex="-1"><a class="header-anchor" href="#_0-学习目标" aria-hidden="true">#</a> 0.学习目标</h1><h1 id="_1-redis-持久化" tabindex="-1"><a class="header-anchor" href="#_1-redis-持久化" aria-hidden="true">#</a> 1.Redis 持久化</h1><p>Redis 有两种持久化方案：</p><ul><li>RDB 持久化</li><li>AOF 持久化</li></ul><h2 id="_1-1-rdb-持久化" tabindex="-1"><a class="header-anchor" href="#_1-1-rdb-持久化" aria-hidden="true">#</a> 1.1.RDB 持久化</h2><p>RDB 全称 Redis Database Backup file（Redis 数据备份文件），也被叫做 Redis 数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当 Redis 实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为 RDB 文件，默认是保存在当前运行目录。</p><h3 id="_1-1-1-执行时机" tabindex="-1"><a class="header-anchor" href="#_1-1-1-执行时机" aria-hidden="true">#</a> 1.1.1.执行时机</h3><p>RDB 持久化在四种情况下会执行：</p><ul><li>执行 save 命令</li><li>执行 bgsave 命令</li><li>Redis 停机时</li><li>触发 RDB 条件时</li></ul><p><strong>1）save 命令</strong></p><p>执行下面的命令，可以立即执行一次 RDB：</p><p><img src="'+m+'" alt="image-20210725144536958"></p><p>save 命令会导致主进程执行 RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p><p><strong>2）bgsave 命令</strong></p><p>下面的命令可以异步执行 RDB：</p><p><img src="'+g+`" alt="image-20210725144725943"></p><p>这个命令执行后会开启独立进程完成 RDB，主进程可以持续处理用户请求，不受影响。</p><p><strong>3）停机时</strong></p><p>Redis 停机时会执行一次 save 命令，实现 RDB 持久化。</p><p><strong>4）触发 RDB 条件</strong></p><p>Redis 内部有触发 RDB 的机制，可以在 redis.conf 文件中找到，格式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">900 1</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">300 10</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">60 10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RDB 的其它配置也可以在 redis.conf 文件中设置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span>
<span class="token key attr-name">rdbcompression</span> <span class="token value attr-value">yes</span>

<span class="token comment"># RDB文件名称</span>
<span class="token key attr-name">dbfilename</span> <span class="token value attr-value">dump.rdb</span>

<span class="token comment"># 文件保存的路径目录</span>
<span class="token key attr-name">dir</span> <span class="token value attr-value">./</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-2-rdb-原理" tabindex="-1"><a class="header-anchor" href="#_1-1-2-rdb-原理" aria-hidden="true">#</a> 1.1.2.RDB 原理</h3><p>bgsave 开始时会 fork 主进程得到子进程，子进程共享主进程的内存数据。完成 fork 后读取内存数据并写入 RDB 文件。</p><p>fork 采用的是 copy-on-write 技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><p><img src="`+h+'" alt="image-20210725151319695"></p><h3 id="_1-1-3-小结" tabindex="-1"><a class="header-anchor" href="#_1-1-3-小结" aria-hidden="true">#</a> 1.1.3.小结</h3><p>RDB 方式 bgsave 的基本流程？</p><ul><li>fork 主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的 RDB 文件</li><li>用新 RDB 文件替换旧的 RDB 文件</li></ul><p>RDB 会在什么时候执行？save 60 1000 代表什么含义？</p><ul><li>默认是服务停止时</li><li>代表 60 秒内至少执行 1000 次修改则触发 RDB</li></ul><p>RDB 的缺点？</p><ul><li>RDB 执行间隔时间长，两次 RDB 之间写入数据有丢失的风险</li><li>fork 子进程、压缩、写出 RDB 文件都比较耗时</li></ul><h2 id="_1-2-aof-持久化" tabindex="-1"><a class="header-anchor" href="#_1-2-aof-持久化" aria-hidden="true">#</a> 1.2.AOF 持久化</h2><h3 id="_1-2-1-aof-原理" tabindex="-1"><a class="header-anchor" href="#_1-2-1-aof-原理" aria-hidden="true">#</a> 1.2.1.AOF 原理</h3><p>AOF 全称为 Append Only File（追加文件）。Redis 处理的每一个写命令都会记录在 AOF 文件，可以看做是命令日志文件。</p><p><img src="'+v+`" alt="image-20210725151543640"></p><h3 id="_1-2-2-aof-配置" tabindex="-1"><a class="header-anchor" href="#_1-2-2-aof-配置" aria-hidden="true">#</a> 1.2.2.AOF 配置</h3><p>AOF 默认是关闭的，需要修改 redis.conf 配置文件来开启 AOF：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 是否开启AOF功能，默认是no</span>
<span class="token key attr-name">appendonly</span> <span class="token value attr-value">yes</span>
<span class="token comment"># AOF文件的名称</span>
<span class="token key attr-name">appendfilename</span> <span class="token value attr-value">&quot;appendonly.aof&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AOF 的命令记录的频率也可以通过 redis.conf 文件来配：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 表示每执行一次写命令，立即记录到AOF文件</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">always</span>
<span class="token comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">everysec</span>
<span class="token comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">no</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三种策略对比：</p><p><img src="`+_+'" alt="image-20210725151654046"></p><h3 id="_1-2-3-aof-文件重写" tabindex="-1"><a class="header-anchor" href="#_1-2-3-aof-文件重写" aria-hidden="true">#</a> 1.2.3.AOF 文件重写</h3><p>因为是记录命令，AOF 文件会比 RDB 文件大的多。而且 AOF 会记录对同一个 key 的多次写操作，但只 bg 有最后一次写操作才有意义。通过执行 bgrewriteaof 命令，可以让 AOF 文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="'+b+`" alt="image-20210725151729118"></p><p>如图，AOF 原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对 num 的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF 文件内容就是：<code>mset name jack num 666</code></p><p>Redis 也会在触发阈值时自动去重写 AOF 文件。阈值也可以在 redis.conf 中配置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span>
<span class="token key attr-name">auto-aof-rewrite-percentage</span> <span class="token value attr-value">100</span>
<span class="token comment"># AOF文件体积最小多大以上才触发重写</span>
<span class="token key attr-name">auto-aof-rewrite-min-size</span> <span class="token value attr-value">64mb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-rdb-与-aof-对比" tabindex="-1"><a class="header-anchor" href="#_1-3-rdb-与-aof-对比" aria-hidden="true">#</a> 1.3.RDB 与 AOF 对比</h2><p>RDB 和 AOF 各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><p><img src="`+f+'" alt="image-20210725151940515"></p><h1 id="_2-redis-主从" tabindex="-1"><a class="header-anchor" href="#_2-redis-主从" aria-hidden="true">#</a> 2.Redis 主从</h1><h2 id="_2-1-搭建主从架构" tabindex="-1"><a class="header-anchor" href="#_2-1-搭建主从架构" aria-hidden="true">#</a> 2.1.搭建主从架构</h2><p>单节点 Redis 的并发能力是有上限的，要进一步提高 Redis 的并发能力，就需要搭建主从集群，实现读写分离。</p><p><img src="'+k+'" alt="image-20210725152037611"></p><p>具体搭建流程参考课前资料《Redis 集群.md》：</p><p><img src="'+y+'" alt="image-20210725152052501"></p><h2 id="_2-2-主从数据同步原理" tabindex="-1"><a class="header-anchor" href="#_2-2-主从数据同步原理" aria-hidden="true">#</a> 2.2.主从数据同步原理</h2><h3 id="_2-2-1-全量同步" tabindex="-1"><a class="header-anchor" href="#_2-2-1-全量同步" aria-hidden="true">#</a> 2.2.1.全量同步</h3><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将 master 节点的所有数据都拷贝给 slave 节点，流程：</p><p><img src="'+R+'" alt="image-20210725152222497"></p><p>这里有一个问题，master 如何得知 salve 是第一次来连接呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><strong>Replication Id</strong>：简称 replid，是数据集的标记，id 一致则说明是同一数据集。每一个 master 都有唯一的 replid，slave 则会继承 master 节点的 replid</li><li><strong>offset</strong>：偏移量，随着记录在 repl_baklog 中的数据增多而逐渐增大。slave 完成同步时也会记录当前同步的 offset。如果 slave 的 offset 小于 master 的 offset，说明 slave 数据落后于 master，需要更新。</li></ul><p>因此 slave 做数据同步，必须向 master 声明自己的 replication id 和 offset，master 才可以判断到底需要同步哪些数据。</p><p>因为 slave 原本也是一个 master，有自己的 replid 和 offset，当第一次变成 slave，与 master 建立连接时，发送的 replid 和 offset 是自己的 replid 和 offset。</p><p>master 判断发现 slave 发送来的 replid 与自己的不一致，说明这是一个全新的 slave，就知道要做全量同步了。</p><p>master 会将自己的 replid 和 offset 都发送给这个 slave，slave 保存这些信息。以后 slave 的 replid 就与 master 一致了。</p><p>因此，<strong>master 判断一个节点是否是第一次同步的依据，就是看 replid 是否一致</strong>。</p><p>如图：</p><p><img src="'+B+'" alt="image-20210725152700914"></p><p>完整流程描述：</p><ul><li>slave 节点请求增量同步</li><li>master 节点判断 replid，发现不一致，拒绝增量同步</li><li>master 将完整内存数据生成 RDB，发送 RDB 到 slave</li><li>slave 清空本地数据，加载 master 的 RDB</li><li>master 将 RDB 期间的命令记录在 repl_baklog，并持续将 log 中的命令发送给 slave</li><li>slave 执行接收到的命令，保持与 master 之间的同步</li></ul><h3 id="_2-2-2-增量同步" tabindex="-1"><a class="header-anchor" href="#_2-2-2-增量同步" aria-hidden="true">#</a> 2.2.2.增量同步</h3><p>全量同步需要先做 RDB，然后将 RDB 文件通过网络传输个 slave，成本太高了。因此除了第一次做全量同步，其它大多数时候 slave 与 master 都是做<strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新 slave 与 master 存在差异的部分数据。如图：</p><p><img src="'+x+'" alt="image-20210725153201086"></p><p>那么 master 怎么知道 slave 与自己的数据差异在哪里呢?</p><h3 id="_2-2-3-repl-backlog-原理" tabindex="-1"><a class="header-anchor" href="#_2-2-3-repl-backlog-原理" aria-hidden="true">#</a> 2.2.3.repl_backlog 原理</h3><p>master 怎么知道 slave 与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的 repl_baklog 文件了。</p><p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从 0 开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p>repl_baklog 中会记录 Redis 处理过的命令日志及 offset，包括 master 当前的 offset，和 slave 已经拷贝到的 offset：</p><p><img src="'+M+'" alt="image-20210725153359022"></p><p>slave 与 master 的 offset 之间的差异，就是 salve 需要增量拷贝的数据了。</p><p>随着不断有数据写入，master 的 offset 逐渐变大，slave 也不断的拷贝，追赶 master 的 offset：</p><p><img src="'+D+'" alt="image-20210725153524190"></p><p>直到数组被填满：</p><p><img src="'+A+'" alt="image-20210725153715910"></p><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到 slave 的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p><p>但是，如果 slave 出现网络阻塞，导致 master 的 offset 远远超过了 slave 的 offset：</p><p><img src="'+F+'" alt="image-20210725153937031"></p><p>如果 master 继续写入新数据，其 offset 就会覆盖旧的数据，直到将 slave 现在的 offset 也覆盖：</p><p><img src="'+O+'" alt="image-20210725154155984"></p><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果 slave 恢复，需要同步，却发现自己的 offset 都没有了，无法完成增量同步了。只能做全量同步。</p><p><img src="'+E+'" alt="image-20210725154216392"></p><h2 id="_2-3-主从同步优化" tabindex="-1"><a class="header-anchor" href="#_2-3-主从同步优化" aria-hidden="true">#</a> 2.3.主从同步优化</h2><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化 Redis 主从就集群：</p><ul><li>在 master 中配置 repl-diskless-sync yes 启用无磁盘复制，避免全量同步时的磁盘 IO。</li><li>Redis 单节点上的内存占用不要太大，减少 RDB 导致的过多磁盘 IO</li><li>适当提高 repl_baklog 的大小，发现 slave 宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个 master 上的 slave 节点数量，如果实在是太多 slave，则可以采用主-从-从链式结构，减少 master 压力</li></ul><p>主从从架构图：</p><p><img src="'+C+'" alt="image-20210725154405899"></p><h2 id="_2-4-小结" tabindex="-1"><a class="header-anchor" href="#_2-4-小结" aria-hidden="true">#</a> 2.4.小结</h2><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master 将完整内存数据生成 RDB，发送 RDB 到 slave。后续命令则记录在 repl_baklog，逐个发送给 slave。</li><li>增量同步：slave 提交自己的 offset 到 master，master 获取 repl_baklog 中从 offset 之后的命令给 slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave 节点第一次连接 master 节点时</li><li>slave 节点断开时间太久，repl_baklog 中的 offset 已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave 节点断开又恢复，并且在 repl_baklog 中能找到 offset 时</li></ul><h1 id="_3-redis-哨兵" tabindex="-1"><a class="header-anchor" href="#_3-redis-哨兵" aria-hidden="true">#</a> 3.Redis 哨兵</h1><p>Redis 提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。</p><h2 id="_3-1-哨兵原理" tabindex="-1"><a class="header-anchor" href="#_3-1-哨兵原理" aria-hidden="true">#</a> 3.1.哨兵原理</h2><h3 id="_3-1-1-集群结构和作用" tabindex="-1"><a class="header-anchor" href="#_3-1-1-集群结构和作用" aria-hidden="true">#</a> 3.1.1.集群结构和作用</h3><p>哨兵的结构如图：</p><p><img src="'+S+'" alt="image-20210725154528072"></p><p>哨兵的作用如下：</p><ul><li><strong>监控</strong>：Sentinel 会不断检查您的 master 和 slave 是否按预期工作</li><li><strong>自动故障恢复</strong>：如果 master 故障，Sentinel 会将一个 slave 提升为 master。当故障实例恢复后也以新的 master 为主</li><li><strong>通知</strong>：Sentinel 充当 Redis 客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给 Redis 的客户端</li></ul><h3 id="_3-1-2-集群监控原理" tabindex="-1"><a class="header-anchor" href="#_3-1-2-集群监控原理" aria-hidden="true">#</a> 3.1.2.集群监控原理</h3><p>Sentinel 基于心跳机制监测服务状态，每隔 1 秒向集群的每个实例发送 ping 命令：</p><p>•主观下线：如果某 sentinel 节点发现某实例未在规定时间响应，则认为该实例<strong>主观下线</strong>。</p><p>•客观下线：若超过指定数量（quorum）的 sentinel 都认为该实例主观下线，则该实例<strong>客观下线</strong>。quorum 值最好超过 Sentinel 实例数量的一半。</p><p><img src="'+w+'" alt="image-20210725154632354"></p><h3 id="_3-1-3-集群故障恢复原理" tabindex="-1"><a class="header-anchor" href="#_3-1-3-集群故障恢复原理" aria-hidden="true">#</a> 3.1.3.集群故障恢复原理</h3><p>一旦发现 master 故障，sentinel 需要在 salve 中选择一个作为新的 master，选择依据是这样的：</p><ul><li>首先会判断 slave 节点与 master 节点断开时间长短，如果超过指定值（down-after-milliseconds * 10）则会排除该 slave 节点</li><li>然后判断 slave 节点的 slave-priority 值，越小优先级越高，如果是 0 则永不参与选举</li><li>如果 slave-prority 一样，则判断 slave 节点的 offset 值，越大说明数据越新，优先级越高</li><li>最后是判断 slave 节点的运行 id 大小，越小优先级越高。</li></ul><p>当选出一个新的 master 后，该如何实现切换呢？</p><p>流程如下：</p><ul><li>sentinel 给备选的 slave1 节点发送 slaveof no one 命令，让该节点成为 master</li><li>sentinel 给所有其它 slave 发送 slaveof 192.168.150.101 7002 命令，让这些 slave 成为新 master 的从节点，开始从新的 master 上同步数据。</li><li>最后，sentinel 将故障节点标记为 slave，当故障节点恢复后会自动成为新的 master 的 slave 节点</li></ul><p><img src="'+I+'" alt="image-20210725154816841"></p><h3 id="_3-1-4-小结" tabindex="-1"><a class="header-anchor" href="#_3-1-4-小结" aria-hidden="true">#</a> 3.1.4.小结</h3><p>Sentinel 的三个作用是什么？</p><ul><li>监控</li><li>故障转移</li><li>通知</li></ul><p>Sentinel 如何判断一个 redis 实例是否健康？</p><ul><li>每隔 1 秒发送一次 ping 命令，如果超过一定时间没有相向则认为是主观下线</li><li>如果大多数 sentinel 都认为实例主观下线，则判定服务下线</li></ul><p>故障转移步骤有哪些？</p><ul><li>首先选定一个 slave 作为新的 master，执行 slaveof no one</li><li>然后让所有节点都执行 slaveof 新 master</li><li>修改故障节点配置，添加 slaveof 新 master</li></ul><h2 id="_3-2-搭建哨兵集群" tabindex="-1"><a class="header-anchor" href="#_3-2-搭建哨兵集群" aria-hidden="true">#</a> 3.2.搭建哨兵集群</h2><p>具体搭建流程参考课前资料《Redis 集群.md》：</p><p><img src="'+T+'" alt="image-20210725155019276"></p><h2 id="_3-3-redistemplate" tabindex="-1"><a class="header-anchor" href="#_3-3-redistemplate" aria-hidden="true">#</a> 3.3.RedisTemplate</h2><p>在 Sentinel 集群监管下的 Redis 主从集群，其节点会因为自动故障转移而发生变化，Redis 的客户端必须感知这种变化，及时更新连接信息。Spring 的 RedisTemplate 底层利用 lettuce 实现了节点的感知和自动切换。</p><p>下面，我们通过一个测试来实现 RedisTemplate 集成哨兵机制。</p><h3 id="_3-3-1-导入-demo-工程" tabindex="-1"><a class="header-anchor" href="#_3-3-1-导入-demo-工程" aria-hidden="true">#</a> 3.3.1.导入 Demo 工程</h3><p>首先，我们引入课前资料提供的 Demo 工程：</p><p><img src="'+q+`" alt="image-20210725155124958"></p><h3 id="_3-3-2-引入依赖" tabindex="-1"><a class="header-anchor" href="#_3-3-2-引入依赖" aria-hidden="true">#</a> 3.3.2.引入依赖</h3><p>在项目的 pom 文件中引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-3-配置-redis-地址" tabindex="-1"><a class="header-anchor" href="#_3-3-3-配置-redis-地址" aria-hidden="true">#</a> 3.3.3.配置 Redis 地址</h3><p>然后在配置文件 application.yml 中指定 redis 的 sentinel 相关信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spring<span class="token operator">:</span>
  redis<span class="token operator">:</span>
    sentinel<span class="token operator">:</span>
      master<span class="token operator">:</span> mymaster
      nodes<span class="token operator">:</span>
        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.126</span><span class="token number">.129</span><span class="token operator">:</span><span class="token number">27001</span>
        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.126</span><span class="token number">.129</span><span class="token operator">:</span><span class="token number">27002</span>
        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.126</span><span class="token number">.129</span><span class="token operator">:</span><span class="token number">27003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-4-配置读写分离" tabindex="-1"><a class="header-anchor" href="#_3-3-4-配置读写分离" aria-hidden="true">#</a> 3.3.4.配置读写分离</h3><p>在项目的启动类中，添加一个新的 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">LettuceClientConfigurationBuilderCustomizer</span> <span class="token function">clientConfigurationBuilderCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> clientConfigurationBuilder <span class="token operator">-&gt;</span> clientConfigurationBuilder<span class="token punctuation">.</span><span class="token function">readFrom</span><span class="token punctuation">(</span><span class="token class-name">ReadFrom</span><span class="token punctuation">.</span><span class="token constant">REPLICA_PREFERRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 bean 中配置的就是读写策略，包括四种：</p><ul><li>MASTER：从主节点读取</li><li>MASTER_PREFERRED：优先从 master 节点读取，master 不可用才读取 replica</li><li>REPLICA：从 slave（replica）节点读取</li><li>REPLICA _PREFERRED：优先从 slave（replica）节点读取，所有的 slave 都不可用才读取 master</li></ul><h1 id="_4-redis-分片集群" tabindex="-1"><a class="header-anchor" href="#_4-redis-分片集群" aria-hidden="true">#</a> 4.Redis 分片集群</h1><h2 id="_4-1-搭建分片集群" tabindex="-1"><a class="header-anchor" href="#_4-1-搭建分片集群" aria-hidden="true">#</a> 4.1.搭建分片集群</h2><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li><p>海量数据存储问题</p></li><li><p>高并发写的问题</p></li></ul><p>使用分片集群可以解决上述问题，如图:</p><p><img src="`+j+'" alt="image-20210725155747294"></p><p>分片集群特征：</p><ul><li><p>集群中有多个 master，每个 master 保存不同数据</p></li><li><p>每个 master 都可以有多个 slave 节点</p></li><li><p>master 之间通过 ping 监测彼此健康状态</p></li><li><p>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p></li></ul><p>具体搭建流程参考课前资料《Redis 集群.md》：</p><p><img src="'+P+'" alt="image-20210725155806288"></p><h2 id="_4-2-散列插槽" tabindex="-1"><a class="header-anchor" href="#_4-2-散列插槽" aria-hidden="true">#</a> 4.2.散列插槽</h2><h3 id="_4-2-1-插槽原理" tabindex="-1"><a class="header-anchor" href="#_4-2-1-插槽原理" aria-hidden="true">#</a> 4.2.1.插槽原理</h3><p>Redis 会把每一个 master 节点映射到 0~16383 共 16384 个插槽（hash slot）上，查看集群信息时就能看到：</p><p><img src="'+L+'" alt="image-20210725155820320"></p><p>数据 key 不是与节点绑定，而是与插槽绑定。redis 会根据 key 的有效部分计算插槽值，分两种情况：</p><ul><li>key 中包含&quot;{}&quot;，且“{}”中至少包含 1 个字符，“{}”中的部分是有效部分</li><li>key 中不包含“{}”，整个 key 都是有效部分</li></ul><p>例如：key 是 num，那么就根据 num 计算，如果是{itcast}num，则根据 itcast 计算。计算方式是利用 CRC16 算法得到一个 hash 值，然后对 16384 取余，得到的结果就是 slot 值。</p><p><img src="'+N+'" alt="image-20210725155850200"></p><p>如图，在 7001 这个节点执行 set a 1 时，对 a 做 hash 运算，对 16384 取余，得到的结果是 15495，因此要存储到 103 节点。</p><p>到了 7003 后，执行<code>get num</code>时，对 num 做 hash 运算，对 16384 取余，得到的结果是 2765，因此需要切换到 7001 节点</p><h3 id="_4-2-1-小结" tabindex="-1"><a class="header-anchor" href="#_4-2-1-小结" aria-hidden="true">#</a> 4.2.1.小结</h3><p>Redis 如何判断某个 key 应该在哪个实例？</p><ul><li>将 16384 个插槽分配到不同的实例</li><li>根据 key 的有效部分计算哈希值，对 16384 取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个 Redis 实例？</p><ul><li>这一类数据使用相同的有效部分，例如 key 都以{typeId}为前缀</li></ul><h2 id="_4-3-集群伸缩" tabindex="-1"><a class="header-anchor" href="#_4-3-集群伸缩" aria-hidden="true">#</a> 4.3.集群伸缩</h2><p>redis-cli --cluster 提供了很多操作集群的命令，可以通过下面方式查看：</p><p><img src="'+V+'" alt="image-20210725160138290"></p><p>比如，添加节点的命令：</p><p><img src="'+i+`" alt="image-20210725160448139"></p><h3 id="_4-3-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_4-3-1-需求分析" aria-hidden="true">#</a> 4.3.1.需求分析</h3><p>需求：向集群中添加一个新的 master 节点，并向其中存储 num = 10</p><ul><li>启动一个新的 redis 实例，端口为 7004</li><li>添加 7004 到之前的集群，并作为一个 master 节点</li><li>给 7004 节点分配插槽，使得 num 这个 key 可以存储到 7004 实例</li></ul><p>这里需要两个新的功能：</p><ul><li>添加一个节点到集群中</li><li>将部分插槽分配到新插槽</li></ul><h3 id="_4-3-2-创建新的-redis-实例" tabindex="-1"><a class="header-anchor" href="#_4-3-2-创建新的-redis-实例" aria-hidden="true">#</a> 4.3.2.创建新的 redis 实例</h3><p>创建一个文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token number">7004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>拷贝配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> redis.conf <span class="token number">7004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> s/6379/7004/g <span class="token number">7004</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server <span class="token number">7004</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-3-添加新节点到-redis" tabindex="-1"><a class="header-anchor" href="#_4-3-3-添加新节点到-redis" aria-hidden="true">#</a> 4.3.3.添加新节点到 redis</h3><p>添加节点的语法如下：</p><p><img src="`+i+`" alt="image-20210725160448139"></p><p>执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> add-node  <span class="token number">192.168</span>.126.129:7004 <span class="token number">192.168</span>.126.129:7001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过命令查看集群状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span> cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如图，7004 加入了集群，并且默认是一个 master 节点：</p><p><img src="`+z+'" alt="image-20210725161007099"></p><p>但是，可以看到 7004 节点的插槽数量为 0，因此没有任何数据可以存储到 7004 上</p><h3 id="_4-3-4-转移插槽" tabindex="-1"><a class="header-anchor" href="#_4-3-4-转移插槽" aria-hidden="true">#</a> 4.3.4.转移插槽</h3><p>我们要将 num 存储到 7004 节点，因此需要先看看 num 的插槽是多少：</p><p><img src="'+G+'" alt="image-20210725161241793"></p><p>如上图所示，num 的插槽为 2765.</p><p>我们可以将 0~3000 的插槽从 7001 转移到 7004，命令格式如下：</p><p><img src="'+H+'" alt="image-20210725161401925"></p><p>具体命令如下：</p><p>建立连接：</p><p><img src="'+J+'" alt="image-20210725161506241"></p><p>得到下面的反馈：</p><p><img src="'+K+'" alt="image-20210725161540841"></p><p>询问要移动多少个插槽，我们计划是 3000 个：</p><p>新的问题来了：</p><p><img src="'+Q+'" alt="image-20210725161637152"></p><p>那个 node 来接收这些插槽？？</p><p>显然是 7004，那么 7004 节点的 id 是多少呢？</p><p><img src="'+U+'" alt="image-20210725161731738"></p><p>复制这个 id，然后拷贝到刚才的控制台后：</p><p><img src="'+W+'" alt="image-20210725161817642"></p><p>这里询问，你的插槽是从哪里移动过来的？</p><ul><li>all：代表全部，也就是三个节点各转移一部分</li><li>具体的 id：目标节点的 id</li><li>done：没有了</li></ul><p>这里我们要从 7001 获取，因此填写 7001 的 id：</p><p><img src="'+X+'" alt="image-20210725162030478"></p><p>填完后，点击 done，这样插槽转移就准备好了：</p><p><img src="'+Y+'" alt="image-20210725162101228"></p><p>确认要转移吗？输入 yes：</p><p>然后，通过命令查看结果：</p><p><img src="'+Z+'" alt="image-20210725162145497"></p><p>可以看到：</p><p><img src="'+$+'" alt="image-20210725162224058"></p><p>目的达成。</p><h2 id="_4-4-故障转移" tabindex="-1"><a class="header-anchor" href="#_4-4-故障转移" aria-hidden="true">#</a> 4.4.故障转移</h2><p>集群初识状态是这样的：</p><p><img src="'+t+`" alt="image-20210727161152065"></p><p>其中 7001、7002、7003 都是 master，我们计划让 7002 宕机。</p><h3 id="_4-4-1-自动故障转移" tabindex="-1"><a class="header-anchor" href="#_4-4-1-自动故障转移" aria-hidden="true">#</a> 4.4.1.自动故障转移</h3><p>当集群中有一个 master 宕机会发生什么呢？</p><p>直接停止一个 redis 实例，例如 7002：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-p</span> <span class="token number">7002</span> <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1）首先是该实例与其它实例失去连接</p><p>2）然后是疑似宕机：</p><p><img src="`+aa+'" alt="image-20210725162319490"></p><p>3）最后是确定下线，自动提升一个 slave 为新的 master：</p><p><img src="'+ea+'" alt="image-20210725162408979"></p><p>4）当 7002 再次启动，就会变为一个 slave 节点了：</p><p><img src="'+sa+'" alt="image-20210727160803386"></p><h3 id="_4-4-2-手动故障转移" tabindex="-1"><a class="header-anchor" href="#_4-4-2-手动故障转移" aria-hidden="true">#</a> 4.4.2.手动故障转移</h3><p>利用 cluster failover 命令可以手动让集群中的某个 master 宕机，切换到执行 cluster failover 命令的这个 slave 节点，实现无感知的数据迁移。其流程如下：</p><p><img src="'+na+'" alt="image-20210725162441407"></p><p>这种 failover 命令可以指定三种模式：</p><ul><li>缺省：默认的流程，如图 1~6 歩</li><li>force：省略了对 offset 的一致性校验</li><li>takeover：直接执行第 5 歩，忽略数据一致性、忽略 master 状态和其它 master 的意见</li></ul><p><strong>案例需求</strong>：在 7002 这个 slave 节点执行手动故障转移，重新夺回 master 地位</p><p>步骤如下：</p><p>1）利用 redis-cli 连接 7002 这个节点</p><p>2）执行 cluster failover 命令</p><p>如图：</p><p><img src="'+la+'" alt="image-20210727160037766"></p><p>效果：</p><p><img src="'+t+`" alt="image-20210727161152065"></p><h2 id="_4-5-redistemplate-访问分片集群" tabindex="-1"><a class="header-anchor" href="#_4-5-redistemplate-访问分片集群" aria-hidden="true">#</a> 4.5.RedisTemplate 访问分片集群</h2><p>RedisTemplate 底层同样基于 lettuce 实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><p>1）引入 redis 的 starter 依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>
      <span class="token key atrule">nodes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7001</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7002</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7003</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8001</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8002</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,285);function da(oa,ca){const s=r("router-link");return d(),o("div",null,[ta,a("nav",pa,[a("ul",null,[a("li",null,[n(s,{to:"#_1-1-rdb-持久化"},{default:l(()=>[e("1.1.RDB 持久化")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_1-1-1-执行时机"},{default:l(()=>[e("1.1.1.执行时机")]),_:1})]),a("li",null,[n(s,{to:"#_1-1-2-rdb-原理"},{default:l(()=>[e("1.1.2.RDB 原理")]),_:1})]),a("li",null,[n(s,{to:"#_1-1-3-小结"},{default:l(()=>[e("1.1.3.小结")]),_:1})])])]),a("li",null,[n(s,{to:"#_1-2-aof-持久化"},{default:l(()=>[e("1.2.AOF 持久化")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_1-2-1-aof-原理"},{default:l(()=>[e("1.2.1.AOF 原理")]),_:1})]),a("li",null,[n(s,{to:"#_1-2-2-aof-配置"},{default:l(()=>[e("1.2.2.AOF 配置")]),_:1})]),a("li",null,[n(s,{to:"#_1-2-3-aof-文件重写"},{default:l(()=>[e("1.2.3.AOF 文件重写")]),_:1})])])]),a("li",null,[n(s,{to:"#_1-3-rdb-与-aof-对比"},{default:l(()=>[e("1.3.RDB 与 AOF 对比")]),_:1})]),a("li",null,[n(s,{to:"#_2-1-搭建主从架构"},{default:l(()=>[e("2.1.搭建主从架构")]),_:1})]),a("li",null,[n(s,{to:"#_2-2-主从数据同步原理"},{default:l(()=>[e("2.2.主从数据同步原理")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_2-2-1-全量同步"},{default:l(()=>[e("2.2.1.全量同步")]),_:1})]),a("li",null,[n(s,{to:"#_2-2-2-增量同步"},{default:l(()=>[e("2.2.2.增量同步")]),_:1})]),a("li",null,[n(s,{to:"#_2-2-3-repl-backlog-原理"},{default:l(()=>[e("2.2.3.repl_backlog 原理")]),_:1})])])]),a("li",null,[n(s,{to:"#_2-3-主从同步优化"},{default:l(()=>[e("2.3.主从同步优化")]),_:1})]),a("li",null,[n(s,{to:"#_2-4-小结"},{default:l(()=>[e("2.4.小结")]),_:1})]),a("li",null,[n(s,{to:"#_3-1-哨兵原理"},{default:l(()=>[e("3.1.哨兵原理")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_3-1-1-集群结构和作用"},{default:l(()=>[e("3.1.1.集群结构和作用")]),_:1})]),a("li",null,[n(s,{to:"#_3-1-2-集群监控原理"},{default:l(()=>[e("3.1.2.集群监控原理")]),_:1})]),a("li",null,[n(s,{to:"#_3-1-3-集群故障恢复原理"},{default:l(()=>[e("3.1.3.集群故障恢复原理")]),_:1})]),a("li",null,[n(s,{to:"#_3-1-4-小结"},{default:l(()=>[e("3.1.4.小结")]),_:1})])])]),a("li",null,[n(s,{to:"#_3-2-搭建哨兵集群"},{default:l(()=>[e("3.2.搭建哨兵集群")]),_:1})]),a("li",null,[n(s,{to:"#_3-3-redistemplate"},{default:l(()=>[e("3.3.RedisTemplate")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_3-3-1-导入-demo-工程"},{default:l(()=>[e("3.3.1.导入 Demo 工程")]),_:1})]),a("li",null,[n(s,{to:"#_3-3-2-引入依赖"},{default:l(()=>[e("3.3.2.引入依赖")]),_:1})]),a("li",null,[n(s,{to:"#_3-3-3-配置-redis-地址"},{default:l(()=>[e("3.3.3.配置 Redis 地址")]),_:1})]),a("li",null,[n(s,{to:"#_3-3-4-配置读写分离"},{default:l(()=>[e("3.3.4.配置读写分离")]),_:1})])])]),a("li",null,[n(s,{to:"#_4-1-搭建分片集群"},{default:l(()=>[e("4.1.搭建分片集群")]),_:1})]),a("li",null,[n(s,{to:"#_4-2-散列插槽"},{default:l(()=>[e("4.2.散列插槽")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_4-2-1-插槽原理"},{default:l(()=>[e("4.2.1.插槽原理")]),_:1})]),a("li",null,[n(s,{to:"#_4-2-1-小结"},{default:l(()=>[e("4.2.1.小结")]),_:1})])])]),a("li",null,[n(s,{to:"#_4-3-集群伸缩"},{default:l(()=>[e("4.3.集群伸缩")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_4-3-1-需求分析"},{default:l(()=>[e("4.3.1.需求分析")]),_:1})]),a("li",null,[n(s,{to:"#_4-3-2-创建新的-redis-实例"},{default:l(()=>[e("4.3.2.创建新的 redis 实例")]),_:1})]),a("li",null,[n(s,{to:"#_4-3-3-添加新节点到-redis"},{default:l(()=>[e("4.3.3.添加新节点到 redis")]),_:1})]),a("li",null,[n(s,{to:"#_4-3-4-转移插槽"},{default:l(()=>[e("4.3.4.转移插槽")]),_:1})])])]),a("li",null,[n(s,{to:"#_4-4-故障转移"},{default:l(()=>[e("4.4.故障转移")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_4-4-1-自动故障转移"},{default:l(()=>[e("4.4.1.自动故障转移")]),_:1})]),a("li",null,[n(s,{to:"#_4-4-2-手动故障转移"},{default:l(()=>[e("4.4.2.手动故障转移")]),_:1})])])]),a("li",null,[n(s,{to:"#_4-5-redistemplate-访问分片集群"},{default:l(()=>[e("4.5.RedisTemplate 访问分片集群")]),_:1})])])]),ra])}const ma=p(ia,[["render",da],["__file","index.html.vue"]]);export{ma as default};
