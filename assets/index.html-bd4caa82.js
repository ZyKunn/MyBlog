import{_ as i,r as e,o as l,c as u,a as n,e as a,w as p,b as s,d as o}from"./app-a153c100.js";const r="/MyBlog/assets/image-20220317101115398-7dd69e2a.png",d="/MyBlog/assets/image-20220316093416477-c8d16038.png",k="/MyBlog/assets/image-20220316093922199-5aa53145.png",m="/MyBlog/assets/image-20220316093957662-5da001be.png",v="/MyBlog/assets/getting.started.bpmn.process-50d289d6.png",g="/MyBlog/assets/image-20220317110902636-8ba4edc5.png",b="/MyBlog/assets/image-20220316100439048-a1b3a52b.png",f="/MyBlog/assets/image-20220316100532725-2c39bff0.png",_="/MyBlog/assets/image-20220316100611004-9d4d82a4.png",y="/MyBlog/assets/image-20220316100648362-903ad2c6.png",h="/MyBlog/assets/image-20220316102638015-8ea25e98.png",q="/MyBlog/assets/image-20220316110406801-bba0222a.png",E="/MyBlog/assets/image-20220316111124019-65bbf519.png",I="/MyBlog/assets/image-20220316111253702-427308ee.png",T="/MyBlog/assets/image-20220316111913933-a73b464d.png",S="/MyBlog/assets/image-20220316202904261-1b3d42c8.png",D="/MyBlog/assets/image-20220316203036602-91edecce.png",w="/MyBlog/assets/image-20220316203111301-94963797.png",R="/MyBlog/assets/image-20220316203237316-dd7348a8.png",P="/MyBlog/assets/image-20220316203454281-a467a356.png",A="/MyBlog/assets/image-20220316211319931-745146f0.png",C="/MyBlog/assets/image-20220316211405001-484dade0.png",M="/MyBlog/assets/image-20220316211518520-fbcb7371.png",N="/MyBlog/assets/image-20220316211622115-ad6bd494.png",x="/MyBlog/assets/image-20220316211651195-e5ec5099.png",B="/MyBlog/assets/image-20220316211729581-90701fdf.png",U="/MyBlog/assets/image-20220316211802548-03fbc839.png",j="/MyBlog/assets/image-20220316212008477-945d2666.png",O="/MyBlog/assets/image-20220316212418899-a0d6c8ef.png",F="/MyBlog/assets/image-20220316212605146-e82d5fba.png",L="/MyBlog/assets/image-20220316212720767-25d9e75f.png",H="/MyBlog/assets/image-20220316214339678-08561853.png",J="/MyBlog/assets/image-20220316214430644-225ed0ce.png",Y="/MyBlog/assets/image-20220316214700887-e5bee6bf.png",K="/MyBlog/assets/image-20220316214808400-32ddc298.png",X="/MyBlog/assets/image-20220316214256235-4cd33901.png",V="/MyBlog/assets/image-20220316215805503-beda088b.png",G="/MyBlog/assets/image-20220316215900052-f2adc180.png",z="/MyBlog/assets/image-20220316215945236-6e43f713.png",Q="/MyBlog/assets/image-20220316220121734-cc3bc205.png",Z="/MyBlog/assets/image-20220318102128672-f93c02dd.png",W="/MyBlog/assets/image-20220318102224330-58ee114f.png",$="/MyBlog/assets/image-20220318102255188-038e8ca9.png",nn="/MyBlog/assets/image-20220318102325924-0d060eca.png",sn="/MyBlog/assets/image-20220318102446699-798b22e9.png",an="/MyBlog/assets/image-20220318102609807-2561b748.png",tn="/MyBlog/assets/image-20220318102707368-fc3ceb7d.png",pn="/MyBlog/assets/image-20220318102734238-597e33a7.png",en="/MyBlog/assets/image-20220318102817782-b023a4e3.png",on="/MyBlog/assets/image-20220318102859814-c61dfb8f.png",cn="/MyBlog/assets/image-20220318101239742-4d925c4a.png",ln="/MyBlog/assets/image-20220318101346692-30c70bb3.png",un="/MyBlog/assets/image-20220318101639424-0a64eb62.png",rn="/MyBlog/assets/image-20220318101611564-48220a4b.png",dn="/MyBlog/assets/image-20220318101810272-5e91d168.png",kn="/MyBlog/assets/image-20220318103413285-515f9957.png",mn="/MyBlog/assets/image-20220318103518807-646266e3.png",vn="/MyBlog/assets/image-20220318104517967-ece2e6be.png",gn="/MyBlog/assets/image-20220318104614784-83aaab39.png",bn="/MyBlog/assets/image-20220318104703306-7c05fd1c.png",fn="/MyBlog/assets/image-20220318104735714-20487963.png",_n="/MyBlog/assets/image-20220318104811812-49246d35.png",yn="/MyBlog/assets/image-20220318105045345-bc604b77.png",hn="/MyBlog/assets/image-20220318105258331-8fd454d6.png",qn="/MyBlog/assets/image-20220318105315908-1d8869a0.png",En="/MyBlog/assets/image-20220318105336107-2390a3ab.png",In="/MyBlog/assets/image-20220318105420011-0fda49b7.png",Tn="/MyBlog/assets/image-20220318105444672-4e0e88a2.png",Sn="/MyBlog/assets/image-20220318105646273-9eaf319f.png",Dn="/MyBlog/assets/image-20220318105727192-f019bb03.png",wn="/MyBlog/assets/image-20220318105808830-68988008.png",Rn="/MyBlog/assets/image-20220318105848185-5976e983.png",Pn="/MyBlog/assets/image-20220319113106848-97630384.png",An="/MyBlog/assets/image-20220319113139646-5f2192cd.png",Cn="/MyBlog/assets/image-20220319114011806-120020b9.png",Mn="/MyBlog/assets/image-20220319114053252-9c829910.png",Nn="/MyBlog/assets/image-20220319114210012-35664424.png",xn="/MyBlog/assets/image-20220319223019186-438498e7.png",Bn="/MyBlog/assets/image-20220320103803308-89d63c33.png",Un="/MyBlog/assets/image-20220320103929543-8ec67fba.png",jn="/MyBlog/assets/image-20230705184623096-362ba3a5.png",On="/MyBlog/assets/image-20220320104157816-4aaec574.png",Fn="/MyBlog/assets/image-20220321210010518-b1c0db74.png",Ln="/MyBlog/assets/image-20220321211858122-9f154eff.png",Hn="/MyBlog/assets/image-20220322133108405-8a8d57c4.png",Jn="/MyBlog/assets/image-20220322133219534-69793221.png",Yn="/MyBlog/assets/image-20220322133307195-9f24f1ac.png",Kn="/MyBlog/assets/image-20220322133335326-c11193cb.png",Xn="/MyBlog/assets/image-20220322133406398-01dcbf21.png",Vn="/MyBlog/assets/image-20220322133439827-b4c07618.png",Gn="/MyBlog/assets/image-20220322133501720-317aa219.png",zn="/MyBlog/assets/image-20220322135040119-f262acb1.png",Qn="/MyBlog/assets/image-20220322135125703-8609d4af.png",Zn="/MyBlog/assets/image-20220322135204021-80e6e2dd.png",Wn="/MyBlog/assets/image-20220322135605252-9c6fd1f8.png",$n="/MyBlog/assets/image-20220322135636841-a53ecd37.png",ns="/MyBlog/assets/image-20220322135659671-db4fcc4e.png",ss="/MyBlog/assets/image-20220322135719104-fcccbb02.png",as="/MyBlog/assets/image-20220322141800554-e2598113.png",ts="/MyBlog/assets/image-20220322141825065-927f7ecd.png",ps="/MyBlog/assets/image-20220322141717826-7027a403.png",es="/MyBlog/assets/image-20220322141855401-05612749.png",os="/MyBlog/assets/image-20220322141912602-17d5d9b6.png",cs="/MyBlog/assets/image-20220322142609163-5bff885e.png",is="/MyBlog/assets/image-20220322142650699-17e300b7.png",ls="/MyBlog/assets/image-20220322142756867-a3e077b8.png",us={},rs=n("h1",{id:"🎐flowable-入门-基础篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🎐flowable-入门-基础篇","aria-hidden":"true"},"#"),s(" 🎐Flowable 入门-基础篇")],-1),ds=n("hr",null,null,-1),ks={class:"table-of-contents"},ms=o('<h1 id="最新-flowable-工作流教程" tabindex="-1"><a class="header-anchor" href="#最新-flowable-工作流教程" aria-hidden="true">#</a> 最新 Flowable 工作流教程</h1><h1 id="一、flowable-介绍" tabindex="-1"><a class="header-anchor" href="#一、flowable-介绍" aria-hidden="true">#</a> 一、Flowable 介绍</h1><p>  Flowable 是 BPMN 的一个基于 java 的软件实现，不过 Flowable 不仅仅包括 BPMN，还有 DMN 决策表和 CMMN Case 管理引擎，并且有自己的用户管理、微服务 API 等一系列功能，是一个服务平台。</p><p><img src="'+r+`" alt="image-20220317101115398"></p><h1 id="二、flowable-基础" tabindex="-1"><a class="header-anchor" href="#二、flowable-基础" aria-hidden="true">#</a> 二、Flowable 基础</h1><p>官方手册：https://tkjohn.github.io/flowable-userguide/#_introduction</p><h2 id="_1-创建-processengine" tabindex="-1"><a class="header-anchor" href="#_1-创建-processengine" aria-hidden="true">#</a> 1.创建 ProcessEngine</h2><p>  创建一个基本的 maven 工程，可以是 Eclipse 也可以是其他 IDEA。然后添加两个依赖</p><ul><li>Flowable 流程引擎。使我们可以创建一个 ProcessEngine 流程引擎对象，并访问 Flowable API。</li><li>一个是 MySQL 的数据库驱动</li></ul><p>在<em>pom.xml</em>文件中添加下列行：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.flowable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flowable-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  然后创建一个普通的 Java 类，添加对应的 main 方法，首先要做的是初始化<strong>ProcessEngine</strong>流程引擎实例。这是一个线程安全的对象，因此通常只需要在一个应用中初始化一次。 <em>ProcessEngine</em>由<strong>ProcessEngineConfiguration</strong>实例创建。该实例可以配置与调整流程引擎的设置。 通常使用一个配置 XML 文件创建<em>ProcessEngineConfiguration</em>，但是（像在这里做的一样）也可以编程方式创建它。 <em>ProcessEngineConfiguration</em>所需的最小配置，是数据库 JDBC 连接：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  注意在 mysql8.0 中执行可能出现如下的错误</p><p><img src="`+d+`" alt="image-20220316093416477"></p><p>  出现这种情况只需要在 mysql 的连接字符串中添加上 nullCatalogMeansCurrent=true，设置为只查当前连接的 schema 库即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取流程引擎对象
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取  ProcessEngineConfiguration 对象(流程引擎配置对象)</span>
    <span class="token class-name">ProcessEngineConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置 相关的数据库的连接信息</span>
    configuration<span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果数据库中的表结构不存在就新建</span>
    configuration<span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过 ProcessEngineConfiguration 构建我们需要的 processEngine 对象(流程引擎对象)</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processEngine = &quot;</span> <span class="token operator">+</span> processEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),vs={href:"http://www.slf4j.org/",target:"_blank",rel:"noopener noreferrer"},gs=o(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  Log4j 需要一个配置文件。在<em>src/main/resources</em>文件夹下添加<em>log4j.properties</em>文件，并写入下列内容：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG, CA</span>

<span class="token key attr-name">log4j.appender.CA</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.ConsoleAppender</span>
<span class="token key attr-name">log4j.appender.CA.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span>
<span class="token key attr-name">log4j.appender.CA.layout.ConversionPattern</span><span class="token punctuation">=</span> <span class="token value attr-value">%d{hh:mm:ss,SSS} [%t] %-5p %c %x - %m%n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  重新运行应用。应该可以看到关于引擎启动与创建数据库表结构的提示日志：</p><p><img src="`+k+'" alt="image-20220316093922199"></p><p>  同时可以看到创建了相关的表结构在数据库中(34 张表)</p><p><img src="'+m+'" alt="image-20220316093957662"></p><p>  这样就得到了一个启动可用的流程引擎。接下来为它提供一个流程！</p><h2 id="_2-部署流程定义" tabindex="-1"><a class="header-anchor" href="#_2-部署流程定义" aria-hidden="true">#</a> 2.部署流程定义</h2><p>  接下来我们构建一个非常简单的请假流程，Flowable 引擎需要流程定义为 BPMN 2.0 格式，这是一个业界广泛接受的 XML 标准。 在 Flowable 术语中，我们将其称为一个<strong>流程定义(process definition)</strong>。一个<em>流程定义</em>可以启动多个<strong>流程实例(process instance)</strong>。<em>流程定义</em>可以看做是重复执行流程的蓝图。 在这个例子中，<em>流程定义</em>定义了请假的各个步骤，而一个<em>流程实例</em>对应某个雇员提出的一个请假申请。</p><p>  BPMN 2.0 存储为 XML，并包含可视化的部分：使用标准方式定义了每个步骤类型（人工任务，自动服务调用，等等）如何呈现，以及如何互相连接。这样 BPMN 2.0 标准使技术人员与业务人员能用双方都能理解的方式交流业务流程。</p><p>  我们要使用的流程定义为：</p><p><img src="'+v+`" alt="getting.started.bpmn.process"></p><p>  流程定义说明：</p><ul><li>我们假定启动流程需要提供一些信息，例如雇员名字、请假时长以及说明。当然，这些可以单独建模为流程中的第一步。 但是如果将它们作为流程的“输入信息”，就能保证只有在实际请求时才会建立一个流程实例。否则（将提交作为流程的第一步），用户可能在提交之前改变主意并取消，但流程实例已经创建了。 在某些场景中，就可能影响重要的指标（例如启动了多少申请，但还未完成），取决于业务目标。</li><li>左侧的圆圈叫做<strong>启动事件(start event)</strong>。这是一个流程实例的起点。</li><li>第一个矩形是一个<strong>用户任务(user task)</strong>。这是流程中用户操作的步骤。在这个例子中，经理需要批准或驳回申请</li><li>取决于经理的决定，<strong>排他网关(exclusive gateway)</strong> (带叉的菱形)会将流程实例路由至批准或驳回路径</li><li>如果批准，则需要将申请注册至某个外部系统，并跟着另一个用户任务，将经理的决定通知给申请人。当然也可以改为发送邮件。</li><li>如果驳回，则为雇员发送一封邮件通知他。</li></ul><p>  一般来说，这样的<em>流程定义</em>使用可视化建模工具建立，如 Flowable Designer(Eclipse)或 Flowable Web Modeler(Web 应用)。但在这里我们直接撰写 XML，以熟悉 BPMN 2.0 及其概念。</p><p>  与上面展示的流程图对应的 BPMN 2.0 XML 在下面显示。请注意这只包含了“流程部分”。如果使用图形化建模工具，实际的 XML 文件还将包含“可视化部分”，用于描述图形信息，如流程定义中各个元素的坐标（所有的图形化信息包含在 XML 的<em>BPMNDiagram</em>标签中，作为<em>definitions</em>标签的子元素）。</p><p>  将下面的 XML 保存在<em>src/main/resources</em>文件夹下名为<em>holiday-request.bpmn20.xml</em>的文件中。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>definitions</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.omg.org/spec/BPMN/20100524/MODEL<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>bpmndi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.omg.org/spec/BPMN/20100524/DI<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>omgdc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.omg.org/spec/DD/20100524/DC<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>omgdi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.omg.org/spec/DD/20100524/DI<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>flowable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://flowable.org/bpmn<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name">typeLanguage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name">expressionLanguage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/1999/XPath<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name">targetNamespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.flowable.org/processdef<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>process</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>holidayRequest<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Holiday Request<span class="token punctuation">&quot;</span></span> <span class="token attr-name">isExecutable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>startEvent</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>startEvent<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span> <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>startEvent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>approveTask<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>userTask</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>approveTask<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Approve or reject request<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span> <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>approveTask<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decision<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusiveGateway</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decision<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span> <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decision<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>externalSystemCall<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conditionExpression</span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tFormalExpression<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token cdata">&lt;![CDATA[
          \${approved}
        ]]&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>conditionExpression</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sequenceFlow</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span>  <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decision<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendRejectionMail<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conditionExpression</span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tFormalExpression<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token cdata">&lt;![CDATA[
          \${!approved}
        ]]&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>conditionExpression</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sequenceFlow</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceTask</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>externalSystemCall<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter holidays in external system<span class="token punctuation">&quot;</span></span>
                     <span class="token attr-name"><span class="token namespace">flowable:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.flowable.CallExternalSystemDelegate<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span> <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>externalSystemCall<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>holidayApprovedTask<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>userTask</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>holidayApprovedTask<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Holiday approved<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span> <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>holidayApprovedTask<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>approveEnd<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serviceTask</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendRejectionMail<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Send out rejection email<span class="token punctuation">&quot;</span></span>
                     <span class="token attr-name"><span class="token namespace">flowable:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.flowable.SendRejectionMail<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceFlow</span> <span class="token attr-name">sourceRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendRejectionMail<span class="token punctuation">&quot;</span></span> <span class="token attr-name">targetRef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rejectEnd<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endEvent</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>approveEnd<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>endEvent</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rejectEnd<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>process</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>definitions</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  现在我们已经有了流程 BPMN 2.0 XML 文件，下来需要将它***部署(deploy)***到引擎中。<em>部署</em>一个流程定义意味着：</p><ul><li>流程引擎会将 XML 文件存储在数据库中，这样可以在需要的时候获取它</li><li>流程定义转换为内部的、可执行的对象模型，这样使用它就可以启动<em>流程实例</em>。</li></ul><p><img src="`+g+`" alt="image-20220317110902636"></p><p>  将流程定义<em>部署</em>至 Flowable 引擎，需要使用<em>RepositoryService</em>，其可以从<em>ProcessEngine</em>对象获取。使用<em>RepositoryService</em>，可以通过 XML 文件的路径创建一个新的<em>部署(Deployment)</em>，并调用*deploy()*方法实际执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 部署流程
     * 部署完成后 可以在 表中看到记录 act_re_deployment  act_ge_bytearray  act_re_procdef
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
        <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取流程引擎对象</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 部署流程 获取RepositoryService对象</span>
        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Deployment</span> deployment <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建Deployment对象</span>
                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span><span class="token string">&quot;holiday-request.bpmn20.xml&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 添加流程部署文件</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;请求流程&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 设置部署流程的名称</span>
                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行部署操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deployment.getId() = &quot;</span> <span class="token operator">+</span> deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取该流程名称</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deployment.getName() = &quot;</span> <span class="token operator">+</span> deployment<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取该流程ID</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 输出结果：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>deploy.getId() = 2501
deploy.getName() = 请求流程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>  然后执行该方法日志操作成功：</p><p><img src="`+b+'" alt="image-20220316100439048"></p><p>  在后台表结构也可以看到相关的信息</p><p>act_re_deployment: 流程定义部署表，每部署一次就增加一条记录</p><p><img src="'+f+'" alt="image-20220316100532725"></p><p>act_re_procdef ：流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p><p><img src="'+_+'" alt="image-20220316100611004"></p><p>act_ge_bytearray ：流程资源表，流程部署的 bpmn 文件和 png 图片会保存在该表中</p><p><img src="'+y+`" alt="image-20220316100648362"></p><p>  我们现在可以通过 API 查询验证流程定义已经部署在引擎中（并学习一些 API）。通过<em>RepositoryService</em>创建的<em>ProcessDefinitionQuery</em>对象实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 查看流程定义
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeployQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
    <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取流程引擎对象</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 部署流程 获取RepositoryService对象</span>
    <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取流程定义对象</span>
    <span class="token class-name">ProcessDefinition</span> processDefinition <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createProcessDefinitionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">deploymentId</span><span class="token punctuation">(</span><span class="token string">&quot;2501&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getId() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getName() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getDeploymentId() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getDeploymentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getDescription() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>processDefinition.getId() = holidayRequest:2:2503
processDefinition.getName() = Holiday Request
processDefinition.getDeploymentId() = 2501
processDefinition.getDescription() = null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 查询流程定义的信息
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeployQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();
        ProcessDefinition processDefinition = processDefinitionQuery.deploymentId(&quot;1&quot;).singleResult();*/</span>

        <span class="token comment">// 获取流程定义 也可以链式编程</span>
        <span class="token class-name">ProcessDefinition</span> processDefinition <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createProcessDefinitionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deploymentId</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 部署id</span>
                <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取一个结果集</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getDeploymentId() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getDeploymentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 流程部署ID</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getName() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 部署名称</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getDescription() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 部署描述</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processDefinition.getId() = &quot;</span> <span class="token operator">+</span> processDefinition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 流程定义ID</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>processDefinition.getDeploymentId() = 1
processDefinition.getName() = 请假流程
processDefinition.getDescription() = null
processDefinition.getId() = holidayRequest:1:3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-启动流程实例" tabindex="-1"><a class="header-anchor" href="#_3-启动流程实例" aria-hidden="true">#</a> 3.启动流程实例</h2><p>  现在已经在流程引擎中<em>部署</em>了流程定义，因此可以使用这个<em>流程定义</em>作为“模板”启动<em>流程实例</em>。</p><p><img src="`+h+`" alt="image-20220316102638015"></p><p>  要启动流程实例，需要提供一些初始化<em>流程变量</em>。一般来说，可以通过呈现给用户的表单，或者在流程由其他系统自动触发时通过 REST API，来获取这些变量。在这个例子里，我们简化直接在代码中定义了，我们使用<em>RuntimeService</em>启动一个<em>流程实例</em>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 启动流程实例
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
    <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取流程引擎对象</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动流程实例通过 RuntimeService 对象</span>
    <span class="token class-name">RuntimeService</span> runtimeService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRuntimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 构建流程变量</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 谁申请请假</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;nrOfHolidays&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请几天假</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;工作累了，想出去玩玩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请假的原因</span>
    <span class="token comment">// 启动流程实例，第一个参数是流程定义的id</span>
    <span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService
            <span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequest&quot;</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动流程实例</span>
    <span class="token comment">// 输出相关的流程实例信息</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程定义的ID：&quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程实例的ID：&quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前活动的ID：&quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功，输出结果如下：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>流程定义的ID：holidayRequest:2:2503
流程实例的ID：5001
当前活动的ID：null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的流程实例 ID 为：5001</p><p>启动流程实例涉及到的表结构：</p><ul><li>act_hi_actinst 流程实例执行历史</li><li>act_hi_identitylink 流程的参与用户的历史信息</li><li>act_hi_procinst 流程实例历史信息</li><li>act_hi_taskinst 流程任务历史信息</li><li>act_ru_execution 流程执行信息</li><li>act_ru_identitylink 流程的参与用户信息</li><li>act_ru_task 任务信息</li></ul><h2 id="_4-查看任务" tabindex="-1"><a class="header-anchor" href="#_4-查看任务" aria-hidden="true">#</a> 4.查看任务</h2><p>  上面员工发起了一个请假流程，接下来就会流转到总经理这儿来处理，之前我们没有指定经理这的处理人，我们可以加一个</p><p><img src="`+q+`" alt="image-20220316110406801"></p><p>  然后我们来查看下 lisi 的任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 查看任务
*/</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
<span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取流程引擎对象</span>
<span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取任务服务对象</span>
<span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取查询</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequestNew&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Task</span> task <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getProcessDefinitionId() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 流程定义的主键</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getName() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 任务名称</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getAssignee() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 任务代理人（受理人）</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getDescription() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务的描述</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getId() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 任务的ID</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>task.getProcessDefinitionId() = holidayRequestNew:1:10003
task.getId() = 12508
task.getAssignee() = lisi
task.getName() = Approve or reject request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-完成任务" tabindex="-1"><a class="header-anchor" href="#_5-完成任务" aria-hidden="true">#</a> 5.完成任务</h2><p>  现在李四这个角色可以来完成当前的任务了</p><p><img src="`+E+'" alt="image-20220316111124019"></p><p>  在此处我们直接解决掉这个请假，然后会走发送拒绝邮件的流程，这块我们需要用到 JavaDelegate 来触发。</p><p><img src="'+I+`" alt="image-20220316111253702"></p><p>我们定义这样一个 Java 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendRejectionMail</span> <span class="token keyword">implements</span> <span class="token class-name">JavaDelegate</span> <span class="token punctuation">{</span>
<span class="token doc-comment comment">/**
 * 触发发送邮件的操作
 * <span class="token keyword">@param</span> <span class="token parameter">delegateExecution</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">DelegateExecution</span> delegateExecution<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请假被拒绝,,,安心工作吧&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后来完成任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 完成任务
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCompleteTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
    <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取流程引擎对象</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取任务服务对象</span>
    <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取任务</span>
    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequestNew&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加流程变量(参数)</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approved&quot;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拒绝请假</span>
    <span class="token comment">// 完成任务</span>
    taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以看到 JavaDelegate 触发了</p><p><img src="`+T+`" alt="image-20220316111913933"></p><h2 id="_6-流程的删除" tabindex="-1"><a class="header-anchor" href="#_6-流程的删除" aria-hidden="true">#</a> 6.流程的删除</h2><p>  有些流程已经没有用了，我们需要删除掉，其实也非常简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 删除流程
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
        <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取流程引擎对象</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 删除部署的流程 第一个参数是 id  如果部署的流程启动了就不允许删除了(报错)</span>
        <span class="token comment">// repositoryService.deleteDeployment(&quot;2501&quot;);</span>
        <span class="token comment">// 第二个参数是级联删除，如果流程启动了 相关的任务也会一并会被删除掉 (强制删除)</span>
        repositoryService<span class="token punctuation">.</span><span class="token function">deleteDeployment</span><span class="token punctuation">(</span><span class="token string">&quot;2501&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-查看历史信息" tabindex="-1"><a class="header-anchor" href="#_7-查看历史信息" aria-hidden="true">#</a> 7.查看历史信息</h2><p>  选择使用 Flowable 这样的流程引擎的原因之一，是它可以自动存储所有流程实例的<strong>审计数据</strong>或<strong>历史数据</strong>。这些数据可以用于创建报告，深入展现组织运行的情况，瓶颈在哪里，等等。</p><p>  例如，如果希望显示流程实例已经执行的时间，就可以从<em>ProcessEngine</em>获取<em>HistoryService</em>，并创建*历史活动(historical activities)*的查询。在下面的代码片段中，可以看到我们添加了一些额外的过滤条件：</p><ul><li>只选择一个特定流程实例的活动</li><li>只选择已完成的活动</li></ul><p>  结果按照结束时间排序，代表其执行顺序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 查看历史
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
    <span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取流程引擎对象</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 获取历史服务</span>
    <span class="token class-name">HistoryService</span> historyService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getHistoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取历史活动实例</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoricActivityInstance</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> historyService<span class="token punctuation">.</span><span class="token function">createHistoricActivityInstanceQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequestNew:1:10003&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 定义流程ID</span>
            <span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">// 查询的历史记录的状态是已经完成</span>
            <span class="token punctuation">.</span><span class="token function">orderByHistoricActivityInstanceEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">// 指定排序的字段和顺序（这里是示例结束时间升序）</span>
            <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 得到集合</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HistoricActivityInstance</span> historicActivityInstance <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>historicActivityInstance<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; took &quot;</span>
                <span class="token operator">+</span> historicActivityInstance<span class="token punctuation">.</span><span class="token function">getDurationInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; milliseconds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>startEvent took 1 milliseconds
approveTask took 837735 milliseconds
decision took 13 milliseconds
sendRejectionMail took 2 milliseconds
rejectEnd took 1 milliseconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了~flowable 的基本应用我们就先介绍到这里了。</p><h1 id="三、flowable-流程设计器" tabindex="-1"><a class="header-anchor" href="#三、flowable-流程设计器" aria-hidden="true">#</a> 三、Flowable 流程设计器</h1><h2 id="_1-eclipse-designer" tabindex="-1"><a class="header-anchor" href="#_1-eclipse-designer" aria-hidden="true">#</a> 1.Eclipse Designer</h2><p>  Flowable 提供了名为 Flowable Eclipse Designer 的 Eclipse 插件，可以用于图形化地建模、测试与部署 BPMN 2.0 流程。</p><h3 id="_1-1-下载安装-eclipse" tabindex="-1"><a class="header-anchor" href="#_1-1-下载安装-eclipse" aria-hidden="true">#</a> 1.1 下载安装 Eclipse</h3><p>  去 Eclipse 官网下载即可：https://www.eclipse.org/downloads/packages/release 注意 2020-09 后的版本不再支持 jdk8</p><p><img src="`+S+'" alt="image-20220316202904261"></p><p> 解压缩就可以了，然后进入解压缩的目录</p><p><img src="'+D+'" alt="image-20220316203036602"></p><p>  直接启动即可</p><p><img src="'+w+'" alt="image-20220316203111301"></p><p><img src="'+R+'" alt="image-20220316203237316"></p><h3 id="_1-2-安装-flowable-插件" tabindex="-1"><a class="header-anchor" href="#_1-2-安装-flowable-插件" aria-hidden="true">#</a> 1.2 安装 Flowable 插件</h3><p>  然后我们再安装下 Flowable 的插件，选择<strong>Help → Install New Software</strong>。在下图面板中，点击<em>Add</em>按钮，并填写下列字段</p><ul><li><strong>Name:</strong> Flowable BPMN 2.0 designer</li><li><strong>Location:</strong> http://www.flowable.org/designer/update/</li></ul><p><img src="'+P+'" alt="image-20220316203454281"></p><p>  这种在线更新的方式已经被官网移除了，操作不了</p><p><img src="'+A+'" alt="image-20220316211319931"></p><p>  这时我们就只能通过离线安装的方式来实现了，下载对应的离线文件</p><p><img src="'+C+'" alt="image-20220316211405001"></p><p>  安装步骤来操作，</p><p><img src="'+M+'" alt="image-20220316211518520"></p><p>然后继续：选择<strong>Help → Install New Software</strong></p><p><img src="'+N+'" alt="image-20220316211622115"></p><p><img src="'+x+'" alt="image-20220316211651195"></p><p>下一步</p><p><img src="'+B+'" alt="image-20220316211729581"></p><p>再下一步</p><p><img src="'+U+'" alt="image-20220316211802548"></p><p>然后 finish。弹出如下窗口</p><p><img src="'+j+'" alt="image-20220316212008477"></p><p>重启即可</p><h3 id="_1-3-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-3-创建项目" aria-hidden="true">#</a> 1.3 创建项目</h3><p>  然后我们就可以创建一个 Flowable Project 了</p><p><img src="'+O+'" alt="image-20220316212418899"></p><p>  然后我们可以在 src/mian/resources/ 的目录下创建对应的流程图了</p><p><img src="'+F+'" alt="image-20220316212605146"></p><p>  看到如下的界面说明插件安装成功了</p><p><img src="'+L+'" alt="image-20220316212720767"></p><h3 id="_1-4-创建流程图" tabindex="-1"><a class="header-anchor" href="#_1-4-创建流程图" aria-hidden="true">#</a> 1.4 创建流程图</h3><p>使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的面板，最终的效果</p><p><img src="'+H+'" alt="image-20220316214339678"></p><p>指 定流程的主键</p><p><img src="'+J+'" alt="image-20220316214430644"></p><p>指定任务的负责人</p><p>在 Properties 视图中指定每个任务节点的负责人</p><p><img src="'+Y+'" alt="image-20220316214700887"></p><p>创建请假单：zhangsan</p><p>审批请假单：lisi</p><p>当我们设置完成后保存文件，会同时生成 png 图片</p><p><img src="'+K+'" alt="image-20220316214808400"></p><p>注意：生成图片需要如下配置</p><p><img src="'+X+'" alt="image-20220316214256235"></p><h3 id="_1-5-部署流程" tabindex="-1"><a class="header-anchor" href="#_1-5-部署流程" aria-hidden="true">#</a> 1.5 部署流程</h3><p>  首先在 Eclipse 中生成 bar 文件，选中项目然后鼠标右击</p><p><img src="'+V+'" alt="image-20220316215805503"></p><p>然后会发现在项目的根目录下多了一个 deployment 文件夹，里面多了一个 MyProcess.bar 文件</p><p><img src="'+G+'" alt="image-20220316215900052"></p><p>然后我们就可以把这个 bar 文件拷贝到 IDEA 中，继续部署的流程</p><p><img src="'+z+`" alt="image-20220316215945236"></p><p>而部署的代码和前面没啥区别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.获取 ProcessEngine 对象</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取RepositoryService</span>
        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;MyHoliday.bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZipInputStream</span> zipInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.完成流程的部署操作 ZIP 或者 Bar文件</span>
        <span class="token class-name">Deployment</span> deploy <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token comment">// .addClasspathResource(&quot;MyHoliday.bar&quot;)// 关联要部署的流程文件</span>
                <span class="token punctuation">.</span><span class="token function">addZipInputStream</span><span class="token punctuation">(</span>zipInputStream<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;XXX公司请求流程&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 部署流程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getId() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getName() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后查看表结构，相关的信息就进去了</p><p><img src="`+Q+`" alt="image-20220316220121734"></p><p>完整的案例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bobo<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>history<span class="token punctuation">.</span></span><span class="token class-name">HistoricActivityInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span></span><span class="token class-name">StandaloneProcessEngineConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Deployment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">ProcessInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>flowable<span class="token punctuation">.</span>task<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Task</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipInputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>

    <span class="token class-name">ProcessEngineConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取  ProcessEngineConfiguration 对象</span>
        configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置 相关的数据库的连接信息</span>
        configuration<span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configuration<span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configuration<span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configuration<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果数据库中的表结构不存在就新建</span>
        configuration<span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 部署流程
     *
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.获取 ProcessEngine 对象</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取RepositoryService</span>
        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;MyHoliday.bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ZipInputStream</span> zipInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.完成流程的部署操作 ZIP 或者 Bar文件</span>
        <span class="token class-name">Deployment</span> deploy <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token comment">// .addClasspathResource(&quot;MyHoliday.bar&quot;)// 关联要部署的流程文件</span>
                <span class="token punctuation">.</span><span class="token function">addZipInputStream</span><span class="token punctuation">(</span>zipInputStream<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;XXX公司请求流程&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 部署流程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getId() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getName() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 启动流程实例
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 我们需要通过RuntimeService来启动流程实例</span>
        <span class="token class-name">RuntimeService</span> runtimeService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRuntimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动流程实例</span>
        <span class="token class-name">ProcessInstance</span> holidayRequest <span class="token operator">=</span> runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceById</span><span class="token punctuation">(</span><span class="token string">&quot;myProcess:1:25004&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequest.getProcessDefinitionId() = &quot;</span> <span class="token operator">+</span> holidayRequest<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequest.getActivityId() = &quot;</span> <span class="token operator">+</span> holidayRequest<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;holidayRequest.getId() = &quot;</span> <span class="token operator">+</span> holidayRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 测试任务查询
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;myProcess&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定查询的流程编程</span>
                <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 查询这个任务的处理人</span>
                <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Task</span> task <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getProcessDefinitionId() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getName() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getAssignee() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getDescription() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;task.getId() = &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 完成当前任务
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCompleteTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;myProcess&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建流程变量</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 完成任务</span>
            taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取流程任务的历史数据
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HistoryService</span> historyService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getHistoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoricActivityInstance</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> historyService<span class="token punctuation">.</span><span class="token function">createHistoricActivityInstanceQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">&quot;myProcess:1:25004&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查询的历史记录的状态是已经完成</span>
                <span class="token punctuation">.</span><span class="token function">orderByHistoricActivityInstanceEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指定排序的字段和顺序</span>
                <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HistoricActivityInstance</span> history <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span><span class="token function">getActivityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>history<span class="token punctuation">.</span><span class="token function">getAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;--&quot;</span>
                    <span class="token operator">+</span>history<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> history<span class="token punctuation">.</span><span class="token function">getDurationInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;毫秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-flowable-ui-应用" tabindex="-1"><a class="header-anchor" href="#_2-flowable-ui-应用" aria-hidden="true">#</a> 2.Flowable UI 应用</h2><p>  Flowable 提供了几个 web 应用，用于演示及介绍 Flowable 项目提供的功能：</p><ul><li>Flowable IDM: 身份管理应用。为所有 Flowable UI 应用提供单点登录认证功能，并且为拥有 IDM 管理员权限的用户提供了管理用户、组与权限的功能。</li><li>Flowable Modeler: 让具有建模权限的用户可以创建流程模型、表单、选择表与应用定义。</li><li>Flowable Task: 运行时任务应用。提供了启动流程实例、编辑任务表单、完成任务，以及查询流程实例与任务的功能。</li><li>Flowable Admin: 管理应用。让具有管理员权限的用户可以查询 BPMN、DMN、Form 及 Content 引擎，并提供了许多选项用于修改流程实例、任务、作业等。管理应用通过 REST API 连接至引擎，并与 Flowable Task 应用及 Flowable REST 应用一同部署。</li></ul><p>  所有其他的应用都需要 Flowable IDM 提供认证。每个应用的 WAR 文件可以部署在相同的 servlet 容器（如 Apache Tomcat）中，也可以部署在不同的容器中。由于每个应用使用相同的 cookie 进行认证，因此应用需要运行在相同的域名下。</p><h3 id="_2-1-安装部署" tabindex="-1"><a class="header-anchor" href="#_2-1-安装部署" aria-hidden="true">#</a> 2.1 安装部署</h3><p>下载 Tomcat：https://tomcat.apache.org/download-80.cgi 官网下载后解压缩到非中文目录即可，然后是下载 FlowableUI 的文件，在 Flowable6.6 之后把 FlowableUI 中提供的四个功能合并到了一起。</p><p><img src="`+Z+'" alt="image-20220318102128672"></p><p>然后把解压缩后的两个 war 包拷贝到 Tomcat 的解压缩的 webapps 目录下</p><p><img src="'+W+'" alt="image-20220318102224330"></p><p>Tomcat 目录：</p><p><img src="'+$+'" alt="image-20220318102255188"></p><h3 id="_2-2-启动服务" tabindex="-1"><a class="header-anchor" href="#_2-2-启动服务" aria-hidden="true">#</a> 2.2 启动服务</h3><p>  启动 Tomcat 服务，执行 startup.bat 文件</p><p><img src="'+nn+'" alt="image-20220318102325924"></p><p>如果启动中出现乱码修改 Tomcat 的 conf 目录下的 logging.properties 文件中的编码</p><p><img src="'+sn+'" alt="image-20220318102446699"></p><p>如果一闪而过则检查 jdk 的环境变量配置。启动成功后，在浏览器中访问 http://localhost:8080/flowable-ui, 默认的账号密码是 admin/test</p><p><img src="'+an+'" alt="image-20220318102609807"></p><h3 id="_2-3-用户管理" tabindex="-1"><a class="header-anchor" href="#_2-3-用户管理" aria-hidden="true">#</a> 2.3 用户管理</h3><p>  我们先在 <code>身份管理应用程序</code> 中创建用户并授权</p><p><img src="'+tn+'" alt="image-20220318102707368"></p><p>创建用户</p><p><img src="'+pn+'" alt="image-20220318102734238"></p><p>填写详细信息</p><p><img src="'+en+'" alt="image-20220318102817782"></p><p>授权管理</p><p><img src="'+on+'" alt="image-20220318102859814"></p><h3 id="_2-4-绘制流程" tabindex="-1"><a class="header-anchor" href="#_2-4-绘制流程" aria-hidden="true">#</a> 2.4 绘制流程</h3><p>创建新的流程</p><p><img src="'+cn+'" alt="image-20220318101239742"></p><p>流程图界面</p><p><img src="'+ln+'" alt="image-20220318101346692"></p><p>创建流程，分配处理人</p><p><img src="'+un+'" alt="image-20220318101639424"></p><p><img src="'+rn+'" alt="image-20220318101611564"></p><p>继续完成流程图的创建</p><p><img src="'+dn+'" alt="image-20220318101810272"></p><h3 id="_2-5-部署流程" tabindex="-1"><a class="header-anchor" href="#_2-5-部署流程" aria-hidden="true">#</a> 2.5 部署流程</h3><p>  绘制好的流程图，我们只需要一键导出即可</p><p><img src="'+kn+'" alt="image-20220318103413285"></p><p>下载下来后拷贝到项目的 resource 目录下即可</p><p><img src="'+mn+'" alt="image-20220318103518807"></p><p>然后就是正常的操作流程了</p><p><code>部署流程</code>--<code>查询流程定义的信息</code>--<code>删除流程定义</code>--<code>启动流程实例</code>--<code>任务查询</code>--<code>完成当前任务</code>--<code>获取流程任务的历史数据</code>等等（项目中的 Test03）</p><h3 id="_2-6-flowableui-演示" tabindex="-1"><a class="header-anchor" href="#_2-6-flowableui-演示" aria-hidden="true">#</a> 2.6 FlowableUI 演示</h3><h4 id="_2-6-1-部署流程" tabindex="-1"><a class="header-anchor" href="#_2-6-1-部署流程" aria-hidden="true">#</a> 2.6.1 部署流程</h4><p>  在 FlowableUI 中提供了演示程序 <code>该功能可以方便的更直观的看到程序的运转流程</code></p><p><img src="'+vn+'" alt="image-20220318104517967"></p><p>创建一个新的应用程序，并指定相关的信息</p><p><img src="'+gn+'" alt="image-20220318104614784"></p><p>创建应用后需要指定对应的流程图</p><p><img src="'+bn+'" alt="image-20220318104703306"></p><p><img src="'+fn+'" alt="image-20220318104735714"></p><p><img src="'+_n+'" alt="image-20220318104811812"></p><p>发布应用程序</p><p><img src="'+yn+'" alt="image-20220318105045345"></p><h4 id="_2-6-2-启动流程" tabindex="-1"><a class="header-anchor" href="#_2-6-2-启动流程" aria-hidden="true">#</a> 2.6.2 启动流程</h4><p>  发布了应用程序后我们就可以来启动流程了</p><p><img src="'+hn+'" alt="image-20220318105258331"></p><p><img src="'+qn+'" alt="image-20220318105315908"></p><p><img src="'+En+'" alt="image-20220318105336107"></p><p><img src="'+In+'" alt="image-20220318105420011"></p><p>点击显示图：</p><p><img src="'+Tn+'" alt="image-20220318105444672"></p><p>也就是可以看到当前是 user1 来处理，user1 登录后可以看到要处理的流程，user2 登录是看不到的。</p><p><img src="'+Sn+'" alt="image-20220318105646273"></p><p>点击完成后<code>流程</code>就向下一步流转了</p><p><img src="'+Dn+'" alt="image-20220318105727192"></p><p>这时再通过 user2 登录，就可以看到对应的代办的信息</p><p><img src="'+wn+'" alt="image-20220318105808830"></p><p><img src="'+Rn+`" alt="image-20220318105848185"></p><p>然后点击完成，那么整个流程就结束了</p><h1 id="四、flowable-进阶" tabindex="-1"><a class="header-anchor" href="#四、flowable-进阶" aria-hidden="true">#</a> 四、Flowable 进阶</h1><h2 id="_1-表结构讲解" tabindex="-1"><a class="header-anchor" href="#_1-表结构讲解" aria-hidden="true">#</a> 1.表结构讲解</h2><p>  工作流程的相关操作都是操作存储在对应的表结构中，为了能更好的弄清楚 Flowable 的实现原理和细节，我们有必要先弄清楚 Flowable 的相关表结构及其作用。在 Flowable 中的表结构在初始化的时候会创建五类表结构，具体如下：</p><ul><li><strong>ACT_RE</strong> ：&#39;RE&#39;表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li><li><strong>ACT_RU</strong>：&#39;RU&#39;表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable 只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li><li><strong>ACT_HI</strong>：&#39;HI&#39;表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li><li><strong>ACT_GE</strong>： GE 表示 general。 通用数据， 用于不同场景下</li><li><strong>ACT_ID:</strong> ’ID’表示 identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。</li></ul><p>具体的表结构的含义:</p><table><thead><tr><th><strong>表分类</strong></th><th><strong>表名</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>一般数据</td><td></td><td></td></tr><tr><td></td><td>[ACT_GE_BYTEARRAY]</td><td>通用的流程定义和流程资源</td></tr><tr><td></td><td>[ACT_GE_PROPERTY]</td><td>系统相关属性</td></tr><tr><td>流程历史记录</td><td></td><td></td></tr><tr><td></td><td>[ACT_HI_ACTINST]</td><td>历史的流程实例</td></tr><tr><td></td><td>[ACT_HI_ATTACHMENT]</td><td>历史的流程附件</td></tr><tr><td></td><td>[ACT_HI_COMMENT]</td><td>历史的说明性信息</td></tr><tr><td></td><td>[ACT_HI_DETAIL]</td><td>历史的流程运行中的细节信息</td></tr><tr><td></td><td>[ACT_HI_IDENTITYLINK]</td><td>历史的流程运行过程中用户关系</td></tr><tr><td></td><td>[ACT_HI_PROCINST]</td><td>历史的流程实例</td></tr><tr><td></td><td>[ACT_HI_TASKINST]</td><td>历史的任务实例</td></tr><tr><td></td><td>[ACT_HI_VARINST]</td><td>历史的流程运行中的变量信息</td></tr><tr><td>流程定义表</td><td></td><td></td></tr><tr><td></td><td>[ACT_RE_DEPLOYMENT]</td><td>部署单元信息</td></tr><tr><td></td><td>[ACT_RE_MODEL]</td><td>模型信息</td></tr><tr><td></td><td>[ACT_RE_PROCDEF]</td><td>已部署的流程定义</td></tr><tr><td>运行实例表</td><td></td><td></td></tr><tr><td></td><td>[ACT_RU_EVENT_SUBSCR]</td><td>运行时事件</td></tr><tr><td></td><td>[ACT_RU_EXECUTION]</td><td>运行时流程执行实例</td></tr><tr><td></td><td>[ACT_RU_IDENTITYLINK]</td><td>运行时用户关系信息，存储任务节点与参与者的相关信息</td></tr><tr><td></td><td>[ACT_RU_JOB]</td><td>运行时作业</td></tr><tr><td></td><td>[ACT_RU_TASK]</td><td>运行时任务</td></tr><tr><td></td><td>[ACT_RU_VARIABLE]</td><td>运行时变量表</td></tr><tr><td>用户用户组表</td><td></td><td></td></tr><tr><td></td><td>[ACT_ID_BYTEARRAY]</td><td>二进制数据表</td></tr><tr><td></td><td>[ACT_ID_GROUP]</td><td>用户组信息表</td></tr><tr><td></td><td>[ACT_ID_INFO]</td><td>用户信息详情表</td></tr><tr><td></td><td>[ACT_ID_MEMBERSHIP]</td><td>人与组关系表</td></tr><tr><td></td><td>[ACT_ID_PRIV]</td><td>权限表</td></tr><tr><td></td><td>[ACT_ID_PRIV_MAPPING]</td><td>用户或组权限关系表</td></tr><tr><td></td><td>[ACT_ID_PROPERTY]</td><td>属性表</td></tr><tr><td></td><td>[ACT_ID_TOKEN]</td><td>记录用户的 token 信息</td></tr><tr><td></td><td>[ACT_ID_USER]</td><td>用户表</td></tr></tbody></table><h2 id="_2-processengine-讲解-processenginetest" tabindex="-1"><a class="header-anchor" href="#_2-processengine-讲解-processenginetest" aria-hidden="true">#</a> 2.ProcessEngine 讲解（ProcessEngineTest）</h2><p><strong>初始化方式</strong></p><h3 id="_2-1-硬编码的方式" tabindex="-1"><a class="header-anchor" href="#_2-1-硬编码的方式" aria-hidden="true">#</a> 2.1 硬编码的方式</h3><p>  我们前面讲解案例的时候是通过 ProcessEngineConfiguration 这个配置类来加载的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span>
<span class="token class-name">ProcessEngineConfiguration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandaloneProcessEngineConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setJdbcUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setJdbcPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setJdbcDriver</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setDatabaseSchemaUpdate</span><span class="token punctuation">(</span><span class="token class-name">ProcessEngineConfiguration</span><span class="token punctuation">.</span><span class="token constant">DB_SCHEMA_UPDATE_TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取流程引擎对象</span>
<span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  这种方式会调用 buildProcessEngine()方法，里面的核心代码为：</p><p><img src="`+Pn+'" alt="image-20220319113106848"></p><p><img src="'+An+`" alt="image-20220319113139646"></p><h3 id="_2-2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-2-配置文件" aria-hidden="true">#</a> 2.2 配置文件</h3><p>  除了上面的硬编码的方式外，我们还可以在 resources 目录下创建一个<code>flowable.cfg.xml</code>文件，注意这个名称是固定的哦。内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>processEngineConfiguration<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbcUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/flow1?allowMultiQueries=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=UTC<span class="token entity named-entity" title="&amp;">&amp;amp;</span>nullCatalogMeansCurrent=true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbcDriver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbcUsername<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbcPassword<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>databaseSchemaUpdate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>asyncExecutorActivate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在上面的配置文件中配置相关的信息。我们在 Java 代码中就可以简化为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 加载默认的配置文件
 * flowable.cfg.xml（官方默认文件）
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processEngin02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProcessEngine</span> defaultProcessEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;defaultProcessEngine = &quot;</span> <span class="token operator">+</span> defaultProcessEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  可以看下 getDefaultProcessEngine 的源码，在里面最终还是执行了和硬编码一样的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ProcessEngine</span> <span class="token function">getProcessEngine</span><span class="token punctuation">(</span><span class="token class-name">String</span> processEngineName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 完成初始化操作</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> processEngines<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>processEngineName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  进入 init 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>processEngines <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Create new map to store process-engines if current map is null</span>
                processEngines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> resources <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                resources <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">&quot;flowable.cfg.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载flowable.cfg.xml配置文件</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowableIllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.class.path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Remove duplicated configuration URL&#39;s using set. Some</span>
            <span class="token comment">// classloaders may return identical URL&#39;s twice, causing duplicate</span>
            <span class="token comment">// startups</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> configUrls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                configUrls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> configUrls<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">URL</span> resource <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing process engine using configuration &#39;{}&#39;&quot;</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">initProcessEngineFromResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化ProcessEngine</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                resources <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">&quot;flowable-context.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在整合Spring的情况下加载该文件</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowableIllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;problem retrieving flowable-context.xml resources on the classpath: &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.class.path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">URL</span> resource <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing process engine using Spring configuration &#39;{}&#39;&quot;</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">initProcessEngineFromSpringResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从Spring的资源文件中完成ProcessEngine的初始化</span>
            <span class="token punctuation">}</span>

            <span class="token function">setInitialized</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Process engines already initialized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在源码中提供了单独使用好整合 Spring 的配置加载方式。再进入到 initProcessEngineFromResource(resource)方法中：</p><p><img src="`+Cn+'" alt="image-20220319114011806"></p><p><img src="'+Mn+'" alt="image-20220319114053252"></p><p><img src="'+Nn+`" alt="image-20220319114210012"></p><p>而且我们也可以看到 ProcessEngine 最终的实现是 ProcessEngineImpl 对象。</p><h3 id="_2-3-自定义配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义配置文件" aria-hidden="true">#</a> 2.3 自定义配置文件</h3><p>  最后我们如果要加载自定义名称的配置文件可以通过 ProcessEngineConfiguration 中的对应构造方法来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token class-name">ProcessEngineConfiguration</span> configuration <span class="token operator">=</span> <span class="token class-name">ProcessEngineConfiguration</span>
                <span class="token punctuation">.</span><span class="token function">createProcessEngineConfigurationFromResource</span><span class="token punctuation">(</span><span class="token string">&quot;flowable.cfg.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;processEngine = &quot;</span> <span class="token operator">+</span> processEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-servcie-服务接口" tabindex="-1"><a class="header-anchor" href="#_3-servcie-服务接口" aria-hidden="true">#</a> 3. Servcie 服务接口</h2><p>Service 是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表</p><p><img src="`+xn+`" alt="image-20220319223019186"></p><h3 id="_3-1-service-创建方式" tabindex="-1"><a class="header-anchor" href="#_3-1-service-创建方式" aria-hidden="true">#</a> 3.1 Service 创建方式</h3><p>通过 ProcessEngine 创建 Service</p><p>方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RuntimeService</span> runtimeService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRuntimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-service-总览" tabindex="-1"><a class="header-anchor" href="#_3-2-service-总览" aria-hidden="true">#</a> 3.2 Service 总览</h3><table><thead><tr><th>service 名称</th><th>service 作用</th></tr></thead><tbody><tr><td>RepositoryService</td><td>Flowable 的资源管理类</td></tr><tr><td>RuntimeService</td><td>Flowable 的流程运行管理类</td></tr><tr><td>TaskService</td><td>Flowable 的任务管理类</td></tr><tr><td>HistoryService</td><td>Flowable 的历史管理类</td></tr><tr><td>ManagerService</td><td>Flowable 的引擎管理类</td></tr></tbody></table><p>简单介绍：</p><p><strong>RepositoryService</strong></p><p>是 activiti 的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此 service 将流程定义文件的内容部署到计算机。</p><p>除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。</p><p>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</p><p>获得流程定义的 pojo 版本， 可以用来通过 java 解析流程，而不必通过 xml。</p><p><strong>RuntimeService</strong></p><p>Activiti 的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息</p><p><strong>TaskService</strong></p><p>Activiti 的任务管理类。可以从这个类中获取任务的信息。</p><p><strong>HistoryService</strong></p><p>Flowable 的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p><p><strong>ManagementService</strong></p><p>Activiti 的引擎管理类，提供了对 Flowable 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Flowable 系统的日常维护。</p><h2 id="_4-图标介绍" tabindex="-1"><a class="header-anchor" href="#_4-图标介绍" aria-hidden="true">#</a> 4.图标介绍</h2><p>  BPMN 2.0 是业务流程建模符号 2.0 的缩写。它由 Business Process Management Initiative 这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0 是使用一些<strong>符号</strong>来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。目前 BPMN2.0 是最新的版本，它用于在 BPM 上下文中进行布局和可视化的沟通。接下来我们先来了解在流程设计中常见的 符号。</p><p>BPMN2.0 的<strong>基本符合</strong>主要包含：</p><h3 id="_4-1-事件图标" tabindex="-1"><a class="header-anchor" href="#_4-1-事件图标" aria-hidden="true">#</a> 4.1 事件图标</h3><p>  在 Flowable 中的事件图标启动事件，边界事件,中间事件和结束事件.</p><p><img src="`+Bn+'" alt="image-20220320103803308"></p><h3 id="_4-2-活动-任务-图标" tabindex="-1"><a class="header-anchor" href="#_4-2-活动-任务-图标" aria-hidden="true">#</a> 4.2 活动(任务)图标</h3><p>  活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下:</p><p><img src="'+Un+'" alt="image-20220320103929543"></p><h3 id="_4-3-结构图标" tabindex="-1"><a class="header-anchor" href="#_4-3-结构图标" aria-hidden="true">#</a> 4.3 结构图标</h3><p>  结构图标可以看做是整个流程活动的结构，一个流程中可以包括子流程。常见的结构有：</p><p><img src="'+jn+'" alt="image-20230705184623096"></p><h3 id="_4-4-网关图标" tabindex="-1"><a class="header-anchor" href="#_4-4-网关图标" aria-hidden="true">#</a> 4.4 网关图标</h3><p>  网关用来处理决策，有几种常用网关需要了解：</p><p><img src="'+On+`" alt="image-20220320104157816"></p><h2 id="_5-流程部署详解" tabindex="-1"><a class="header-anchor" href="#_5-流程部署详解" aria-hidden="true">#</a> 5.流程部署详解</h2><h3 id="_5-1-部署实现" tabindex="-1"><a class="header-anchor" href="#_5-1-部署实现" aria-hidden="true">#</a> 5.1 部署实现</h3><p>  我们先来看下流程部署的具体过程。代码实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 部署流程
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Deployment</span> deploy <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span><span class="token string">&quot;holiday-request-new.bpmn20.xml&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;请假流程...&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token string">&quot;请假&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 分类</span>
            <span class="token punctuation">.</span><span class="token function">tenantId</span><span class="token punctuation">(</span><span class="token string">&quot;dpb&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 租户id</span>
            <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getId() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getName() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;deploy.getCategory() = &quot;</span> <span class="token operator">+</span> deploy<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-部署涉及表结构" tabindex="-1"><a class="header-anchor" href="#_5-2-部署涉及表结构" aria-hidden="true">#</a> 5.2 部署涉及表结构</h3><p>涉及到的三张表：</p><p>部署资源表：act_ge_bytearray</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>版本号</td><td></td></tr><tr><td>NAME_</td><td>名称</td><td>部署的文件名称，如：holiday-request-new.bpmn20.xml、holiday-request-new.bpmn20.png</td></tr><tr><td>DEPLOYMENT<em>ID</em></td><td>部署 ID</td><td></td></tr><tr><td>BYTES_</td><td>字节（二进制数据）</td><td></td></tr><tr><td>GENERATED_</td><td>是否系统生成</td><td>0 为用户上传，<br>1 为系统自动生成， 比如系统会 自动根据 xml 生 成 png</td></tr></tbody></table><p>部署 ID 表：act_re_deployment</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>NAME_</td><td>名称</td><td></td></tr><tr><td>CATEGORY_</td><td>分类</td><td></td></tr><tr><td>TENANT<em>ID</em></td><td>租户 ID</td><td></td></tr><tr><td>DEPLOY<em>TIME</em></td><td>部署时间</td><td></td></tr><tr><td>DERIVED<em>FROM</em></td><td>来源于</td><td></td></tr><tr><td>DERIVED<em>FROM_ROOT</em></td><td>来源于</td><td></td></tr><tr><td>ENGINE<em>VERSION</em></td><td>流程引擎的版本</td><td></td></tr></tbody></table><p>流程表：act_re_procdef</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>版本号</td><td></td></tr><tr><td>CATEGORY_</td><td>分类</td><td>流程定义的 Namespace 就是类别</td></tr><tr><td>NAME_</td><td>名称</td><td></td></tr><tr><td>KEY_</td><td>标识</td><td></td></tr><tr><td>VERSION_</td><td>版本</td><td></td></tr><tr><td>DEPLOYMENT<em>ID</em></td><td>部署 ID</td><td></td></tr><tr><td>RESOURCE<em>NAME</em></td><td>资源名称</td><td>流程 bpmn 文件名称</td></tr><tr><td>DGRM<em>RESOURCE_NAME</em></td><td>图片资源名称</td><td></td></tr><tr><td>DESCRIPTION_</td><td>描述</td><td></td></tr><tr><td>HAS<em>START_FORM_KEY</em></td><td>拥有开始表单标识</td><td>start 节点是否存在 formKey 0 否 1 是</td></tr><tr><td>HAS<em>GRAPHICAL_NOTATION</em></td><td>拥有图形信息</td><td></td></tr><tr><td>SUSPENSION<em>STATE</em></td><td>挂起状态</td><td>暂停状态 1 激活 2 暂停</td></tr><tr><td>TENANT<em>ID</em></td><td>租户 ID</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><blockquote><p>详细说明：</p><p>业务流程定义数据表。此表和 ACT_RE_DEPLOYMENT 是多对一的关系，即，一个部署的 bar 包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在 ACT_REPROCDEF 表内，每个流程定义的数据，都会对于 ACT_GE_BYTEARRAY 表内的一个资源文件和 PNG 图片文件。</p><p>和 ACT<em>GE_BYTEARRAY 的关联是通过程序用 ACT_GE_BYTEARRAY.NAME 与 ACT_RE_PROCDEF.NAME</em>完成的</p></blockquote><h3 id="_5-3-挂起和激活" tabindex="-1"><a class="header-anchor" href="#_5-3-挂起和激活" aria-hidden="true">#</a> 5.3 挂起和激活</h3><p>  部署的流程默认的状态为激活，如果我们暂时不想使用该定义的流程，那么可以挂起该流程。当然该流程定义下边所有的流程实例全部暂停。</p><p>流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下的所有的流程实例都将全部挂起暂停执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 挂起流程
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取流程引擎对象</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RepositoryService</span> repositoryService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRepositoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProcessDefinition</span> processDefinition <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createProcessDefinitionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">&quot;holiday:1:4&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取流程定义的状态</span>
        <span class="token keyword">boolean</span> suspended <span class="token operator">=</span> processDefinition<span class="token punctuation">.</span><span class="token function">isSuspended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;suspended = &quot;</span> <span class="token operator">+</span> suspended<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>suspended<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 表示被挂起</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;激活流程定义&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            repositoryService<span class="token punctuation">.</span><span class="token function">activateProcessDefinitionById</span><span class="token punctuation">(</span><span class="token string">&quot;holiday:1:4&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">// 表示激活状态</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;挂起流程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            repositoryService<span class="token punctuation">.</span><span class="token function">suspendProcessDefinitionById</span><span class="token punctuation">(</span><span class="token string">&quot;holiday:1:4&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的实现其实就是更新了流程定义表中的字段</p><p><img src="`+Fn+'" alt="image-20220321210010518"></p><p>而且通过 REV_字段来控制数据安全，也是一种乐观锁的体现了，如果要启动一个已经挂起的流程就会出现如下的错误</p><p><img src="'+Ln+`" alt="image-20220321211858122"></p><h2 id="_6-启动流程实例" tabindex="-1"><a class="header-anchor" href="#_6-启动流程实例" aria-hidden="true">#</a> 6.启动流程实例</h2><p>  然后我们来看看启动流程实例的过程。实现代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 启动流程实例
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取流程引擎对象</span>
        <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动流程实例通过 RuntimeService 对象</span>
        <span class="token class-name">RuntimeService</span> runtimeService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getRuntimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构建流程变量</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 谁申请请假</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;nrOfHolidays&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请几天假</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;工作累了，想出去玩玩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请假的原因</span>
        <span class="token comment">// 启动流程实例，第一个参数是流程定义的id</span>
        <span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService
                <span class="token punctuation">.</span><span class="token function">startProcessInstanceById</span><span class="token punctuation">(</span><span class="token string">&quot;holiday:1:4&quot;</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动流程实例</span>
        <span class="token comment">// 输出相关的流程实例信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程定义的ID：&quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程实例的ID：&quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前活动的ID：&quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  当我们启动了一个流程实例后，会在 ACT<em>RU</em>*对应的表结构中操作,运行时实例涉及的表结构共 10 张：</p><ul><li>ACT_RU_DEADLETTER_JOB 正在运行的任务表</li><li>ACT_RU_EVENT_SUBSCR 运行时事件</li><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_HISTORY_JOB 历史作业表</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息</li><li>ACT_RU_JOB 运行时作业表</li><li>ACT_RU_SUSPENDED_JOB 暂停作业表</li><li>ACT_RU_TASK 运行时任务表</li><li>ACT_RU_TIMER_JOB 定时作业表</li><li>ACT_RU_VARIABLE 运行时变量表</li></ul><p>  启动一个流程实例的时候涉及到的表有</p><ul><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息</li><li>ACT_RU_TASK 运行时任务表</li><li>ACT_RU_VARIABLE 运行时变量表</li></ul><p>ACT_RU_EXECUTION 表结构</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>版本号</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>BUSINESS<em>KEY</em></td><td>业务主键 ID</td><td></td></tr><tr><td>PARENT<em>ID</em></td><td>父执行流的 ID</td><td></td></tr><tr><td>PROC<em>DEF_ID</em></td><td>流程定义的数据 ID</td><td></td></tr><tr><td>SUPER<em>EXEC</em></td><td></td><td></td></tr><tr><td>ROOT<em>PROC_INST_ID</em></td><td>流程实例的 root 流程 id</td><td></td></tr><tr><td>ACT<em>ID</em></td><td>节点实例 ID</td><td></td></tr><tr><td>IS<em>ACTIVE</em></td><td>是否存活</td><td></td></tr><tr><td>IS<em>CONCURRENT</em></td><td>执行流是否正在并行</td><td></td></tr><tr><td>IS<em>SCOPE</em></td><td></td><td></td></tr><tr><td>IS<em>EVENT_SCOPE</em></td><td></td><td></td></tr><tr><td>IS<em>MI_ROOT</em></td><td></td><td></td></tr><tr><td>SUSPENSION<em>STATE</em></td><td>流程终端状态</td><td></td></tr><tr><td>CACHED<em>ENT_STATE</em></td><td></td><td></td></tr><tr><td>TENANT<em>ID</em></td><td>租户编号</td><td></td></tr><tr><td>NAME_</td><td></td><td></td></tr><tr><td>START<em>TIME</em></td><td>开始时间</td><td></td></tr><tr><td>START<em>USER_ID</em></td><td>开始的用户编号</td><td></td></tr><tr><td>LOCK<em>TIME</em></td><td>锁定时间</td><td></td></tr><tr><td>IS<em>COUNT_ENABLED</em></td><td></td><td></td></tr><tr><td>EVT<em>SUBSCR_COUNT</em></td><td></td><td></td></tr><tr><td>TASK<em>COUNT</em></td><td></td><td></td></tr><tr><td>JOB<em>COUNT</em></td><td></td><td></td></tr><tr><td>TIMER<em>JOB_COUNT</em></td><td></td><td></td></tr><tr><td>SUSP<em>JOB_COUNT</em></td><td></td><td></td></tr><tr><td>DEADLETTER<em>JOB_COUNT</em></td><td></td><td></td></tr><tr><td>VAR<em>COUNT</em></td><td></td><td></td></tr><tr><td>ID<em>LINK_COUNT</em></td><td></td><td></td></tr></tbody></table><p>创建流程实例后对应的表结构的数据</p><p><img src="`+Hn+'" alt="image-20220322133108405"></p><p><img src="'+Jn+'" alt="image-20220322133219534"></p><p>ACT_RU_TASK 运行时任务表</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>版本号</td><td></td></tr><tr><td>EXECUTION<em>ID</em></td><td>任务所在的执行流 ID</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>PROC<em>DEF_ID</em></td><td>流程定义数据 ID</td><td></td></tr><tr><td>NAME_</td><td>任务名称</td><td></td></tr><tr><td>PARENT<em>TASK_ID</em></td><td>父任务 ID</td><td></td></tr><tr><td>DESCRIPTION_</td><td>说明</td><td></td></tr><tr><td>TASK<em>DEF_KEY</em></td><td>任务定义的 ID 值</td><td></td></tr><tr><td>OWNER_</td><td>任务拥有人</td><td></td></tr><tr><td>ASSIGNEE_</td><td>被指派执行该任务的人</td><td></td></tr><tr><td>DELEGATION_</td><td>委托人</td><td></td></tr><tr><td>PRIORITY_</td><td>优先级</td><td></td></tr><tr><td>CREATE<em>TIME</em></td><td>创建时间</td><td></td></tr><tr><td>DUE<em>DATE</em></td><td>耗时</td><td></td></tr><tr><td>CATEGORY_</td><td>类别</td><td></td></tr><tr><td>SUSPENSION<em>STATE</em></td><td>是否挂起</td><td>1 代表激活 2 代表挂起</td></tr><tr><td>TENANT<em>ID</em></td><td>租户编号</td><td></td></tr><tr><td>FORM<em>KEY</em></td><td></td><td></td></tr><tr><td>CLAIM<em>TIME</em></td><td>拾取时间</td><td></td></tr></tbody></table><p>创建流程实例后对应的表结构的数据</p><p><img src="'+Yn+'" alt="image-20220322133307195"></p><p><img src="'+Kn+'" alt="image-20220322133335326"></p><p>ACT_RU_VARIABLE 运行时变量表</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>版本号</td><td></td></tr><tr><td>TYPE_</td><td>参数类型</td><td>可以是基本的类型，也可以用户自行扩展</td></tr><tr><td>NAME_</td><td>参数名称</td><td></td></tr><tr><td>EXECUTION<em>ID</em></td><td>参数执行 ID</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>TASK<em>ID</em></td><td>任务 ID</td><td></td></tr><tr><td>BYTEARRAY<em>ID</em></td><td>资源 ID</td><td></td></tr><tr><td>DOUBLE_</td><td>参数为 double，则保存在该字段中</td><td></td></tr><tr><td>LONG_</td><td>参数为 long，则保存在该字段中</td><td></td></tr><tr><td>TEXT_</td><td>用户保存文本类型的参数值</td><td></td></tr><tr><td>TEXT2_</td><td>用户保存文本类型的参数值</td><td></td></tr></tbody></table><p>创建流程实例后对应的表结构的数据</p><p><img src="'+Xn+'" alt="image-20220322133406398"></p><p><img src="'+Vn+'" alt="image-20220322133439827"></p><p>ACT_RU_IDENTITYLINK 运行时用户关系信息</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>版本号</td><td></td></tr><tr><td>GROUP<em>ID</em></td><td>用户组 ID</td><td></td></tr><tr><td>TYPE_</td><td>关系数据类型</td><td>assignee 支配人(组)、candidate 候选人(组)、owner 拥有人,participant 参与者</td></tr><tr><td>USER<em>ID</em></td><td>用户 ID</td><td></td></tr><tr><td>TASK<em>ID</em></td><td>任务 ID</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程定义 ID</td><td></td></tr><tr><td>PROC<em>DEF_ID</em></td><td>属性 ID</td><td></td></tr></tbody></table><p>创建流程实例后对应的表结构的数据:</p><p><img src="'+Gn+`" alt="image-20220322133501720"></p><h2 id="_7-处理流程" tabindex="-1"><a class="header-anchor" href="#_7-处理流程" aria-hidden="true">#</a> 7.处理流程</h2><p>  上面的流程已经流转到了 zhangsan 这个用户这里，然后可以开始审批了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取流程引擎对象</span>
    <span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">&quot;holiday:1:4&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加流程变量</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approved&quot;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拒绝请假</span>
    <span class="token comment">// 完成任务</span>
    taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在正常处理流程中涉及到的表结构</p><ul><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息</li><li>ACT_RU_TASK 运行时任务表</li><li>ACT_RU_VARIABLE 运行时变量表</li></ul><p>ACT_RU_TASK 运行时任务表 :会新生成一条记录</p><p><img src="`+zn+'" alt="image-20220322135040119"></p><p><img src="'+Qn+'" alt="image-20220322135125703"></p><p>ACT_RU_VARIABLE 运行时变量表:会记录新的流程变量</p><p><img src="'+Zn+`" alt="image-20220322135204021"></p><p>当然流程实例也可以挂起</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.获取ProcessEngine对象</span>
<span class="token class-name">ProcessEngine</span> engine <span class="token operator">=</span> <span class="token class-name">ProcessEngines</span><span class="token punctuation">.</span><span class="token function">getDefaultProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.获取RuntimeService</span>
<span class="token class-name">RuntimeService</span> runtimeService <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">getRuntimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3.获取流程实例对象</span>
<span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService<span class="token punctuation">.</span><span class="token function">createProcessInstanceQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span><span class="token string">&quot;25001&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4.获取相关的状态操作</span>
<span class="token keyword">boolean</span> suspended <span class="token operator">=</span> processInstance<span class="token punctuation">.</span><span class="token function">isSuspended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> id <span class="token operator">=</span> processInstance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>suspended<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 挂起--》激活</span>
    runtimeService<span class="token punctuation">.</span><span class="token function">activateProcessInstanceById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程定义：&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;，已激活&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">// 激活--》挂起</span>
    runtimeService<span class="token punctuation">.</span><span class="token function">suspendProcessInstanceById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程定义：&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;，已挂起&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动第二个流程实例后再查看相关的表结构时，对他们的关系理解会更加的清楚一些</p><p>启动一个新的流程实例对应的就会产生两条记录</p><p><img src="`+Wn+'" alt="image-20220322135605252"></p><p>IDENTITYLINK 中会记录每次流程操作的信息</p><p><img src="'+$n+'" alt="image-20220322135636841"></p><p><img src="'+ns+'" alt="image-20220322135659671"></p><p>流程变量数据，及时 key 相同，但是属于不同的流程实例相互间也是隔离的</p><p><img src="'+ss+`" alt="image-20220322135719104"></p><h2 id="_8-完成一个流程" tabindex="-1"><a class="header-anchor" href="#_8-完成一个流程" aria-hidden="true">#</a> 8.完成一个流程</h2><p>  然后我们把第一个流程处理完成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProcessEngine</span> processEngine <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">buildProcessEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> processEngine<span class="token punctuation">.</span><span class="token function">getTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">processDefinitionId</span><span class="token punctuation">(</span><span class="token string">&quot;holiday:1:4&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加流程变量</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approved&quot;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拒绝请假</span>
<span class="token comment">// 完成任务</span>
taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理完了一个工作流程后，我们来看看相关的表结构信息</p><p>首先我们会发现</p><ul><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息</li><li>ACT_RU_TASK 运行时任务表</li><li>ACT_RU_VARIABLE 运行时变量表</li></ul><p>这四张表中对应的数据都没有了，也就是这个流程已经不是运行中的流程了。然后在对应的历史表中我们可以看到相关的信息</p><ul><li><p>ACT_HI_ACTINST 历史的流程实例</p></li><li><p>ACT_HI_ATTACHMENT 历史的流程附件</p></li><li><p>ACT_HI_COMMENT 历史的说明性信息</p></li><li><p>ACT_HI_DETAIL 历史的流程运行中的细节信息</p></li><li><p>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</p></li><li><p>ACT_HI_PROCINST 历史的流程实例</p></li><li><p>ACT_HI_TASKINST 历史的任务实例</p></li><li><p>ACT_HI_VARINST 历史的流程运行中的变量信息</p></li></ul><p>在我们上面的处理流程的过程中设计到的历史表有</p><p>ACT_HI_ACTINST 历史的流程实例</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>PROC<em>DEF_ID</em></td><td>流程定义 ID</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>EXECUTION<em>ID</em></td><td>执行 ID</td><td></td></tr><tr><td>ACT<em>ID</em></td><td>节点实例 ID</td><td></td></tr><tr><td>TASK<em>ID</em></td><td>任务 ID</td><td></td></tr><tr><td>CALL<em>PROC_INST_ID</em></td><td>调用外部的流程实例 ID</td><td></td></tr><tr><td>ACT<em>NAME</em></td><td>节点名称</td><td></td></tr><tr><td>ACT<em>TYPE</em></td><td>节点类型</td><td></td></tr><tr><td>ASSIGNEE_</td><td>处理人</td><td></td></tr><tr><td>START<em>TIME</em></td><td>开始时间</td><td></td></tr><tr><td>END<em>TIME</em></td><td>结束时间</td><td></td></tr><tr><td>DURATION_</td><td>耗时</td><td></td></tr><tr><td>DELETE<em>REASON</em></td><td>删除原因</td><td></td></tr><tr><td>TENANT<em>ID</em></td><td>租户编号</td><td></td></tr></tbody></table><p><img src="`+as+'" alt="image-20220322141800554"></p><p><img src="'+ts+'" alt="image-20220322141825065"></p><p>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>GROUP<em>ID</em></td><td>组编号</td><td></td></tr><tr><td>TYPE_</td><td>类型</td><td></td></tr><tr><td>USER<em>ID</em></td><td>用户编号</td><td></td></tr><tr><td>TASK<em>ID</em></td><td>任务编号</td><td></td></tr><tr><td>CREATE<em>TIME</em></td><td>创建时间</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例编号</td><td></td></tr><tr><td>SCOPE<em>ID</em></td><td></td><td></td></tr><tr><td>SCOPE<em>TYPE</em></td><td></td><td></td></tr><tr><td>SCOPE<em>DEFINITION_ID</em></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><img src="'+ps+'" alt="image-20220322141717826"></p><p>ACT_HI_PROCINST 历史的流程实例</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>BUSINESS<em>KEY</em></td><td>业务主键</td><td></td></tr><tr><td>PROC<em>DEF_ID</em></td><td>属性 ID</td><td></td></tr><tr><td>START<em>TIME</em></td><td>开始时间</td><td></td></tr><tr><td>END<em>TIME</em></td><td>结束时间</td><td></td></tr><tr><td>DURATION_</td><td>耗时</td><td></td></tr><tr><td>START<em>USER_ID</em></td><td>起始人</td><td></td></tr><tr><td>START<em>ACT_ID</em></td><td>起始节点</td><td></td></tr><tr><td>END<em>ACT_ID</em></td><td>结束节点</td><td></td></tr><tr><td>SUPER<em>PROCESS_INSTANCE_ID</em></td><td>父流程实例 ID</td><td></td></tr><tr><td>DELETE<em>REASON</em></td><td>删除原因</td><td></td></tr><tr><td>TENANT<em>ID</em></td><td>租户编号</td><td></td></tr><tr><td>NAME_</td><td>名称</td><td></td></tr></tbody></table><p><img src="'+es+'" alt="image-20220322141855401"></p><p><img src="'+os+'" alt="image-20220322141912602"></p><p>ACT_HI_TASKINST 历史的任务实例</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>PROC<em>DEF_ID</em></td><td>流程定义 ID</td><td></td></tr><tr><td>TASK<em>DEF_KEY</em></td><td>任务定义的 ID 值</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>EXECUTION<em>ID</em></td><td>执行 ID</td><td></td></tr><tr><td>PARENT<em>TASK_ID</em></td><td>父任务 ID</td><td></td></tr><tr><td>NAME_</td><td>名称</td><td></td></tr><tr><td>DESCRIPTION_</td><td>说明</td><td></td></tr><tr><td>OWNER_</td><td>实际签收人 任务的拥有者</td><td>签收人（默认为空，只有在委托时才有值）</td></tr><tr><td>ASSIGNEE_</td><td>被指派执行该任务的人</td><td></td></tr><tr><td>START<em>TIME</em></td><td>开始时间</td><td></td></tr><tr><td>CLAIM<em>TIME</em></td><td>任务拾取时间</td><td></td></tr><tr><td>END<em>TIME</em></td><td>结束时间</td><td></td></tr><tr><td>DURATION_</td><td>耗时</td><td></td></tr><tr><td>DELETE<em>REASON</em></td><td>删除原因</td><td></td></tr><tr><td>PRIORITY_</td><td>优先级别</td><td></td></tr><tr><td>DUE<em>DATE</em></td><td>过期时间</td><td></td></tr><tr><td>FORM<em>KEY</em></td><td>节点定义的 formkey</td><td></td></tr><tr><td>CATEGORY_</td><td>类别</td><td></td></tr><tr><td>TENANT<em>ID</em></td><td>租户</td><td></td></tr></tbody></table><p><img src="'+cs+'" alt="image-20220322142609163"></p><p><img src="'+is+'" alt="image-20220322142650699"></p><p>ACT_HI_VARINST 历史的流程运行中的变量信息：流程变量虽然在任务完成后在流程实例表中会删除，但是在历史表中还是会记录的</p><table><thead><tr><th>字段</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td><td></td></tr><tr><td>PROC<em>INST_ID</em></td><td>流程实例 ID</td><td></td></tr><tr><td>EXECUTION<em>ID</em></td><td>指定 ID</td><td></td></tr><tr><td>TASK<em>ID</em></td><td>任务 ID</td><td></td></tr><tr><td>NAME_</td><td>名称</td><td></td></tr><tr><td>VAR<em>TYPE</em></td><td>参数类型</td><td></td></tr><tr><td>REV_</td><td>数据版本</td><td></td></tr><tr><td>BYTEARRAY<em>ID</em></td><td>字节表 ID</td><td></td></tr><tr><td>DOUBLE_</td><td>存储 double 类型数据</td><td></td></tr><tr><td>LONG_</td><td>存储 long 类型数据</td><td></td></tr><tr><td>.....</td><td></td><td></td></tr></tbody></table><p><img src="'+ls+'" alt="image-20220322142756867"></p><p>好了一个相对简单的流程处理涉及到的相关表结构内容就介绍完了</p>',383);function bs(fs,_s){const t=e("router-link"),c=e("ExternalLinkIcon");return l(),u("div",null,[rs,ds,n("nav",ks,[n("ul",null,[n("li",null,[a(t,{to:"#_1-创建-processengine"},{default:p(()=>[s("1.创建 ProcessEngine")]),_:1})]),n("li",null,[a(t,{to:"#_2-部署流程定义"},{default:p(()=>[s("2.部署流程定义")]),_:1})]),n("li",null,[a(t,{to:"#_3-启动流程实例"},{default:p(()=>[s("3.启动流程实例")]),_:1})]),n("li",null,[a(t,{to:"#_4-查看任务"},{default:p(()=>[s("4.查看任务")]),_:1})]),n("li",null,[a(t,{to:"#_5-完成任务"},{default:p(()=>[s("5.完成任务")]),_:1})]),n("li",null,[a(t,{to:"#_6-流程的删除"},{default:p(()=>[s("6.流程的删除")]),_:1})]),n("li",null,[a(t,{to:"#_7-查看历史信息"},{default:p(()=>[s("7.查看历史信息")]),_:1})]),n("li",null,[a(t,{to:"#_1-eclipse-designer"},{default:p(()=>[s("1.Eclipse Designer")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_1-1-下载安装-eclipse"},{default:p(()=>[s("1.1 下载安装 Eclipse")]),_:1})]),n("li",null,[a(t,{to:"#_1-2-安装-flowable-插件"},{default:p(()=>[s("1.2 安装 Flowable 插件")]),_:1})]),n("li",null,[a(t,{to:"#_1-3-创建项目"},{default:p(()=>[s("1.3 创建项目")]),_:1})]),n("li",null,[a(t,{to:"#_1-4-创建流程图"},{default:p(()=>[s("1.4 创建流程图")]),_:1})]),n("li",null,[a(t,{to:"#_1-5-部署流程"},{default:p(()=>[s("1.5 部署流程")]),_:1})])])]),n("li",null,[a(t,{to:"#_2-flowable-ui-应用"},{default:p(()=>[s("2.Flowable UI 应用")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_2-1-安装部署"},{default:p(()=>[s("2.1 安装部署")]),_:1})]),n("li",null,[a(t,{to:"#_2-2-启动服务"},{default:p(()=>[s("2.2 启动服务")]),_:1})]),n("li",null,[a(t,{to:"#_2-3-用户管理"},{default:p(()=>[s("2.3 用户管理")]),_:1})]),n("li",null,[a(t,{to:"#_2-4-绘制流程"},{default:p(()=>[s("2.4 绘制流程")]),_:1})]),n("li",null,[a(t,{to:"#_2-5-部署流程"},{default:p(()=>[s("2.5 部署流程")]),_:1})]),n("li",null,[a(t,{to:"#_2-6-flowableui-演示"},{default:p(()=>[s("2.6 FlowableUI 演示")]),_:1})])])]),n("li",null,[a(t,{to:"#_1-表结构讲解"},{default:p(()=>[s("1.表结构讲解")]),_:1})]),n("li",null,[a(t,{to:"#_2-processengine-讲解-processenginetest"},{default:p(()=>[s("2.ProcessEngine 讲解（ProcessEngineTest）")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_2-1-硬编码的方式"},{default:p(()=>[s("2.1 硬编码的方式")]),_:1})]),n("li",null,[a(t,{to:"#_2-2-配置文件"},{default:p(()=>[s("2.2 配置文件")]),_:1})]),n("li",null,[a(t,{to:"#_2-3-自定义配置文件"},{default:p(()=>[s("2.3 自定义配置文件")]),_:1})])])]),n("li",null,[a(t,{to:"#_3-servcie-服务接口"},{default:p(()=>[s("3. Servcie 服务接口")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_3-1-service-创建方式"},{default:p(()=>[s("3.1 Service 创建方式")]),_:1})]),n("li",null,[a(t,{to:"#_3-2-service-总览"},{default:p(()=>[s("3.2 Service 总览")]),_:1})])])]),n("li",null,[a(t,{to:"#_4-图标介绍"},{default:p(()=>[s("4.图标介绍")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_4-1-事件图标"},{default:p(()=>[s("4.1 事件图标")]),_:1})]),n("li",null,[a(t,{to:"#_4-2-活动-任务-图标"},{default:p(()=>[s("4.2 活动(任务)图标")]),_:1})]),n("li",null,[a(t,{to:"#_4-3-结构图标"},{default:p(()=>[s("4.3 结构图标")]),_:1})]),n("li",null,[a(t,{to:"#_4-4-网关图标"},{default:p(()=>[s("4.4 网关图标")]),_:1})])])]),n("li",null,[a(t,{to:"#_5-流程部署详解"},{default:p(()=>[s("5.流程部署详解")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_5-1-部署实现"},{default:p(()=>[s("5.1 部署实现")]),_:1})]),n("li",null,[a(t,{to:"#_5-2-部署涉及表结构"},{default:p(()=>[s("5.2 部署涉及表结构")]),_:1})]),n("li",null,[a(t,{to:"#_5-3-挂起和激活"},{default:p(()=>[s("5.3 挂起和激活")]),_:1})])])]),n("li",null,[a(t,{to:"#_6-启动流程实例"},{default:p(()=>[s("6.启动流程实例")]),_:1})]),n("li",null,[a(t,{to:"#_7-处理流程"},{default:p(()=>[s("7.处理流程")]),_:1})]),n("li",null,[a(t,{to:"#_8-完成一个流程"},{default:p(()=>[s("8.完成一个流程")]),_:1})])])]),ms,n("p",null,[s("  然后应用运行没有问题，但也没有在控制台提供有用的信息，只有一条消息提示日志没有正确配置。Flowable 使用"),n("a",vs,[s("SLF4J"),a(c)]),s("作为内部日志框架。在这个例子中，我们使用 log4j 作为 SLF4J 的实现。因此在 pom.xml 文件中添加下列依赖：")]),gs])}const hs=i(us,[["render",bs],["__file","index.html.vue"]]);export{hs as default};
