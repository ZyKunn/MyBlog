import{_ as e,r as c,o,c as l,a as n,e as t,w as p,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1605575692122-b041fb00.png",d="/MyBlog/assets/1605577558867-8889e590.png",r="/MyBlog/assets/1605580282627-7484c950.png",k="/MyBlog/assets/1605580763237-18247a37.png",m="/MyBlog/assets/1605580867046-aaff920f.png",v="/MyBlog/assets/1605582705525-12612e9f.png",b={},g=n("h1",{id:"_01-异常",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01-异常","aria-hidden":"true"},"#"),s(" 01 - 异常 😲")],-1),y={class:"table-of-contents"},h=i('<h2 id="错误与异常" tabindex="-1"><a class="header-anchor" href="#错误与异常" aria-hidden="true">#</a> 错误与异常</h2><p>java 中对于程序出现的异常情况分为两种类别：</p><ol><li>错误（Error）</li><li>异常（Exception）</li></ol><p><code>Error</code>错误通常是系统级别的问题，比如说 JVM 内存溢出(StackOverflowError),JVM 系统错误等，这些问题是程序员无法修复的问题，程序运行时出现的无法被程序员从业务上解决的问题，这些问题一般是系统级别的。错误不是我们关注的范畴</p><p><code>Exception</code>异常通常是程序再运行期间，或者编译期间由编译器抛出的一些，可以被程序员处理的代码上的问题，比如（NullPointerExcepotion/ArrayIndexOutOfBoundsException），异常是程序员开发中需要解决的问题</p><h3 id="throwable" tabindex="-1"><a class="header-anchor" href="#throwable" aria-hidden="true">#</a> Throwable</h3><p>Throwable 是 Java 中错误和异常的顶级父类，以下是 Throwable 和 Error,Exception 之间的关系</p><p><img src="'+u+'" alt="1605575692122"></p><blockquote><p>Java 中的所有错误从 Error 类继承，并且绝大多数类名称后缀以 Error 结尾</p><p>Java 中的所有异常从 Exception 类继承，都是以 Exception 作为后缀结尾</p></blockquote><h2 id="异常概述" tabindex="-1"><a class="header-anchor" href="#异常概述" aria-hidden="true">#</a> 异常概述</h2><p>Exception：异常，一般在程序运行期间，或者编译期间由编译器抛出的异常信息，这些异常情况可以由程序员进行处理（抛出，捕获）；java 中的异常根据类型划分又分为两种类型：</p><ul><li>运行时异常（RuntimeException）</li><li>检查异常（一般异常）</li></ul><h3 id="运行时异常" tabindex="-1"><a class="header-anchor" href="#运行时异常" aria-hidden="true">#</a> 运行时异常</h3><p>运行时异常一般在程序运行期间，出现了对应异常情况之后由 JVM 抛出，并且将异常的堆栈信息输出到控制台（或日志文件），java 中的所有运行时异常都是从<code>java.lang.RuntimeException</code>继承而来。常见的运行时异常：</p><table><thead><tr><th>异常类型</th><th>说明</th></tr></thead><tbody><tr><td>java.lang.ArithmeticException</td><td>算术异常（比如被零除）</td></tr><tr><td>java.lang.NullPointerException</td><td>空指针异常(调用方法，属性的对象为 null 时)</td></tr><tr><td>java.lang.ArrayIndexOutOfBoundsException</td><td>数组索引越界</td></tr><tr><td>java.lang.ClassCastException</td><td>类型转换异常</td></tr><tr><td>java.util.InputMismatchException</td><td>输入的数据类型不匹配读取的类型</td></tr></tbody></table><blockquote><p>运行时异常即程序运行时才会产生的异常</p></blockquote><h3 id="检查异常" tabindex="-1"><a class="header-anchor" href="#检查异常" aria-hidden="true">#</a> 检查异常</h3><p>检查异常也称之为一般异常，或者编译期异常，这种类型异常通常在编译期间由编译器提示需要进行显式的处理：</p><p><img src="'+d+`" alt="1605577558867"></p><p>常见的检查异常：</p><table><thead><tr><th>异常类型</th><th>说明</th></tr></thead><tbody><tr><td>java.lang.ClassNotFoundException</td><td>类未找到异常</td></tr><tr><td>java.io.FileNotFoundException</td><td>文件未找到异常</td></tr><tr><td>java.io.IOException</td><td>IO 异常（输入输出异常）</td></tr><tr><td>java.sql.SQLException</td><td>访问数据库的异常</td></tr><tr><td>java.text.ParseException</td><td>解析异常</td></tr></tbody></table><blockquote><p>检查异常是在程序编译时产生的</p></blockquote><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p>异常既然产生则有必要进行合理的处理，Java 中对于异常的处理分为两种方式：</p><ol><li>异常抛出（throw/throws）</li><li>异常捕获（try/catch/finally）</li></ol><p><strong>Java 程序中一旦出现异常，则出现异常问题的所在代码行之后的代码无法再执行</strong></p><h3 id="异常抛出" tabindex="-1"><a class="header-anchor" href="#异常抛出" aria-hidden="true">#</a> 异常抛出</h3><p>异常的抛出指的是将有可能出现的异常通过方法的结构向外抛出，交给下一级的调用者处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
	 * 	抛出异常
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ClassNotFoundException</span></span>
	 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Strin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抛出异常常见的关键字：</p><ul><li><strong>throws</strong>：用于方法的声明中，抛出<strong>有可能</strong>出现的异常</li><li><strong>throw</strong>：用于语句块中，抛出指定类型的异常对象，throw 一旦执行，则<strong>一定会</strong>出现该类型异常</li></ul><p>语法区别：</p><ul><li><p>throws</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>【修饰符】 返回值类型 方法名(【参数列表】) throws 异常类型名称{
    //方法体
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>
	<span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>throw</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>方法体{
    throw  异常类型对象
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//抛出异常对象</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><img src="`+r+`" alt="1605580282627"></p><h4 id="对于存在继承关系的异常抛出问题" tabindex="-1"><a class="header-anchor" href="#对于存在继承关系的异常抛出问题" aria-hidden="true">#</a> 对于存在继承关系的异常抛出问题</h4><p>父类的结构:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃东西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

    <span class="token comment">//编译错误</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>
		<span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于以上程序:</p><p>子类<code>Dog</code>对父类<code>Animal</code>中的方法<code>eat()</code>方法进行了重写，但是由于父类方法没有抛出任何的异常，此时子类无法进行任何检查的抛出，否则会不兼容父类方法定义，因此以上程序在子类中会出现编译错误</p><p><img src="`+k+'" alt="1605580763237"></p><p>解决方案有两种：</p><ol><li><p>子类方法中对异常捕获</p></li><li><p>在父类方法的声明上加上对应的异常类型抛出定义:<code>throws ClassNotFoundException</code></p></li></ol><p><img src="'+m+`" alt="1605580867046"></p><blockquote><p>父类方法可以抛出比子类方法抛出的范围更大的异常，比如直接<code>throws Exception</code></p></blockquote><p>注意事项:</p><p><strong>父类方法未抛出任何异常情况下，子类只能抛出运行时异常。</strong></p><p><strong>游离块和静态语句块中不能抛出任何异常，因为外界无法直接调用这两种语句块</strong></p></blockquote><h3 id="异常捕获" tabindex="-1"><a class="header-anchor" href="#异常捕获" aria-hidden="true">#</a> 异常捕获</h3><p>异常的捕获即，将有可能出现异常的代码片段使用<code>try</code>语句块进行包裹，然后使用<code>catch</code>语句块将有可能产生的异常类型进行捕获，并作出处理。</p><p>异常捕获常见的关键字：</p><ul><li><strong>try</strong></li><li><strong>catch</strong></li><li><strong>finally</strong></li></ul><p>语法结构:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try{
    //有可能出现异常的代码片段
}catch(异常类型 变量名){
    //处理异常
}finally{
    //不论是否出现异常，始终执行
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">&quot;a/test/details.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fileNotFound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;IO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>程序执行到 try 语句块，在执行期间如果出现了对应 catch 的异常类型，则直接进入 catch 语句块，如果 catch 语句块中没有合适的异常解决方案，则由 JVM 进行统一处理(打印异常的堆栈信息)</p></blockquote><h4 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h4><p>finally 一般用于异常捕获之后执行最终的处理工作，比如，清理资源，关闭流，关闭连接；finally 中的代码无论是否出现异常，始终会执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">//打开资源</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">//无论是否异常始终执行</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;关闭文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try，catch，finally 的组织方式可以有多种：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//方法一：</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">//方法二：</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">//方法三：</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">//方法四：</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>关于异常的常见面试题</strong></p><ol><li><strong>请你说出 final、finalize 和 finally 的区别？</strong></li></ol><p>final 是一个关键字用于修饰类，属性，方法</p><p>finalize 是 Object 类中提供的一个方法，用于在 jvm 对对象清理时，对于当前对象执行一些最终的处理工作的</p><p>finally 是异常中的语句块</p><ol start="2"><li><strong>java 中是否会存在内存溢出的问题？</strong>（指针）</li></ol><p>理论上 java 不会存在内存泄漏问题，因为 jvm 提供了 GC(垃圾回收：garbage collection)机制，会在适当的时候自动回收内存空间，不需要由程序员手动处理；但是如果使用第三方资源（比如：打开一个文件，打开了网络通道，打开数据库连接等【比如我们打开了某个文件了 没有关闭，就会删不掉该文件 或者转移不了该文件】）并且未及时的清理以及回收，将会导致内存泄漏。</p><ol start="3"><li><strong>异常处理中 finally 和 return 的结合使用？</strong></li></ol><p>如果 try 语句块中有使用 return，并且 try 语句块中没有任何异常时，程序首先会执行 finally 然后再执行 return;但是对于基本类型的数据，finally 的赋值是不会生效的，但是 finally 中操作引用类型的属性可以生效</p><p>注意：如果 try 语句块发生异常,则异常以下的代码都不会执行 直接进到 finally 了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//程序正常执行，返回 20；finally中的赋值无效</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;finally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//程序正常执行，返回对象中的name属性值被修改为“李四”；finally中的赋值生效</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> u<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="异常定位" tabindex="-1"><a class="header-anchor" href="#异常定位" aria-hidden="true">#</a> 异常定位</h3><p><img src="`+v+`" alt="1605582705525"></p><h2 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常" aria-hidden="true">#</a> 自定义异常</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>​ 以上我们已经熟悉了 java 中的异常分类以及处理方式，其中异常分类主要包含检查异常和运行时异常，但是以上所有异常都是有 JDK 预定义好的异常类型，比如：空指针，索引越界，类型转换失败等代码语法方面的异常，并没有与实际项目相关一些业务方面的异常，比如：订单创建失败，用户权限不足，余额不足等异常情况；</p><p>​ 因此，针对以上的需求，当预定的异常无法满足所有需要时，我们可以通过对 JDK 的异常进行扩展，<strong>自定义异常</strong>，以满足实际项目的需求。</p><h3 id="自定义异常的使用" tabindex="-1"><a class="header-anchor" href="#自定义异常的使用" aria-hidden="true">#</a> 自定义异常的使用</h3><p>​ java 中创建自定义异常十分简单，只需要对现有的异常类型，扩展即可，比如常见的方式为：继承 Exception，声明一个无参的以及一个包含字符串类型参数的构造器即可。<strong>异常的定义通常用于标记程序运行时的异常情况，并不需要在异常中进行任何的业务逻辑处理，因此自定义异常中也无需定义任何的方法。</strong></p><p><strong>案例:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义异常综合案例:</strong></p><blockquote><p>一有个银行账户 A 和账户 B，现在需要从账户 A 转账到账户 B，转账需要检查账户的余额是否足够,如果余额不足，则抛出一个 MoneyLessException，请实现！</p></blockquote><p><strong>账户类(Account.java)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span>

    <span class="token comment">//构造器（略）</span>
	<span class="token comment">//setter/getter（略）</span>
    <span class="token comment">//toString（略）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>账户管理类(AccountManager.java)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountManager</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 	将指定账户中的余额转移指定数目到另一个账户中
	 * <span class="token keyword">@param</span> <span class="token parameter">a1</span>  	账户A
	 * <span class="token keyword">@param</span> <span class="token parameter">a2</span> 	账户B
	 * <span class="token keyword">@param</span> <span class="token parameter">money</span> 需要转账的金额
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">MoneyLessException</span></span>
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Account</span> a1<span class="token punctuation">,</span><span class="token class-name">Account</span> a2<span class="token punctuation">,</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MoneyLessException</span> <span class="token punctuation">{</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//余额不足</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MoneyLessException</span><span class="token punctuation">(</span><span class="token string">&quot;余额不足：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		a1<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
		a2<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义异常类(MoneyLessException.java)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 	余额不足异常
 * <span class="token keyword">@author</span> mrchai
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyLessException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token class-name">MoneyLessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">MoneyLessException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试类（Test.java）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MoneyLessException</span> <span class="token punctuation">{</span>

		<span class="token class-name">Account</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Account</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token class-name">AccountManager</span> am <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		am<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用类之-bigdecimal-与-decimalformat" tabindex="-1"><a class="header-anchor" href="#常用类之-bigdecimal-与-decimalformat" aria-hidden="true">#</a> 常用类之 BigDecimal 与 DecimalFormat</h2><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal" aria-hidden="true">#</a> BigDecimal</h3><p>java.math.BigDecimal 类从 java.math.Number 类继承而来，用于表示精度较高的数值类型的封装类型，一般用于精度要求较高的程序中，比如银行账户的金额属性,</p><p><strong>常见构造器：</strong></p><ul><li>java.math.BigDecimal(String s)</li><li>java.math.BigDecimal(double d)</li><li>java.math.BigDecimal(long l)</li><li>java.math.BigDecimal(int i)</li></ul><p><strong>常见方法：</strong></p><ul><li>add(BigDecimal b)：与另一个 BigDecimal 执行相加运算</li><li>subtract(BigDecimal b)：与另一个 BigDecimal 执行相减运算</li><li>multiply(BigDecimal b)：与另一个 BigDecimal 执行相乘运算</li><li>divide(BigDecimal b)：与另一个 BigDecimal 执行相除运算</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
<span class="token comment">//		System.out.println(d1 + d2);</span>
<span class="token comment">//在涉及到一些敏感的浮点数运算时，不适合直接使用float和double，精度丢失</span>

<span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//相加 a + b =&gt;  a.add(b)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span><span class="token class-name">MathContext</span><span class="token punctuation">.</span><span class="token constant">DECIMAL128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//相减 a - b =&gt; a.subtract(b)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//相乘 a * b =&gt; a.multiply(b)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//相除 a / b =&gt; a.divide(b)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于相除运算的使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//当两个数值相除为无限循环数时会出现算术异常</span>
<span class="token comment">//向上取整</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span><span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">CEILING</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//向下取整</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span><span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">FLOOR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//向上保留指定位小数点</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_CEILING</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//向下保留指定位小数点</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_FLOOR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="numberformat-decimalformat" tabindex="-1"><a class="header-anchor" href="#numberformat-decimalformat" aria-hidden="true">#</a> NumberFormat &amp; DecimalFormat</h3><p><code>java.text.NumberFormat</code> 和<code>java.text.DecimalFormat</code>是用于进行数值格式化的类，可以对数值的显示位数进行格式化处理，以及对浮点数进行金额或者百分比的格式表现；DecimalFormat 是 NumberFormat 的子类。</p><p><code>java.text.NumberFormat</code>是一个抽象类，内部提供了几个静态方法用于直接获取 NumberFormat 对象，而这些静态方法的实现通过<code>java.text.DecimalFormat</code>实现。</p><p>NumberFormat 常见方法：</p><ul><li><strong>format(double d)</strong>：将一个 double 值按指定的格式转换为 String</li><li><strong>parse(String s)</strong>：将一个 String 类型的数值解析为 double 类型</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">150500.491987</span><span class="token punctuation">;</span>
<span class="token comment">//获取用于进行货币格式化（本地环境）的数值格式化对象</span>
<span class="token class-name">NumberFormat</span> fmt <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getCurrencyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将浮点数转换为字符串类型的固定格式</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//￥150,500.49</span>

<span class="token comment">//获取整数类型的格式化对象</span>
fmt <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getIntegerInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//150,500</span>

<span class="token comment">//获取标准的数值类型格式化对象（对于小数点最大保留后三位）</span>
fmt <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getNumberInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//150,500.492</span>

<span class="token comment">//获取进行百分比格式化的对象</span>
fmt <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getPercentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">0.456789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//46%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p>由于 NumberFormat 提供的方法可能无法满足一些个性化的格式需求，比如需要将 double 值转换为百分比，并保留小数点后两位，NumberFormat 中提供的格式化方法 getPersentInstence()只能保留整数位；因此，我们需要能够自定格式的工具，所以 java 中提供的 java.text.DecimalFormat 就能够满足需求了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建一个数值格式化对象</span>
<span class="token class-name">DecimalFormat</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;##.##%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">0.456789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 45.68%</span>

fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;\\u00A4##,###,###.#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">5423423467890.345</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//￥5,423,423,467,890.3</span>

<span class="token comment">//NumberFormat&amp;DecimalFormat不仅能够将double值按指定的格式格式化为String，</span>
<span class="token comment">//同时，也能将String类型表示的数字解析为需要的数值类型</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;50.67%&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//将以上字符串转换为double值   0.5067</span>
fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;##.##%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Number</span> num <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h2><p>​ 基于 BigDecimal 类实现微信红包算法的功能，比如设置红包总金额，然后设置需要生成的红包个数，为每个红包随机指定金额，最低不能低于 0.01 元,要求：</p><ol><li>每个红包金额随机指定</li><li>每个红包金额不能低于 0.01 元</li><li>要求每个红包的金额之和恰好等于总金额</li><li>如果平均每个红包的金额不足 0.01 元时抛出一个 RedPacketException，提示每个红包金额不能少于 0.01 元</li></ol><p>提示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
* @String total  总金额
* @int    count  红包个数
* @return 返回生成的所有红包金额集合
*/</span>
<span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span> <span class="token function">genRedPacket</span><span class="token punctuation">(</span><span class="token class-name">String</span> total<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98);function f(w,x){const a=c("router-link");return o(),l("div",null,[g,n("nav",y,[n("ul",null,[n("li",null,[t(a,{to:"#错误与异常"},{default:p(()=>[s("错误与异常")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#throwable"},{default:p(()=>[s("Throwable")]),_:1})])])]),n("li",null,[t(a,{to:"#异常概述"},{default:p(()=>[s("异常概述")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#运行时异常"},{default:p(()=>[s("运行时异常")]),_:1})]),n("li",null,[t(a,{to:"#检查异常"},{default:p(()=>[s("检查异常")]),_:1})])])]),n("li",null,[t(a,{to:"#异常处理"},{default:p(()=>[s("异常处理")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#异常抛出"},{default:p(()=>[s("异常抛出")]),_:1})]),n("li",null,[t(a,{to:"#异常捕获"},{default:p(()=>[s("异常捕获")]),_:1})]),n("li",null,[t(a,{to:"#异常定位"},{default:p(()=>[s("异常定位")]),_:1})])])]),n("li",null,[t(a,{to:"#自定义异常"},{default:p(()=>[s("自定义异常")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#概述"},{default:p(()=>[s("概述")]),_:1})]),n("li",null,[t(a,{to:"#自定义异常的使用"},{default:p(()=>[s("自定义异常的使用")]),_:1})])])]),n("li",null,[t(a,{to:"#常用类之-bigdecimal-与-decimalformat"},{default:p(()=>[s("常用类之 BigDecimal 与 DecimalFormat")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#bigdecimal"},{default:p(()=>[s("BigDecimal")]),_:1})]),n("li",null,[t(a,{to:"#numberformat-decimalformat"},{default:p(()=>[s("NumberFormat & DecimalFormat")]),_:1})])])]),n("li",null,[t(a,{to:"#练习"},{default:p(()=>[s("练习")]),_:1})])])]),h])}const q=e(b,[["render",f],["__file","index.html.vue"]]);export{q as default};
