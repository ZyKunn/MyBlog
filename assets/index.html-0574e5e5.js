import{_ as p,r as o,o as c,c as l,a as n,e,w as t,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1611626736388-ab549791.png",r="/MyBlog/assets/1611631738599-87f1f9e1.png",k="/MyBlog/assets/1611629377155-5437a349.png",d="/MyBlog/assets/1611646163155-7fec106b.png",v={},m=n("h1",{id:"_05-servlet-四",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_05-servlet-四","aria-hidden":"true"},"#"),s(" 05 - Servlet（四） ✈️")],-1),b={class:"table-of-contents"},g=i('<h2 id="请求转发与重定向" tabindex="-1"><a class="header-anchor" href="#请求转发与重定向" aria-hidden="true">#</a> 请求转发与重定向</h2><p>Servlet 中的跳转技术主要包含两种：</p><ol><li><p>请求转发（request.getRequestDispartcher().forward(request,response)）</p></li><li><p>重定向（response.sendRedirect()）</p><p><img src="'+u+`" alt="1611626736388"></p></li></ol><h3 id="请求转发-forward" tabindex="-1"><a class="header-anchor" href="#请求转发-forward" aria-hidden="true">#</a> 请求转发（forward）</h3><p>请求转发也称之为服务端跳转，即客户端只发送一次请求，后续的多次请求由服务端发起，因此客户端的请求地址栏只会显示第一次发送的地址（实际服务端已经在内部转发了多次），请求转发可以将存储在一次 request 范围(客户端发起的)之内的数据传递到下一个 Servlet 中</p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>//向request范围存储了一个属性（key:username,value:softeem）
request.setAttribute(&quot;username&quot;,&quot;softeem&quot;); //Map  获取则是 request.getAttribute();
request.getRequestDispatcher(&quot;../goods/list&quot;).forward(req,resp);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重定向-redirect" tabindex="-1"><a class="header-anchor" href="#重定向-redirect" aria-hidden="true">#</a> 重定向（redirect）</h3><p>重定向也称之为客户端跳转，即客户端请求会发送多次，而且地址栏会显示最后一次请求的地址，由于重定向是客户端的跳转方式，因此每次请求之间没有直接关系，所以存储在 request 范围之内数据无法传递到下一个请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//request范围内数据无法传递到下一个servlet中</span>
request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;softeem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;../goods/list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="servlet-作用域对象" tabindex="-1"><a class="header-anchor" href="#servlet-作用域对象" aria-hidden="true">#</a> Servlet 作用域对象</h2><p><img src="`+r+`" alt="1611631738599"></p><h3 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> request</h3><p>request 作用域作用于一次请求范围（客户端请求）,当使用请求转发跳转时，可以向 request 范围之内存储数据，并且在下一个 Servlet 中可以将 request 的数据获取</p><p>使用方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//存储数据到request</span>
request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取request数据</span>
request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h3><p>session 也称之为会话，通常指的是一次项目的访问过程（只要浏览器不关闭，或者不到达 session 的有效期）存储在 session 范围之内的数据会一直存在。</p><p>session 有效期默认是:30 分钟（在 tomcat 的 web.xml 文件中有配置）:</p><p><img src="`+k+`" alt="1611629377155"></p><blockquote><p>如果需要修改 session 的有效期,不要去直接修改服务器(Tomcat-&gt;conf 目录下)中的 web.xml；而是应该修改 web 项目中 WEB-INF 下的 web.xml</p></blockquote><p>客户端每一次服务端建立连接时都会创建一个 session（具备一个独一无二的 sessionid），在同一次访问中，无论页面（请求转发）如何跳转，只要 sessionid 是同一个，则 session 中的数据是一直有效且共享的。一旦浏览器关闭，下一次重新开启时，sessionid 会发生变更。</p><p>使用方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//存储数据到session</span>
session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//取出session中的数据</span>
session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用：</strong></p><p>session 的存储范围为服务端，一般用于存储一些安全性要求较高的少量数据，比如：用户的登录信息（账号密码等）</p><h3 id="servletcontext" tabindex="-1"><a class="header-anchor" href="#servletcontext" aria-hidden="true">#</a> ServletContext</h3><p>ServletContext 也称之为上下文环境；一旦 web 容器启动，项目被装载后，服务端会自动创建一个上下文环境（SerlvetContext）,该环境是唯一的（单例）；只要服务器不重启，存储在在该范围内的数据会一直有效，并且可以实现多个用户之间的数据共享。</p><p>ServletContext 的获取包含三种方式:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//方式一：</span>
<span class="token class-name">ServletContext</span> app1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式二：</span>
<span class="token class-name">ServletContext</span> app2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式三：</span>
<span class="token class-name">ServletContext</span> app3 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletContext</span> context <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//存储数据到ServletContext</span>
context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取ServletContext数据</span>
context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果需要对指定作用域中的属性清除可以使用：</p><ul><li>removeAttribute(name)移除</li></ul><p>对于 session 来说还可以直接使用<code>invalidate()</code>方法，清除整个 session 对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//		将session中的指定属性移除</span>
		session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//		将session失效</span>
		session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//		移除request范围的指定属性</span>
<span class="token comment">//        req.removeAttribute();</span>
<span class="token comment">//        移除上下文环境的指定属性</span>
<span class="token comment">//        req.getSession().getServletContext().removeAttribute();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="会话跟踪技术之-cookie" tabindex="-1"><a class="header-anchor" href="#会话跟踪技术之-cookie" aria-hidden="true">#</a> 会话跟踪技术之 Cookie</h2><p>Http 协议是无状态的（每次一次的 http 请求相互之间无关联），但是实际开发中经常需要在多个请求之间进行数据的传递，以及状态的转移；此时 servlet 中支持四种会话跟踪技术：</p><ol><li><p><strong>URL 传值</strong>（get 请求）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost/javaweb01/login?username=admin&amp;password=123456&amp;code=0.12312435345345
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>隐藏域传值</strong>（post/get 请求）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>method<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>session</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Cookie</strong></p><p>Cookie 是客户端浏览器，实现数据缓存的一种技术，是通过在本地操作系统中以文件存储的形式，存储少量(4kb 左右)的数据信息；cookie 由服务端制造，通过 response 对象响应到客户端，然后再通过 request 发送到服务端，</p></li></ol><h3 id="cookie-的使用如下" tabindex="-1"><a class="header-anchor" href="#cookie-的使用如下" aria-hidden="true">#</a> cookie 的使用如下：</h3><ol><li><p>制造并存储 cookie</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/cookie/add&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三123&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Model</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建cookie对象</span>
        <span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;softeem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置cookie的有效期(秒) 一周时间  默认有效期与session保持一致</span>
        c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置cookie生效的域名（主机地址）</span>
        <span class="token comment">//        c.setDomain(&quot;com.softeem.top&quot;);</span>
        <span class="token comment">//设置cookie生效的位置（对于同一个主机中的哪一个项目）</span>
        <span class="token comment">//        c.setPath(&quot;/javaweb05&quot;);</span>
        c<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//将对象转换为json字符串</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将数据转码（Cookie不支持中文和特殊符号）</span>
        s <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;json----&gt;&quot;</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cookie</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        c2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c2<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/javaweb05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将cookie对象通过response对象发送到客户端</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读取 Cookie</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/cookie/read&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadCookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> c <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;----&gt;&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//解码</span>
                <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;info解码后:&quot;</span><span class="token operator">+</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//解析为javabean</span>
                <span class="token class-name">Model</span> model <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Model</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解析json为javabean:&quot;</span><span class="token operator">+</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="cookie-的应用场景" tabindex="-1"><a class="header-anchor" href="#cookie-的应用场景" aria-hidden="true">#</a> Cookie 的应用场景：</h3><ol><li>大型网站的首页信息的缓存</li><li>购物车功能</li><li>保存账号功能</li><li>历史浏览记录</li><li>...</li></ol><h3 id="案例讲解-记住密码实现" tabindex="-1"><a class="header-anchor" href="#案例讲解-记住密码实现" aria-hidden="true">#</a> 案例讲解：记住密码实现</h3><h2 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h2><ol><li>基于 Cookie 以及 session，实现一个浏览记录保存的功能</li></ol><p><img src="`+d+'" alt="1611646163155"></p>',44);function h(q,f){const a=o("router-link");return c(),l("div",null,[m,n("nav",b,[n("ul",null,[n("li",null,[e(a,{to:"#请求转发与重定向"},{default:t(()=>[s("请求转发与重定向")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#请求转发-forward"},{default:t(()=>[s("请求转发（forward）")]),_:1})]),n("li",null,[e(a,{to:"#重定向-redirect"},{default:t(()=>[s("重定向（redirect）")]),_:1})])])]),n("li",null,[e(a,{to:"#servlet-作用域对象"},{default:t(()=>[s("Servlet 作用域对象")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#request"},{default:t(()=>[s("request")]),_:1})]),n("li",null,[e(a,{to:"#session"},{default:t(()=>[s("session")]),_:1})]),n("li",null,[e(a,{to:"#servletcontext"},{default:t(()=>[s("ServletContext")]),_:1})])])]),n("li",null,[e(a,{to:"#会话跟踪技术之-cookie"},{default:t(()=>[s("会话跟踪技术之 Cookie")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#cookie-的使用如下"},{default:t(()=>[s("cookie 的使用如下：")]),_:1})]),n("li",null,[e(a,{to:"#cookie-的应用场景"},{default:t(()=>[s("Cookie 的应用场景：")]),_:1})]),n("li",null,[e(a,{to:"#案例讲解-记住密码实现"},{default:t(()=>[s("案例讲解：记住密码实现")]),_:1})])])]),n("li",null,[e(a,{to:"#作业"},{default:t(()=>[s("作业")]),_:1})])])]),g])}const S=p(v,[["render",h],["__file","index.html.vue"]]);export{S as default};
