import{_ as e,r as o,o as c,c as l,a as n,e as t,w as p,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1610776198031-436de687.png",k="/MyBlog/assets/1610776555495-20d8c0cb.png",r="/MyBlog/assets/1610777639798-faeb72fd.png",d="/MyBlog/assets/1610777921607-2de20c00.png",m="/MyBlog/assets/1610777990166-7046a103.png",v="/MyBlog/assets/1610778605557-ce828761.png",b="/MyBlog/assets/1610779132059-ae9828e3.png",h="/MyBlog/assets/1610789115848-1c2372cc.png",f="/MyBlog/assets/1610789245845-e5ae659e.png",g={},S=n("h1",{id:"_06-网络编程-一",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_06-网络编程-一","aria-hidden":"true"},"#"),s(" 06 - 网络编程（一） 🤺")],-1),y={class:"table-of-contents"},w=i('<h2 id="软件结构" tabindex="-1"><a class="header-anchor" href="#软件结构" aria-hidden="true">#</a> 软件结构</h2><p>在互联网的软件结构中主要分为两种结构模式:</p><ol><li>CS 结构:Client/Server</li><li>BS 结构:Browser/Server</li></ol><h3 id="cs-结构" tabindex="-1"><a class="header-anchor" href="#cs-结构" aria-hidden="true">#</a> CS 结构</h3><p>CS:客户端/服务器模式，在这种结构下，我们需要先在终端（PC/手机/平板）下载相关的客户端程序，连接到服务端使用软件相关的功能，这种结构如下：</p><p><img src="'+u+'" alt="1610776198031"></p><ul><li>优点:用户体验好，对网络要求相对较低</li><li>缺点:对硬件要求高,软件升级需要推送到服务端,所有客户都需要重新安装</li></ul><h3 id="bs-结构" tabindex="-1"><a class="header-anchor" href="#bs-结构" aria-hidden="true">#</a> BS 结构</h3><p>BS:浏览器/服务器模式，在这种结构下，任何软件的使用不需要下载客户端程序，只需终端支持浏览器即可（all in one）,所有的程序都可以直接通过浏览器打开，实现真正的即用即走思想。BS 结构如下:</p><p><img src="'+k+'" alt="1610776555495"></p><ul><li>优点:对硬件要求较低</li><li>缺点:对网络的要求较高</li></ul><p>对于以上两种软件结构来说，无论哪一种都有各自的优劣势，但是两种结构都有一个共同的要求：必需保持<strong>网络连接</strong>，才能使用相关功能</p><h2 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络" aria-hidden="true">#</a> 计算机网络</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>计算机网络：通过相关的网络介质连接位于不同地理区域的计算机设备，将这些能够联网的设备连接成一个规模庞大的网络系统，实现设备之间的数据交换，从而达到一种能力：<strong>数据共享</strong>，计算机网络存在的意义:</p><ul><li>使用远程资源</li><li>共享信息、程序和数据</li><li>分布式处理</li></ul><h3 id="网络分类" tabindex="-1"><a class="header-anchor" href="#网络分类" aria-hidden="true">#</a> 网络分类</h3><ul><li>局域网</li><li>城域网（都市网）</li><li><strong>广域网</strong></li></ul><h3 id="网络协议" tabindex="-1"><a class="header-anchor" href="#网络协议" aria-hidden="true">#</a> 网络协议</h3><p>计算机设备之间的连接需要两种必要资源：</p><ul><li>硬件设备（网卡，交换机，路由器，连接介质:光纤，双绞线，同轴电缆）</li><li>软件设备（网络协议）</li></ul><h4 id="协议" tabindex="-1"><a class="header-anchor" href="#协议" aria-hidden="true">#</a> 协议</h4><p>通信双方之间约定好的一些通信规则，类似一个组织内部通信暗语；计算中网络连接的底层协议主要分为：TCP/IP 协议与 UDP 协议</p><h5 id="tcp-ip-打电话" tabindex="-1"><a class="header-anchor" href="#tcp-ip-打电话" aria-hidden="true">#</a> TCP/IP(打电话)</h5><p>​ 传输控制协议，是一个安全可靠的互联网协议，需要通信的主机之间需要先建立正确的链接，才能够进行通信，并且改协议能够保证数据传输稳定性(必须的保证信息发送到一台主机，由该主机确认之后才能发送下一条信息)，另外该协议也能保证数据传输的有序性(先发送的信息一定先到达)。一般基于 C/S 架构，存在服务器客户端模式。</p><p>应用领域:远程登陆</p><p><img src="'+r+'" alt="1610777639798"></p><h5 id="udp-发快递" tabindex="-1"><a class="header-anchor" href="#udp-发快递" aria-hidden="true">#</a> UDP(发快递)</h5><p>User Diagram Protocol（用户数据报协议），是一个不安全的网络协议，不需要双方之间建立联系，也不保证信息传输的有序性(有可能后发消息先到)，传输效率比 TCP/IP 更高.没有专门服务器和客户端，只有发送端和接收端.</p><p>应用领域: 广播，视频会议</p><p><img src="'+d+'" alt="1610777921607"></p><h5 id="tcp-ip-与-udp-协议应用层协议对比" tabindex="-1"><a class="header-anchor" href="#tcp-ip-与-udp-协议应用层协议对比" aria-hidden="true">#</a> TCP/IP 与 UDP 协议应用层协议对比</h5><p><img src="'+m+'" alt="1610777990166"></p><h2 id="ip-与端口-port" tabindex="-1"><a class="header-anchor" href="#ip-与端口-port" aria-hidden="true">#</a> IP 与端口(port)</h2><h3 id="ip" tabindex="-1"><a class="header-anchor" href="#ip" aria-hidden="true">#</a> IP</h3><p>IP:Internet Protocol 互联网协议，表示当前主机在网络中的位置(同一个网络系统中是独一无二的)；简单的认为:ip 即主机在网络中的位置</p><p>IP 地址目前主要分为两类:</p><ul><li>IPV4：32 位，4 个字节组成，取值范围位：0~255；目前全球可用的 ipv4 地址也就 40 多亿</li><li>IPV6：128 位，126 个字节组成，可取的地址“无穷无尽”</li></ul><p>其中 IPV4 主要分为 5 类，目前民用主要位于 C 类地址:</p><p><img src="'+v+'" alt="1610778605557"></p><blockquote><p>ip 地址就类似家庭住址(精确到街道)</p></blockquote><h3 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h3><p>计算机设备能够联网的应用种类很多，但是如果需要精确的找到某一个的应用程序，则该应用程序就需要存在一个对外的独一无二的通信端点，这个端点称之为:端口号；</p><p>端口号的可选择范围: 0~65535 之间</p><p>端口也分为三类：</p><ul><li>公端认口:0~1023 之间，理论上不应该为你的应用程序分配这些端口，因为这些端口密集绑定了一些固定的服务</li><li><strong>注册端口:1024~49151 之间，一般建议将应用程序的端口在这个范围内选择；位于这个区域的端口松散的绑定了部分服务</strong></li><li>动态端口/私有端口：从 49152 到 65535。理论上不应为服务分配这些端口</li></ul><p>常用 TCP 端口占用情况:</p><p><img src="'+b+`" alt="1610779132059"></p><blockquote><p>端口就类似家庭住址的所在门牌号</p></blockquote><h2 id="inetaddress-类-ip-地址的-java-对象表示形式" tabindex="-1"><a class="header-anchor" href="#inetaddress-类-ip-地址的-java-对象表示形式" aria-hidden="true">#</a> InetAddress 类(ip 地址的 Java 对象表示形式)</h2><p><code>java.net.InetAddress</code>类是来自<code>java.net</code>包中，用于表示一个 ip 地址的 Java 类，内部包含目标主机的<strong>主机名和 ip 地址</strong></p><h3 id="常见方法" tabindex="-1"><a class="header-anchor" href="#常见方法" aria-hidden="true">#</a> 常见方法</h3><ul><li>getByName(String host)：根据提供的 IP 地址或者主机名称获取当前主机所表示的 IP 地址对象</li><li>getAllByName(String host)：获取所有符合主机名称的主机 ip 对象</li><li>getLocalHost()：获取本地主机 ip 对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//根据提供的主机名获取主机所在的ip地址对象</span>
<span class="token class-name">InetAddress</span> ip <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;mrchailiu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//根据提供的主机名获取所有匹配的主机对象</span>
<span class="token class-name">InetAddress</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getAllByName</span><span class="token punctuation">(</span><span class="token string">&quot;mrchailiu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InetAddress</span> addr<span class="token operator">:</span>ips<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//获取当前主机的本地地址对象</span>
<span class="token class-name">InetAddress</span> localHost <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localHost<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localhost-与-127-0-0-1" tabindex="-1"><a class="header-anchor" href="#localhost-与-127-0-0-1" aria-hidden="true">#</a> localhost 与 127.0.0.1</h3><ul><li>localhost 是本地主机的<strong>域名</strong>表示形式</li><li>127.0.0.1 是本地主机的<strong>ip</strong>表示形式</li></ul><h2 id="inetsocketaddress-inetaddress-port-组合" tabindex="-1"><a class="header-anchor" href="#inetsocketaddress-inetaddress-port-组合" aria-hidden="true">#</a> InetSocketAddress（InetAddress+port 组合）</h2><p>InetSocketAddress 类是从 SocketAddress（抽象类）继承而来，内部表示为 ip 地址对象与端口的结合，称之为 ip 套接字(主机对外通信的桥梁)</p><h3 id="常见构造器" tabindex="-1"><a class="header-anchor" href="#常见构造器" aria-hidden="true">#</a> 常见构造器</h3><ul><li>InetSocketAddress(String host,int port)</li><li>InetSocketAddress(InetAddress ip,int port)</li></ul><h3 id="常见方法-1" tabindex="-1"><a class="header-anchor" href="#常见方法-1" aria-hidden="true">#</a> 常见方法</h3><ul><li>getHostAddress()</li><li>getHostName()</li><li>getPort()</li><li>getAddress()</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InetSocketAddress</span> ipSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.6.254&quot;</span><span class="token punctuation">,</span><span class="token number">2425</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当前对象表示InetAddress对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipSocket<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取主机名</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipSocket<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipSocket<span class="token punctuation">.</span><span class="token function">getHostString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取端口号</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipSocket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="socket-之-tcp-通信" tabindex="-1"><a class="header-anchor" href="#socket-之-tcp-通信" aria-hidden="true">#</a> Socket 之 TCP 通信</h2><h3 id="socket-概述" tabindex="-1"><a class="header-anchor" href="#socket-概述" aria-hidden="true">#</a> Socket 概述</h3><p>socket 又称为<strong>套接字</strong>，用于实现两台主机之间通信的端点（桥梁），基于 TCP 通信协议的套接字类主要由以下两个类构成:</p><ul><li>ServerSocket</li><li>Socket</li></ul><p>基于 Socket 的 TCP 通信主要由两个方法分别获取基于 Socket 的输入流和输出流，然后通过 input/output 的原理实现主机之间的信息交换：</p><p><img src="`+h+`" alt="1610789115848"></p><h3 id="serversocket-服务端套接字" tabindex="-1"><a class="header-anchor" href="#serversocket-服务端套接字" aria-hidden="true">#</a> ServerSocket(服务端套接字)</h3><p>ServerSocket 提供的是服务端套接字功能，通过该类可以创建任何的网络服务程序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//在指定的端口创建一个服务</span>
        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务已启动，等待连接....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//开始监听并获取Socket对象</span>
            <span class="token class-name">Socket</span> s <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端已连接!&quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取基于Socket的输出流</span>
            <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//编码转换</span>
            <span class="token comment">//            OutputStreamWriter osw = new OutputStreamWriter(os,&quot;gbk&quot;);</span>
            <span class="token comment">//将节点流包装到打印流中</span>
            <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎进入SOFTEEM聊天室！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h3><p>Socket 提供的是客户端套接字功能，该类可以连接指定地址指定端口的服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClient</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//连接到指定ip和端口的服务</span>
        <span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.6.254&quot;</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取基于Socket输入流</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> msg <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器:&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="综合案例-文件传输服务" tabindex="-1"><a class="header-anchor" href="#综合案例-文件传输服务" aria-hidden="true">#</a> 综合案例:文件传输服务</h2><p>案例结合 IO 流、多线程、网络编程三个 java 高级知识点实现，原理图如下：</p><p><img src="`+f+`" alt="1610789245845"></p><p>以上原理解释：</p><ol><li>服务端读取本地文件到内存中</li><li>通过 socket 的输出流将字节数据输出</li><li>客户端获取 socket 输入流</li><li>将流中的字节数据通过客户端文件的输出流输出，完成下载</li></ol><h3 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h3><ol><li><p>文件服务线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**需要传输的文件*/</span>
    <span class="token keyword">private</span> <span class="token class-name">File</span> target<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**实现通信的socket对象*/</span>
    <span class="token keyword">private</span> <span class="token class-name">Socket</span> s<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FileServer</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">,</span> <span class="token class-name">File</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">//获取目标文件的输入流（读取到内存中）</span>
            <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取目标socket输出流</span>
            <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始传输文件:&quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传输完成:&quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>服务端主启动类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token comment">//在指定端口创建一个文件传输服务</span>
        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务已创建，等待连接...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//目标文件</span>
        <span class="token class-name">File</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\素材\\\\视频\\\\短视频\\\\大事发生.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//接收每一个客户端的连接,并获取Socket对象</span>
            <span class="token class-name">Socket</span> s <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//为每一个客户端单独创建文件传输线程</span>
            <span class="token keyword">new</span> <span class="token class-name">FileServer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDownloadClient</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//连接到指定地址指定端口的服务</span>
        <span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.6.254&quot;</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//准备接收服务端传输过来的文件存储目标</span>
        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\a.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span>
                <span class="token comment">//获取基于该文件的输出流</span>
                <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//获取基于socket的输入流</span>
                <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;下载完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><ol><li><strong>如何将上述文件传输的代码进行优化（减少重复代码）</strong></li><li>如何实现一个目录的共享(对象序列化) <ol><li>服务端启动</li><li>客户端连接服务端</li><li>客户端看到可下载的文件列表（序号-&gt;文件名）</li><li>客户端发送文件序号到服务端</li><li>服务端接收到需要找到对应文件</li><li>服务端将目标文件传输到客户端</li><li>客户端下载文件存储到本地</li></ol></li><li>实现一个多线程的聊天室</li></ol>`,86);function _(I,x){const a=o("router-link");return c(),l("div",null,[S,n("nav",y,[n("ul",null,[n("li",null,[t(a,{to:"#软件结构"},{default:p(()=>[s("软件结构")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#cs-结构"},{default:p(()=>[s("CS 结构")]),_:1})]),n("li",null,[t(a,{to:"#bs-结构"},{default:p(()=>[s("BS 结构")]),_:1})])])]),n("li",null,[t(a,{to:"#计算机网络"},{default:p(()=>[s("计算机网络")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#概述"},{default:p(()=>[s("概述")]),_:1})]),n("li",null,[t(a,{to:"#网络分类"},{default:p(()=>[s("网络分类")]),_:1})]),n("li",null,[t(a,{to:"#网络协议"},{default:p(()=>[s("网络协议")]),_:1})])])]),n("li",null,[t(a,{to:"#ip-与端口-port"},{default:p(()=>[s("IP 与端口(port)")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#ip"},{default:p(()=>[s("IP")]),_:1})]),n("li",null,[t(a,{to:"#端口"},{default:p(()=>[s("端口")]),_:1})])])]),n("li",null,[t(a,{to:"#inetaddress-类-ip-地址的-java-对象表示形式"},{default:p(()=>[s("InetAddress 类(ip 地址的 Java 对象表示形式)")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#常见方法"},{default:p(()=>[s("常见方法")]),_:1})]),n("li",null,[t(a,{to:"#localhost-与-127-0-0-1"},{default:p(()=>[s("localhost 与 127.0.0.1")]),_:1})])])]),n("li",null,[t(a,{to:"#inetsocketaddress-inetaddress-port-组合"},{default:p(()=>[s("InetSocketAddress（InetAddress+port 组合）")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#常见构造器"},{default:p(()=>[s("常见构造器")]),_:1})]),n("li",null,[t(a,{to:"#常见方法-1"},{default:p(()=>[s("常见方法")]),_:1})])])]),n("li",null,[t(a,{to:"#socket-之-tcp-通信"},{default:p(()=>[s("Socket 之 TCP 通信")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#socket-概述"},{default:p(()=>[s("Socket 概述")]),_:1})]),n("li",null,[t(a,{to:"#serversocket-服务端套接字"},{default:p(()=>[s("ServerSocket(服务端套接字)")]),_:1})]),n("li",null,[t(a,{to:"#socket"},{default:p(()=>[s("Socket")]),_:1})])])]),n("li",null,[t(a,{to:"#综合案例-文件传输服务"},{default:p(()=>[s("综合案例:文件传输服务")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#服务端"},{default:p(()=>[s("服务端")]),_:1})]),n("li",null,[t(a,{to:"#客户端"},{default:p(()=>[s("客户端")]),_:1})])])]),n("li",null,[t(a,{to:"#思考"},{default:p(()=>[s("思考")]),_:1})])])]),w])}const A=e(g,[["render",_],["__file","index.html.vue"]]);export{A as default};
