import{_ as p,r as c,o,c as l,a as n,e as t,w as e,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/image-20231207173715986-96ab1d5f.png",k="/MyBlog/assets/image-20231207174127205-adb17e44.png",d={},r=n("h1",{id:"☀️springboot-集成-caffeine",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#☀️springboot-集成-caffeine","aria-hidden":"true"},"#"),s(" ☀️SpringBoot 集成 Caffeine")],-1),v=n("hr",null,null,-1),m={class:"table-of-contents"},b=i(`<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>前面我们有学习<code>Caffeine</code> <strong>本地缓存性能之王 Caffeine</strong>，并且也提到<code>SpringBoot</code>默认使用的本地缓存也是<code>Caffeine</code>啦，今天我们来看看<code>Caffeine</code>如何与<code>SpringBoot</code>集成的。</p><h2 id="集成-caffeine" tabindex="-1"><a class="header-anchor" href="#集成-caffeine" aria-hidden="true">#</a> 集成 caffeine</h2><p><code>caffeine</code>与<code>SpringBoot</code>集成有两种方式：</p><ul><li>一种是我们直接引入 <code>Caffeine</code> 依赖，然后使用 <code>Caffeine</code> 方法实现缓存。相当于使用原生 api</li><li>引入 <code>Caffeine</code> 和 <code>Spring Cache</code> 依赖，使用 <code>SpringCache</code> 注解方法实现缓存。SpringCache 帮我们封装了 Caffeine pom 文件引入</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第一种方式" tabindex="-1"><a class="header-anchor" href="#第一种方式" aria-hidden="true">#</a> 第一种方式</h3><p>首先配置一个<code>Cache</code>，通过构造者模式构建一个<code>Cache</code>对象，然后后续关于缓存的增删查都是基于这个<code>cache</code>对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">caffeineCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 设置最后一次写入或访问后经过固定时间过期</span>
                <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
                <span class="token comment">// 初始的缓存空间大小</span>
                <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
                <span class="token comment">// 缓存的最大条数</span>
                <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种方式我们就一一不介绍了，基本上就是使用<code>caffeineCache</code>来根据你自己的业务来操作以下方法</p><p><img src="`+u+`" alt="image-20231207173715986"></p><p>这种方式使用的话是对代码有侵入性的。</p><h3 id="第二种方式" tabindex="-1"><a class="header-anchor" href="#第二种方式" aria-hidden="true">#</a> 第二种方式</h3><ul><li>需要在 SpingBoot 启动类标上<code>EnableCaching</code>注解，这个玩意跟很多框架都一样，比如我们肴集成<code>dubbo</code>也需要标上<code>@EnableDubbole</code>注解等。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在<code>application.yml</code>配置我们的使用的缓存类型、过期时间、缓存策略等。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
   <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
      <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
   <span class="token key atrule">cache</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> CAFFEINE
      <span class="token key atrule">caffeine</span><span class="token punctuation">:</span>
         <span class="token key atrule">spec</span><span class="token punctuation">:</span> maximumSize=500<span class="token punctuation">,</span>expireAfterAccess=600s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们不习惯使用这种方式的配置，当然我们也可以使用<code>JavaConfig</code>的配置方式来代替配置文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CaffeineCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cacheManager<span class="token punctuation">.</span><span class="token function">setCaffeine</span><span class="token punctuation">(</span><span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token comment">// 设置最后一次写入或访问后经过固定时间过期</span>
                    <span class="token punctuation">.</span><span class="token function">expireAfterAccess</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
                    <span class="token comment">// 初始的缓存空间大小</span>
                    <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
                    <span class="token comment">// 缓存的最大条数</span>
                    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是代码中如何来使用这个缓存了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#userDTO.id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userDTO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span><span class="token comment">//2</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;删除了id、key为&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;的数据缓存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中我们可以看到有几个注解<code>@CachePut、@CacheEvict、@Cacheable</code> 我们只需要在方法上标上这几个注解，我们就能够使用缓存了，我们分别来介绍下这几个注解。</p><h3 id="cacheable" tabindex="-1"><a class="header-anchor" href="#cacheable" aria-hidden="true">#</a> @Cacheable</h3><p><code>@Cacheable</code>它是既可以标注在类上也可以标注在方法上，当它标记在类上的时候它表述这个类上面的所有方法都会支持缓存，同样的 当它作用在法上面时候它表示这个方法是支持缓存的。比如上面我们代码中的<code>getUserById</code>这个方法第一次缓存里面没有数据，我们会去查询<code>DB</code>，但是第二次来查询的时候就不会走<code>DB</code>查询了，而是直接从缓存里面拿到结果就返回了。</p><h4 id="value-属性" tabindex="-1"><a class="header-anchor" href="#value-属性" aria-hidden="true">#</a> value 属性</h4><ul><li><code>@Cacheable</code>的<code>value</code>属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个<code>Cache</code>上的，对应<code>Cache</code>的名称。</li></ul><h4 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h4><ul><li><code>@Cacheable</code>的<code>key</code> 有两种方式一种是我们自己显示的去指定我们的<code>key</code>，还有一种默认的生成策略，默认的生成策略是<code>SimpleKeyGenerator</code>这个类，这个生成<code>key</code>的方式也比较简单我们可以看下它的源码：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果方法没有参数 key就是一个 new SimpleKey()</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token class-name">SimpleKey</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果方法只有一个参数 key就是当前参数</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Object</span> param <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> param<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果key是多个参数，key就是new SimpleKey ，不过这个SimpleKey对象的hashCode 和Equals方法是根据方法传入的参数重写的。</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleKey</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码还是非常好理解的分为三种情况：</p><ul><li>方法没有参数，那就 new 使用一个全局空的<code>SimpleKey</code>对象来作为<code>key</code>。</li><li>方法就一个参数，就使用当前参数来作为<code>key</code></li><li>方法参数大于<code>1</code>个，就<code>new</code>一个<code>SimpleKey</code>对象来作为<code>key</code>，<code>new</code> 这个<code>SimpleKey</code>的时候用传入的参数重写了<code>SimpleKey</code>的<code>hashCode</code>和<code>equals</code>方法， 至于为啥需要重写的原因话，就跟<code>Map</code>用自定义对象来作为<code>key</code>的时候必须要重写<code>hashCode</code>和<code>equals</code>方法原理是一样的，因为<code>caffein</code>也是借助了<code>ConcurrentHashMap</code>来实现，</li></ul><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>上述代码我们可以发现默认生成<code>key</code>只跟我们传入的参数有关系，如果我们有一个类里面如果存在多个没有参数的方法，然后我们使用了默认的缓存生成策略的话，就会造成缓存丢失。 或者缓存相互覆盖，或者还有可能会发生<code>ClassCastException</code> 因为都是使用同一个<code>key</code>。比如下面这代码就会发生异常(<code>ClassCastException</code>)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;Java金融&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userDTO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO2</span> <span class="token function">getUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDTO2</span> userDTO2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO2<span class="token punctuation">.</span><span class="token function">setUserName2</span><span class="token punctuation">(</span><span class="token string">&quot;javajr.cn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userDTO2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以一般不怎么推荐使用默认的缓存生成<code>key</code>的策略。如果非要用的话我们最好自己重写一下，带上方法名字等。类似于如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyKeyGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleKeyGenerator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> generate <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;{0}{1}{2}&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> generate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> format<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义-key" tabindex="-1"><a class="header-anchor" href="#自定义-key" aria-hidden="true">#</a> 自定义 key</h4><p>我们可以通过<code>Spring</code>的 EL 表达式来指定我们的<code>key</code>。这里的 EL 表达式可以使用方法参数及它们对应的属性。 使用方法参数时我们可以直接使用“<code>#参数名</code>”或者“<code>#p参数index</code>”这也是我们比较推荐的做法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;java金融&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userDTO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUserById1</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&quot;#userDTO.id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUserById2</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&quot;#p0.id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUserById3</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cacheput" tabindex="-1"><a class="header-anchor" href="#cacheput" aria-hidden="true">#</a> @CachePut</h3><p><code>@CachePut</code>指定的属性是和<code>@Cacheable</code>一样的，但是它们两个是有区别的，<code>@CachePut</code>标注的方法不会先去查询缓存是否有值，而是每次都会先去执行该方法，然后把结果返回，并且结果也会缓存起来。</p><p><img src="`+k+`" alt="image-20231207174127205"></p><p>为什么是这样的一个流程我们可以去看看它的源码关键代码就是这一行，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cache<span class="token punctuation">.</span>ValueWrapper</span> cacheHit <span class="token operator">=</span> <span class="token function">findCachedItem</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们使用方法上有<code>@Cacheable</code>注解的时候再<code>contexts</code>里面会把<code>CacheableOperation</code>加入进去，只有 contexts.get(CacheableOperation.class)取到的内容不为空的话，才会去从缓存里面取内容，否则的话<code>cacheHit</code>会直接返回<code>null</code>。至于 contexts 什么时候加入 CacheableOperation 的话我们看下<code>SpringCacheAnnotationParser#parseCacheAnnotations</code>这个方法就会明白的。具体的源码就不展示了，感兴趣的可以自己去翻。</p><h3 id="cacheevict" tabindex="-1"><a class="header-anchor" href="#cacheevict" aria-hidden="true">#</a> @CacheEvict</h3><p>把缓存中数据删除，用法跟前面两个注解差不多有 value 和 key 属性，需要注意一点的是它多了一个属性<code>beforeInvocation</code></p><ul><li><code>beforeInvocation</code> 这个属性需要注意下它的默认值是 false，false 代表的意思是再执调用方法之前不删除缓存，只有方法执行成功之后才会去删除缓存。设置为<code>true</code>的话调用方法之前会去删除一下缓存，方法执行成功之后还会去调用删除缓存这样就是双删了。如果方法执行异常的话就不会去删除缓存。</li><li><code>allEntrie</code> 是否清空所有缓存内容，默认值为 <code>false</code>，如果指定为 <code>true</code>，则方法调用后将立即清空所有缓存</li></ul><h3 id="caching" tabindex="-1"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> @Caching</h3><p>这是一个组合注解集成了上面三个注解，有三个属性：<code>cacheable、put和evict</code>，分别用于来指定<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>。</p><h4 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h4><p>第二种方式是侵入式的，它的实现原理也比较简单就是通过切面的方法拦截器来实现，拦截所有的方法，它的核心代码如下：看起来就跟我们的业务代码差不了多少，感兴趣的也可以去瞅一瞅。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">isSynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">CacheOperationContext</span> context <span class="token operator">=</span> contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConditionPassing</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">Object</span> key <span class="token operator">=</span> <span class="token function">generateKey</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name">Cache</span> cache <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">try</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token function">wrapCacheValue</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">unwrapReturnValue</span><span class="token punctuation">(</span><span class="token function">invokeOperation</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Cache<span class="token punctuation">.</span>ValueRetrievalException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">// The invoker wraps any Throwable in a ThrowableWrapper instance so we</span>
					<span class="token comment">// can just make sure that one bubbles up the stack.</span>
					<span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">CacheOperationInvoker<span class="token punctuation">.</span>ThrowableWrapper</span><span class="token punctuation">)</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// No caching required, only call the underlying method</span>
				<span class="token keyword">return</span> <span class="token function">invokeOperation</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>


		<span class="token comment">// Process any early evictions</span>
		<span class="token comment">// beforeInvocation 属性是否为true，如果是true就删除缓存</span>
		<span class="token function">processCacheEvicts</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheEvictOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
				<span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Check if we have a cached item matching the conditions</span>
		<span class="token class-name">Cache<span class="token punctuation">.</span>ValueWrapper</span> cacheHit <span class="token operator">=</span> <span class="token function">findCachedItem</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Collect puts from any @Cacheable miss, if no cached item is found</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CachePutRequest</span><span class="token punctuation">&gt;</span></span> cachePutRequests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>cacheHit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">collectPutRequests</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheableOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
					<span class="token class-name">CacheOperationExpressionEvaluator</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT</span><span class="token punctuation">,</span> cachePutRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token class-name">Object</span> cacheValue<span class="token punctuation">;</span>
		<span class="token class-name">Object</span> returnValue<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>cacheHit <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasCachePut</span><span class="token punctuation">(</span>contexts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// If there are no put requests, just use the cache hit</span>
			cacheValue <span class="token operator">=</span> cacheHit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			returnValue <span class="token operator">=</span> <span class="token function">wrapCacheValue</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> cacheValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Invoke the method if we don&#39;t have a cache hit</span>
			returnValue <span class="token operator">=</span> <span class="token function">invokeOperation</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cacheValue <span class="token operator">=</span> <span class="token function">unwrapReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// Collect any explicit @CachePuts</span>
		<span class="token function">collectPutRequests</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CachePutOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cacheValue<span class="token punctuation">,</span> cachePutRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Process any collected put requests, either from @CachePut or a @Cacheable miss</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CachePutRequest</span> cachePutRequest <span class="token operator">:</span> cachePutRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cachePutRequest<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// Process any late evictions</span>
		<span class="token function">processCacheEvicts</span><span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheEvictOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> cacheValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53);function h(g,f){const a=c("router-link");return o(),l("div",null,[r,v,n("nav",m,[n("ul",null,[n("li",null,[t(a,{to:"#引言"},{default:e(()=>[s("引言")]),_:1})]),n("li",null,[t(a,{to:"#集成-caffeine"},{default:e(()=>[s("集成 caffeine")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#第一种方式"},{default:e(()=>[s("第一种方式")]),_:1})]),n("li",null,[t(a,{to:"#第二种方式"},{default:e(()=>[s("第二种方式")]),_:1})]),n("li",null,[t(a,{to:"#cacheable"},{default:e(()=>[s("@Cacheable")]),_:1})]),n("li",null,[t(a,{to:"#cacheput"},{default:e(()=>[s("@CachePut")]),_:1})]),n("li",null,[t(a,{to:"#cacheevict"},{default:e(()=>[s("@CacheEvict")]),_:1})]),n("li",null,[t(a,{to:"#caching"},{default:e(()=>[s("@Caching")]),_:1})])])])])]),b])}const C=p(d,[["render",h],["__file","index.html.vue"]]);export{C as default};
