import{_ as l,r as c,o as i,c as u,a as n,e as a,w as t,b as s,d as o}from"./app-a153c100.js";const r="/MyBlog/assets/image-20230617144836682-a5ffcd5e.png",d="/MyBlog/assets/image-20230617144849718-00743e66.png",k="/MyBlog/assets/image-20230617144912868-73382e7e.png",m="/MyBlog/assets/image-20230617144917881-6a5ada58.png",v="/MyBlog/assets/image-20230617144923614-58ffc023.png",b="/MyBlog/assets/image-20230617144927769-f1493c4c.png",g="/MyBlog/assets/image-20230617144934693-53752939.png",h="/MyBlog/assets/image-20230617144937087-1d2d339c.png",y="/MyBlog/assets/image-20230617144941280-182aa14a.png",f="/MyBlog/assets/image-20230617145111147-1427d1fd.png",_="/MyBlog/assets/image-20230617235024844-c6f0e50c.png",w="/MyBlog/assets/image-20230617145115251-ff1d8523.png",S="/MyBlog/assets/image-20230617145119822-03263054.png",j="/MyBlog/assets/image-20230617145209041-9a983761.png",P="/MyBlog/assets/image-20230617145239557-4187c01c.png",x="/MyBlog/assets/image-20230617145253990-161abec6.png",q="/MyBlog/assets/image-20230617145310286-c4ed12f0.png",I="/MyBlog/assets/image-20230617145321574-f8b53c8a.png",C="/MyBlog/assets/image-20230617145326516-05d0a428.png",O="/MyBlog/assets/image-20230617145442056-23b58e2a.png",T="/MyBlog/assets/image-20230617145452903-dbc114f0.png",B="/MyBlog/assets/image-20230617145457664-ec130adb.png",N="/MyBlog/assets/image-20230617145503410-d673d7d0.png",J="/MyBlog/assets/image-20230617145509114-6e89793f.png",L="/MyBlog/assets/image-20230617145538711-0f34005d.png",E={},M=n("h1",{id:"第-8-章-项目优化-3-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第-8-章-项目优化-3-1","aria-hidden":"true"},"#"),s(),n("strong",null,"第 8 章 项目优化 3.1")],-1),R={class:"table-of-contents"},D=o('<h2 id="_1-优化需求" tabindex="-1"><a class="header-anchor" href="#_1-优化需求" aria-hidden="true">#</a> <strong>1 优化需求</strong></h2><p>视频播放页面用户未登录也可以访问，当用户观看试学课程时需要请求服务端查询数据，接口如下：</p><p>1、根据课程 id 查询课程信息。</p><p>2、根据文件 id 查询视频信息。</p><p>这些接口在用户未认证状态下也可以访问，如果接口的性能不高，当高并发到来很可能耗尽整个系统的资源，将整个系统压垮，所以特别需要对这些暴露在外边的接口进行优化。</p><p>下边对 根据课程 id 查询课程信息 接口进行优化，下边的内容将此接口简称为课程查询接口。</p><p>接口地址：http://www.51xuecheng.cn/open/content/course/whole/{courseId}</p><p><img src="'+r+'" alt="image-20230617144836682"></p><h2 id="_2-压力测试" tabindex="-1"><a class="header-anchor" href="#_2-压力测试" aria-hidden="true">#</a> <strong>2 压力测试</strong></h2><h3 id="_2-1-性能指标" tabindex="-1"><a class="header-anchor" href="#_2-1-性能指标" aria-hidden="true">#</a> <strong>2.1 性能指标</strong></h3><p>对接口进行优化之前需要对接口进行压力测试，不仅接口需要压力测试，整个微服务在发布前也是需要经历压力测试的，因为压力测试可以暴露功能测试所发现不了的问题。</p><p>功能测试即是对系统的功能按用户需求进行测试，比如：添加一门课程，根据需求文档先准备测试数据，再通过前端界面将一门课程添加到系统，测试是否可以操作成功。整个过程就是测试软件是否可以实现用户的需求。</p><p>压力测试是通过测试工具制造大规模的并发请求去访问系统，测试系统是否经受住压力。</p><p>比如：一个在线学习网站，上线要求该网站可以支持 1 万用户同时在线，此时就需要模拟 1 万并发请求去访问网站的关键业务流程，比如：测试点播学习流程，测试系统是否可以抗住 1 万并发请求。</p><p>一些功能测试时无法发现的问题在压力测试时就会发现，比如：内存泄露、线程安全、IO 异常等问题。</p><p>压力测试常用的性能指标如下：</p><blockquote><p>1、吞吐量</p></blockquote><p>吞吐量是系统每秒可以处理的事务数，也称为 TPS（Transaction Per Second）。</p><p>比如：一次点播流程，从请求进入系统到视频画图显示出来这整个流程就是一次事务。</p><p>所以吞吐量并不是一次数据库事务，它是完成一次业务的整体流程。</p><blockquote><p>2、响应时间</p></blockquote><p>响应时间是指客户端请求服务端，从请求进入系统到客户端拿到响应结果所经历的时间。响应时间包括：最大响应时间、最小响应时间、平均响应时间。</p><blockquote><p>3、每秒查询数</p></blockquote><p>每秒查询数即 QPS（Queries-per-second），它是衡量查询接口的性能指标，比如：商品信息查询， 一秒可以请求该接口查询商品信息的次数就是 QPS。</p><p>拿查询接口举例，一次查询请求内部不会再去请求其它接口，此时 QPS=TPS</p><p>如果一次查询请求内容需要远程调用另一个接口查询数据，此时 QPS=2 * TPS</p><blockquote><p>4、错误率</p></blockquote><p>错误率 是一批请求发生错误的请求占全部请求的比例。</p><p>不同的指标其要求不同，比如现在进行接口优化，优化后的接口响应时间应该越来越小，吞吐量越来越大，以及 QPS 值也是越大越好，错误率要保持在一个很小的范围。</p><p>另外除了关注这些性能指标以外还要关注系统的负载情况：</p><p>1、CPU 使用率，不高于 85%</p><p>2、内存利用率，不高于 85%</p><p>3、网络利用率，不高于 80%</p><p>4、磁盘 IO</p><p>磁盘 IO 的性能指标是 IOPS (Input/Output Per Second)即每秒的输入输出量(或读写次数)。</p><p>如果过大说明 IO 操作密集，IO 过大也会影响性能指标。</p><h3 id="_2-2-安装-jmeter" tabindex="-1"><a class="header-anchor" href="#_2-2-安装-jmeter" aria-hidden="true">#</a> <strong>2.2 安装 Jmeter</strong></h3><p>Apache JMeter 是 Apache 组织基于 Java 开发的压力测试工具，用于对软件做压力测试。</p><p>下载 Jmeter</p><p>https://jmeter.apache.org/download_jmeter.cgi</p><p><img src="'+d+`" alt="image-20230617144849718"></p><p>下载，解压，进入 bin 目录修改 jmeter.properties，设置中文和字体</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">language</span><span class="token punctuation">=</span><span class="token value attr-value">zh_CN</span>
<span class="token key attr-name">jmeter.hidpi.mode</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">jmeter.hidpi.scale.factor</span><span class="token punctuation">=</span><span class="token value attr-value">1.8</span>
<span class="token key attr-name">jsyntaxtextarea.font.family</span><span class="token punctuation">=</span> <span class="token value attr-value">Hack</span>
<span class="token key attr-name">jsyntaxtextarea.font.size</span><span class="token punctuation">=</span><span class="token value attr-value">25</span>
<span class="token key attr-name">jmeter.toolbar.icons.size</span><span class="token punctuation">=</span><span class="token value attr-value">32x32</span>
<span class="token key attr-name">jmeter.tree.icons.size</span><span class="token punctuation">=</span><span class="token value attr-value">24x24</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双击运行 bin 目录下的 jmeter.bat 文件。</p><p><img src="`+k+'" alt="image-20230617144912868"></p><p>界面如下图：</p><p><img src="'+m+'" alt="image-20230617144917881"></p><h3 id="_2-3-压力测试样本数-200-个线程-每个线程请求-100-次-共-20000-次" tabindex="-1"><a class="header-anchor" href="#_2-3-压力测试样本数-200-个线程-每个线程请求-100-次-共-20000-次" aria-hidden="true">#</a> 2.3 压力测试样本数：200 个线程，每个线程请求 100 次，共 20000 次</h3><p>压力机：通常压力机是单独的客户端。</p><p>测试 gateway+content</p><p>吞吐量 180 左右</p><p><img src="'+v+'" alt="image-20230617144923614"></p><p>测试 content</p><p>吞吐量 300 左右</p><p><img src="'+b+'" alt="image-20230617144927769"></p><h3 id="_2-4-优化日志" tabindex="-1"><a class="header-anchor" href="#_2-4-优化日志" aria-hidden="true">#</a> <strong>2.4 优化日志</strong></h3><p>内容管理日志级别改为 info 级别.</p><p><img src="'+g+'" alt="image-20230617144934693"></p><p>单独请求内容管理测试，吞吐量达到 1500 左右</p><p><img src="'+h+'" alt="image-20230617144937087"></p><h2 id="_3-缓存优化" tabindex="-1"><a class="header-anchor" href="#_3-缓存优化" aria-hidden="true">#</a> <strong>3 缓存优化</strong></h2><h3 id="_3-1-redis-缓存" tabindex="-1"><a class="header-anchor" href="#_3-1-redis-缓存" aria-hidden="true">#</a> <strong>3.1 redis 缓存</strong></h3><p>测试用例是根据 id 查询课程信息，这里不存在复杂的 SQL，也不存在数据库连接不释放的问题，暂时不考虑数据库方面的优化。</p><p>课程发布信息的特点的是查询较多，修改很少，这里考虑将课程发布信息进行缓存。</p><p>课程信息缓存的流程如下：</p><p><img src="'+y+`" alt="image-20230617144941280"></p><p>在 nacos 配置 redis-dev.yaml（group=xuecheng-plus-common）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.101.65
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> redis
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 content-api 微服务加载 redis-dev.yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">shared-configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">data-id</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>.yaml
    <span class="token key atrule">group</span><span class="token punctuation">:</span> xuecheng<span class="token punctuation">-</span>plus<span class="token punctuation">-</span>common
    <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 content-service 微服务中添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义查询缓存接口：</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>
/**
 * @description 查询缓存中的课程信息
 * @param courseId
 * @return com.xuecheng.content.model.po.CoursePublish
 * @author Mr.M
 * @date 2022/10/22 16:15
*/
public CoursePublish getCoursePublishCache(Long courseId);

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CoursePublish</span> <span class="token function">getCoursePublishCache</span><span class="token punctuation">(</span><span class="token class-name">Long</span> courseId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//查询缓存</span>
   <span class="token class-name">Object</span>  jsonObj <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>jsonObj<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> jsonString <span class="token operator">=</span> jsonObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=================从缓存查=================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;从数据库查询...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从数据库查询</span>
        <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token function">getCoursePublish</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>coursePublish<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 controller 接口调用代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;获取课程发布信息&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/course/whole/{courseId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CoursePreviewDto</span> <span class="token function">getCoursePublish</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;courseId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> courseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//查询课程发布信息</span>
        <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> coursePublishService<span class="token punctuation">.</span><span class="token function">getCoursePublishCache</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        CoursePublish coursePublish = coursePublishService.getCoursePublish(courseId);</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>coursePublish<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoursePreviewDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//课程基本信息</span>
        <span class="token class-name">CourseBaseInfoDto</span> courseBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CourseBaseInfoDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">,</span> courseBase<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//课程计划</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeachplanDto</span><span class="token punctuation">&gt;</span></span> teachplans <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">.</span><span class="token function">getTeachplan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TeachplanDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CoursePreviewDto</span> coursePreviewInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoursePreviewDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        coursePreviewInfo<span class="token punctuation">.</span><span class="token function">setCourseBase</span><span class="token punctuation">(</span>courseBase<span class="token punctuation">)</span><span class="token punctuation">;</span>
        coursePreviewInfo<span class="token punctuation">.</span><span class="token function">setTeachplans</span><span class="token punctuation">(</span>teachplans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> coursePreviewInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新测试请求内容管理服务课程查询接口。</p><p>吞吐量达到 2700 左右，增加了近一倍。</p><p><img src="`+f+'" alt="image-20230617145111147"></p><h3 id="_3-2-缓存穿透问题" tabindex="-1"><a class="header-anchor" href="#_3-2-缓存穿透问题" aria-hidden="true">#</a> <strong>3.2 缓存穿透问题</strong></h3><h4 id="_3-2-1-什么是缓存穿透" tabindex="-1"><a class="header-anchor" href="#_3-2-1-什么是缓存穿透" aria-hidden="true">#</a> <strong>3.2.1 什么是缓存穿透</strong></h4><p>使用缓存后代码的性能有了很大的提高，虽然性能有很大的提升但是控制台打出了很多“从数据库查询”的日志，明明判断了如果缓存存在课程信息则从缓存查询，为什么要有这么多从数据库查询的请求的？</p><p><img src="'+_+'" alt="image-20230617235024844"></p><p><strong>这是因为并发数高，很多线程会同时到达查询数据库代码处去执行。</strong></p><p>我们分析下代码：</p><p><img src="'+w+'" alt="image-20230617145115251"></p><p>如果存在恶意攻击的可能，如果有大量并发去查询一个不存在的课程信息会出现什么问题呢？</p><p>比如去请求/content/course/whole/181，查询 181 号课程，该课程并不在课程发布表中。</p><p>进行压力测试发现会去请求数据库。</p><p>大量并发去访问一个数据库不存在的数据，由于缓存中没有该数据导致大量并发查询数据库，这个现象要缓存穿透。</p><p><img src="'+S+'" alt="image-20230617145119822"></p><p>缓存穿透可以造成数据库瞬间压力过大，连接数等资源用完，最终数据库拒绝连接不可用。</p><h4 id="_3-2-2-解决缓存穿透" tabindex="-1"><a class="header-anchor" href="#_3-2-2-解决缓存穿透" aria-hidden="true">#</a> <strong>3.2.2 解决缓存穿透</strong></h4><p>如何解决缓存穿透?</p><p>1、对请求增加校验机制</p><p>比如：课程 Id 是长整型，如果发来的不是长整型则直接返回。</p><p>2、使用布隆过滤器</p><p>什么是布隆过滤器，以下摘自百度百科：</p>',100),V={href:"https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8/9794473?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},A={href:"https://baike.baidu.com/item/%E6%A3%80%E7%B4%A2%E9%80%9F%E5%BA%A6/20807841?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},F={href:"https://baike.baidu.com/item/%E5%93%88%E5%B8%8C%E8%A1%A8/5981869?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},U=o(`<p>布隆过滤器的特点是，高效地插入和查询，占用空间少；查询结果有不确定性，如果查询结果是存在则元素不一定存在，如果不存在则一定不存在；另外它只能添加元素不能删除元素，因为删除元素会增加误判率。</p><blockquote><p>比如：将商品 id 写入布隆过滤器，如果分 3 次 hash 此时在布隆过滤器有 3 个点，当从布隆过滤器查询该商品 id，通过 hash 找到了该商品 id 在过滤器中的点，此时返回 1，如果找不到一定会返回 0。</p></blockquote><p>所以，为了避免缓存穿透我们需要缓存预热将要查询的课程或商品信息的 id 提前存入布隆过滤器，添加数据时将信息的 id 也存入过滤器，当去查询一个数据时先在布隆过滤器中找一下如果没有到到就说明不存在，此时直接返回。</p><p>实现方法有：</p><p>Google 工具包 Guava 实现。</p><p>redisson 。</p><p>2、缓存空值或特殊值</p><p>请求通过了第一步的校验，查询数据库得到的数据不存在，此时我们仍然去缓存数据，缓存一个空值或一个特殊值的数据。</p><p>但是要注意：如果缓存了空值或特殊值要设置一个短暂的过期时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CoursePublish</span> <span class="token function">getCoursePublishCache</span><span class="token punctuation">(</span><span class="token class-name">Long</span> courseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//查询缓存</span>
   <span class="token class-name">Object</span>  jsonObj <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>jsonObj<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> jsonString <span class="token operator">=</span> jsonObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//从数据库查询</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;从数据库查询数据...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token function">getCoursePublish</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置过期时间300秒</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再测试，虽然还存在个别请求去查询数据库，但不是所有请求都去查询数据库，基本上都命中缓存。</p><h3 id="_3-3-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3-3-缓存雪崩" aria-hidden="true">#</a> <strong>3.3 缓存雪崩</strong></h3><h4 id="_3-3-1-什么是缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3-3-1-什么是缓存雪崩" aria-hidden="true">#</a> <strong>3.3.1 什么是缓存雪崩</strong></h4><p>缓存雪崩是缓存中大量 key 失效后当高并发到来时导致大量请求到数据库，瞬间耗尽数据库资源，导致数据库无法使用。</p><p>造成缓存雪崩问题的原因是是大量 key 拥有了相同的过期时间，比如对课程信息设置缓存过期时间为 10 分钟，在大量请求同时查询大量的课程信息时，此时就会有大量的课程存在相同的过期时间，一旦失效将同时失效，造成雪崩问题。</p><h4 id="_3-3-2-解决缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3-3-2-解决缓存雪崩" aria-hidden="true">#</a> <strong>3.3.2 解决缓存雪崩</strong></h4><p>如何解决缓存雪崩？</p><p>1、使用同步锁控制查询数据库的线程</p><p>使用同步锁控制查询数据库的线程，只允许有一个线程去查询数据库，查询得到数据后存入缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//查询数据库</span>
  <span class="token comment">//存入缓存</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、对同一类型信息的 key 设置不同的过期时间</p><p>通常对一类信息的 key 设置的过期时间是相同的，这里可以在原有固定时间的基础上加上一个随机时间使它们的过期时间都不相同。</p><p>示例代码如下：</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>
//设置过期时间300秒
redisTemplate.opsForValue().set(&quot;course:&quot; + courseId, JSON.toJSONString(coursePublish),300+new Random().nextInt(100), TimeUnit.SECONDS);

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、缓存预热</p><p>不用等到请求到来再去查询数据库存入缓存，可以提前将数据存入缓存。使用缓存预热机制通常有专门的后台程序去将数据库的数据同步到缓存。</p><h3 id="_3-4-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_3-4-缓存击穿" aria-hidden="true">#</a> <strong>3.4 缓存击穿</strong></h3><h4 id="_3-4-1-什么是缓存击穿" tabindex="-1"><a class="header-anchor" href="#_3-4-1-什么是缓存击穿" aria-hidden="true">#</a> <strong>3.4.1 什么是缓存击穿</strong></h4><p>缓存击穿是指大量并发访问同一个热点数据，当热点数据失效后同时去请求数据库，瞬间耗尽数据库资源，导致数据库无法使用。</p><p>比如某手机新品发布，当缓存失效时有大量并发到来导致同时去访问数据库。</p><p><img src="`+j+`" alt="image-20230617145209041"></p><h4 id="_3-4-2-解决缓存击穿" tabindex="-1"><a class="header-anchor" href="#_3-4-2-解决缓存击穿" aria-hidden="true">#</a> <strong>3.4.2 解决缓存击穿</strong></h4><p>如何解决缓存击穿？</p><p>1、使用同步锁控制查询数据库的线程</p><p>使用同步锁控制查询数据库的代码，只允许有一个线程去查询数据库，查询得到数据库存入缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//查询数据库</span>
  <span class="token comment">//存入缓存</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、热点数据不过期</p><p>可以由后台程序提前将热点数据加入缓存，缓存过期时间不过期，由后台程序做好缓存同步。</p><p>下边使用 synchronized 对代码加锁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span>  <span class="token class-name">CoursePublish</span> <span class="token function">getCoursePublishCache</span><span class="token punctuation">(</span><span class="token class-name">Long</span> courseId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 这里的this是当前实例 默认为单例bean</span>
        <span class="token comment">//查询缓存</span>
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=========从数据库查询==========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//从数据库查询</span>
            <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token function">getCoursePublish</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">//设置过期时间300秒</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试，吞吐量有 1300 左右</p><p><img src="`+P+`" alt="image-20230617145239557"></p><p>对上边的代码进行优化，对查询缓存的代码不用 synchronized 加锁控制，只对查询数据库进行加锁，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span>  <span class="token class-name">CoursePublish</span> <span class="token function">getCoursePublishCache</span><span class="token punctuation">(</span><span class="token class-name">Long</span> courseId<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token comment">//查询缓存</span>
         <span class="token class-name">Object</span>  jsonObj <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>jsonObj<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> jsonString <span class="token operator">=</span> jsonObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Object</span>  jsonObj <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>jsonObj<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                   <span class="token class-name">String</span> jsonString <span class="token operator">=</span> jsonObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=========从数据库查询==========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//从数据库查询</span>
                <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token function">getCoursePublish</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">//设置过期时间300秒</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试，查询数据库只发生一次，整个测试过程的吞吐量在 3800 左右。</p><p><img src="`+x+'" alt="image-20230617145253990"></p><h4 id="_3-4-3-小结" tabindex="-1"><a class="header-anchor" href="#_3-4-3-小结" aria-hidden="true">#</a> <strong>3.4.3 小结</strong></h4><p>1）缓存穿透：</p><p>去访问一个数据库不存在的数据无法将数据进行缓存，导致查询数据库，当并发较大就会对数据库造成压力。缓存穿透可以造成数据库瞬间压力过大，连接数等资源用完，最终数据库拒绝连接不可用。</p><p>解决的方法：</p><p>缓存一个 null 值。</p><p>使用布隆过滤器。</p><p>2）缓存雪崩：</p><p>缓存中大量 key 失效后当高并发到来时导致大量请求到数据库，瞬间耗尽数据库资源，导致数据库无法使用。</p><p>造成缓存雪崩问题的原因是是大量 key 拥有了相同的过期时间。</p><p>解决办法：</p><p>使用同步锁控制</p><p>对同一类型信息的 key 设置不同的过期时间，比如：使用固定数+随机数作为过期时间。</p><p>3）缓存击穿</p><p>大量并发访问同一个热点数据，当热点数据失效后同时去请求数据库，瞬间耗尽数据库资源，导致数据库无法使用。</p><p>解决办法：</p><p>使用同步锁控制</p><p>设置 key 永不过期</p><p>无中生有是穿透，布隆过滤 null 隔离。<br> 缓存击穿 key 过期， 锁与非期解难题。<br> 大量过期成雪崩，过期时间要随机。<br> 面试必考三兄弟，可用限流来保底。</p><p>限流技术方案：</p><p>alibaba/Sentinel</p><p>nginx+Lua</p><h3 id="_3-5-分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-5-分布式锁" aria-hidden="true">#</a> <strong>3.5 分布式锁</strong></h3><h4 id="_3-5-1-本地锁的问题" tabindex="-1"><a class="header-anchor" href="#_3-5-1-本地锁的问题" aria-hidden="true">#</a> <strong>3.5.1 本地锁的问题</strong></h4><p>上边的程序使用了同步锁解决了缓存击穿、缓存雪崩的问题，保证同一个 key 过期后只会查询一次数据库。</p><p>如果将同步锁的程序分布式部署在多个虚拟机上则无法保证同一个 key 只会查询一次数据库，如下图：</p><p><img src="'+q+'" alt="image-20230617145310286"></p><p>一个同步锁程序只能保证同一个虚拟机中多个线程只有一个线程去数据库，如果高并发通过网关负载均衡转发给各个虚拟机，此时就会存在多个线程去查询数据库情况，因为虚拟机中的锁只能保证该虚拟机自己的线程去同步执行，无法跨虚拟机保证同步执行。</p><p>我们将虚拟机内部的锁叫本地锁，本地锁只能保证所在虚拟机的线程同步执行。</p><p>下边进行测试：</p><p>启动三个内容管理服务：</p><p><img src="'+I+'" alt="image-20230617145321574"></p><p>通过网关访问课程查询，网关通过负载均衡将请求转发给三个服务。</p><p>通过测试发现，有两个服务各有一次数据库查询，这说明本地锁无法跨虚拟机保证同步执行。</p><h4 id="_3-5-2-什么是分布锁" tabindex="-1"><a class="header-anchor" href="#_3-5-2-什么是分布锁" aria-hidden="true">#</a> <strong>3.5.2 什么是分布锁</strong></h4><p>本地锁只能控制所在虚拟机中的线程同步执行，现在要实现分布式环境下所有虚拟机中的线程去同步执行就需要让多个虚拟机去共用一个锁，虚拟机可以分布式部署，锁也可以分布式部署，如下图：</p><p><img src="'+C+`" alt="image-20230617145326516"></p><p>虚拟机都去抢占同一个锁，锁是一个单独的程序提供加锁、解锁服务，谁抢到锁谁去查询数据库。</p><p>该锁已不属于某个虚拟机，而是分布式部署，由多个虚拟机所共享，这种锁叫分布式锁。</p><h4 id="_3-5-3-分布式锁的实现方案" tabindex="-1"><a class="header-anchor" href="#_3-5-3-分布式锁的实现方案" aria-hidden="true">#</a> <strong>3.5.3 分布式锁的实现方案</strong></h4><p>实现分布式锁的方案有很多，常用的如下：</p><p>1、基于数据库实现分布锁</p><p>利用数据库主键唯一性的特点，或利用数据库唯一索引的特点，多个线程同时去插入相同的记录，谁插入成功谁就抢到锁。</p><p>2、基于 redis 实现锁</p><p>redis 提供了分布式锁的实现方案，比如：SETNX、set nx、redisson 等。</p><p>拿 SETNX 举例说明，SETNX 命令的工作过程是去 set 一个不存在的 key，多个线程去设置同一个 key 只会有一个线程设置成功，设置成功的的线程拿到锁。</p><p>3、使用 zookeeper 实现</p><p>zookeeper 是一个分布式协调服务，主要解决分布式程序之间的同步的问题。zookeeper 的结构类似的文件目录，多线程向 zookeeper 创建一个子目录(节点)只会有一个创建成功，利用此特点可以实现分布式锁，谁创建该结点成功谁就获得锁。</p><h4 id="_3-5-4-redis-nx-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-5-4-redis-nx-实现分布式锁" aria-hidden="true">#</a> <strong>3.5.4 Redis NX 实现分布式锁</strong></h4><p>redis 实现分布式锁的方案可以在 redis.cn 网站查阅，地址http://www.redis.cn/commands/set.html</p><p>使用命令： SET resource-name anystring NX EX max-lock-time 即可实现。</p><p>NX：表示 key 不存在才设置成功。</p><p>EX：设置过期时间</p><p>这里启动三个 ssh 客户端，连接 redis: docker exec -it redis redis-cli</p><p>先认证: auth redis</p><p>同时向三个客户端发送测试命令如下：</p><p>表示设置 lock001 锁，value 为 001，过期时间为 30 秒</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">SET</span> lock001 <span class="token number">001</span> <span class="token constant">NX</span> <span class="token constant">EX</span> <span class="token number">30</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令发送成功，观察三个 ssh 客户端发现只有一个设置成功，其它两个设置失败，设置成功的请求表示抢到了 lock001 锁。</p><p>如何在代码中使用 Set nx 去实现分布锁呢？</p><p>使用 spring-boot-starter-data-redis 提供的 api 即可实现 set nx。</p><p>添加依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加依赖后，在 bean 中注入 restTemplate。</p><p>我们先分析一段伪代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>缓存中有<span class="token punctuation">)</span><span class="token punctuation">{</span>

  返回缓存中的数据
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

  获取分布式锁
  <span class="token keyword">if</span><span class="token punctuation">(</span>获取锁成功）<span class="token punctuation">{</span>
       <span class="token keyword">try</span><span class="token punctuation">{</span>
         查询数据库
      <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
         释放锁
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、获取分布式锁</p><p>使用 redisTemplate.opsForValue().setIfAbsent(key,vaue)获取锁</p><p>这里考虑一个问题，当 set nx 一个 key/value 成功 1 后，这个 key(就是锁)需要设置过期时间吗？</p><p>如果不设置过期时间当获取到了锁却没有执行 finally 这个锁将会一直存在，其它线程无法获取这个锁。</p><p>所以执行 set nx 时要指定过期时间，即使用如下的命令</p><p>SET resource-name anystring NX EX max-lock-time</p><blockquote><p>具体调用的方法是：redisTemplate.opsForValue().setIfAbsent(K var1, V var2, long var3, TimeUnit var5)</p></blockquote><p>2、如何释放锁</p><p>释放锁分为两种情况：key 到期自动释放，手动删除。</p><p>1）key 到期自动释放的方法</p><p>因为锁设置了过期时间，key 到期会自动释放，但是会存在一个问题就是 查询数据库等操作还没有执行完时 key 到期了，此时其它线程就抢到锁了，最终重复查询数据库执行了重复的业务操作。</p><p>怎么解决这个问题？</p><p>可以将 key 的到期时间设置的长一些，足以执行完成查询数据库并设置缓存等相关操作。</p><p>如果这样效率会低一些，另外这个时间值也不好把控。</p><p>2）手动删除锁</p><p>如果是采用手动删除锁可能和 key 到期自动删除有所冲突，造成删除了别人的锁。</p><p>比如：当查询数据库等业务还没有执行完时 key 过期了，此时其它线程占用了锁，当上一个线程执行查询数据库等业务操作完成后手动删除锁就把其它线程的锁给删除了。</p><p>要解决这个问题可以采用删除锁之前判断是不是自己设置的锁，伪代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>缓存中有<span class="token punctuation">)</span><span class="token punctuation">{</span>

  返回缓存中的数据
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

  获取分布式锁<span class="token operator">:</span> set lock <span class="token number">01</span> <span class="token class-name">NX</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>获取锁成功）<span class="token punctuation">{</span>
       <span class="token keyword">try</span><span class="token punctuation">{</span>
         查询数据库
      <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&quot;01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            释放锁<span class="token operator">:</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;del&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">}</span>

      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码第 11 行到 13 行非原子性，也会导致删除其它线程的锁。</p><p>查看文档上的说明：http://www.redis.cn/commands/set.html</p><p><img src="`+O+'" alt="image-20230617145442056"></p><p>在调用 setnx 命令设置 key/value 时，每个线程设置不一样的 value 值，这样当线程去删除锁时可以先根据 key 查询出来判断是不是自己当时设置的 vlaue，如果是则删除。</p><p>这整个操作是原子的，实现方法就是去执行上边的 lua 脚本。</p><p><em>Lua</em> 是一个小巧的脚本语言，redis 在 2.6 版本就支持通过执行 Lua 脚本保证多个命令的原子性。</p><p>什么是原子性？</p><p>这些指令要么全成功要么全失败。</p><p>以上就是使用 Redis Nx 方式实现分布式锁，为了避免删除别的线程设置的锁需要使用 redis 去执行 Lua 脚本的方式去实现，这样就具有原子性，但是过期时间的值设置不存在不精确的问题。</p><h4 id="_3-5-5-redisson-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-5-5-redisson-实现分布式锁" aria-hidden="true">#</a> <strong>3.5.5 Redisson 实现分布式锁</strong></h4><h5 id="_3-5-5-1-什么是-redisson" tabindex="-1"><a class="header-anchor" href="#_3-5-5-1-什么是-redisson" aria-hidden="true">#</a> <strong>3.5.5.1 什么是 Redisson</strong></h5><p>再查阅 文档http://www.redis.cn/commands/set.html</p><p><img src="'+T+'" alt="image-20230617145452903"></p><p>点击链接查看</p><p><img src="'+B+'" alt="image-20230617145457664"></p><p>我们选用 Java 的实现方案 https://github.com/redisson/redisson</p><p>Redisson 的文档地址：https://github.com/redisson/redisson/wiki/Table-of-Content</p>',147),z={href:"http://netty.io/",target:"_blank",rel:"noopener noreferrer"},X={href:"http://redis.cn/",target:"_blank",rel:"noopener noreferrer"},Q=o('<p><img src="'+N+'" alt="image-20230617145503410"></p><p>使用 Redisson 可以非常方便将 Java 本地内存中的常用数据结构的对象搬到分布式缓存 redis 中。</p><p>也可以将常用的并发编程工具如：AtomicLong、CountDownLatch、Semaphore 等支持分布式。</p><p>使用 RScheduledExecutorService 实现分布式调度服务。</p><p>支持数据分片，将数据分片存储到不同的 redis 实例中。</p><p>支持分布式锁，基于 Java 的 Lock 接口实现分布式锁，方便开发。</p><p>下边使用 Redisson 将 Queue 队列的数据存入 Redis，实现一个排队及出队的接口。</p><p><img src="'+J+`" alt="image-20230617145509114"></p><p>添加 redisson 的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从课程资料目录拷贝 singleServerConfig.yaml 到 config 工程下</p><p>在 redis 配置文件中添加：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">redisson</span><span class="token punctuation">:</span>
      <span class="token comment">#配置文件目录</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>singleServerConfig.yaml
      <span class="token comment">#config: classpath:clusterServersConfig.yaml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis 集群配置 clusterServersConfig.yaml.</p><p>Redisson 相比 set nx 实现分布式锁要简单的多，工作原理如下：</p><p><img src="`+L+`" alt="image-20230617145538711"></p><p><strong>加锁机制</strong></p><p>线程去获取锁，获取成功: 执行 lua 脚本，保存数据到 redis 数据库。</p><p>线程去获取锁，获取失败: 一直通过 while 循环尝试获取锁，获取成功后，执行 lua 脚本，保存数据到 redis</p><p><strong>WatchDog 自动延期看门狗机制</strong></p><p>第一种情况：在一个分布式环境下，假如一个线程获得锁后，突然服务器宕机了，那么这个时候在一定时间后这个锁会自动释放，你也可以设置锁的有效时间(当不设置默认 30 秒时），这样的目的主要是防止死锁的发生</p><blockquote><p>第二种情况：线程 A 业务还没有执行完，时间就过了，线程 A 还想持有锁的话，就会启动一个 watch dog 后台线程，不断的延长锁 key 的生存时间。</p></blockquote><p><strong>lua 脚本-保证原子性操作</strong></p><p>主要是如果你的业务逻辑复杂的话，通过封装在 lua 脚本中发送给 redis，而且 redis 是单线程的，这样就保证这段复杂业务逻辑执行的原子性</p><p>具体使用 RLock 操作分布锁，RLock 继承 JDK 的 Lock 接口，所以他有 Lock 接口的所有特性，比如 lock、unlock、trylock 等特性,同时它还有很多新特性：强制锁释放，带有效期的锁,。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RRLock</span> <span class="token punctuation">{</span>

   <span class="token comment">//----------------------Lock接口方法-----------------------</span>
    <span class="token doc-comment comment">/**
     * 加锁 锁的有效期默认30秒
     */</span>
    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token doc-comment comment">/**
     * 加锁 可以手动设置锁的有效时间
     *
     * <span class="token keyword">@param</span> <span class="token parameter">leaseTime</span> 锁有效时间
     * <span class="token keyword">@param</span> <span class="token parameter">unit</span>      时间单位 小时、分、秒、毫秒等
     */</span>
    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * tryLock()方法是有返回值的，用来尝试获取锁，
     * 如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false .
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，
     * 只不过区别在于这个方法在拿不到锁时会等待一定的时间，
     * 在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">time</span> 等待时间
     * <span class="token keyword">@param</span> <span class="token parameter">unit</span> 时间单位 小时、分、秒、毫秒等
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 比上面多一个参数，多添加一个锁的有效时间
     *
     * <span class="token keyword">@param</span> <span class="token parameter">waitTime</span>  等待时间
     * <span class="token keyword">@param</span> <span class="token parameter">leaseTime</span> 锁有效时间
     * <span class="token keyword">@param</span> <span class="token parameter">unit</span>      时间单位 小时、分、秒、毫秒等
     * waitTime 大于 leaseTime
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 解锁
     */</span>
    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>lock()</strong>：</p><p>此方法为加锁，但是锁的有效期采用<strong>默认 30 秒</strong></p><p>如果主线程未释放，且当前锁未调用 unlock 方法，则进入到<strong>watchDog 机制</strong></p><p>如果主线程未释放，且当前锁调用 unlock 方法，则直接释放锁</p><h5 id="_3-5-5-3-分布式锁避免缓存击穿" tabindex="-1"><a class="header-anchor" href="#_3-5-5-3-分布式锁避免缓存击穿" aria-hidden="true">#</a> <strong>3.5.5.3 分布式锁避免缓存击穿</strong></h5><p>下边使用分布式锁修改查询课程信息的接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Redisson分布式锁</span>
<span class="token keyword">public</span>  <span class="token class-name">CoursePublish</span> <span class="token function">getCoursePublishCache</span><span class="token punctuation">(</span><span class="token class-name">Long</span> courseId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//查询缓存</span>
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">//每门课程设置一个锁</span>
            <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;coursequerylock:&quot;</span><span class="token operator">+</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取锁</span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                jsonString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">CoursePublish</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=========从数据库查询==========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//从数据库查询</span>
                <span class="token class-name">CoursePublish</span> coursePublish <span class="token operator">=</span> <span class="token function">getCoursePublish</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;course:&quot;</span> <span class="token operator">+</span> courseId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>coursePublish<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> coursePublish<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">//释放锁</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动多个内容管理服务实例，使用 JMeter 压力测试，只有一个实例查询一次数据库。</p><p>测试 Redisson 自动续期功能。</p><p>在查询数据库处添加休眠，观察锁是否会自动续期。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function G(H,K){const p=c("router-link"),e=c("ExternalLinkIcon");return i(),u("div",null,[M,n("nav",R,[n("ul",null,[n("li",null,[a(p,{to:"#_1-优化需求"},{default:t(()=>[s("1 优化需求")]),_:1})]),n("li",null,[a(p,{to:"#_2-压力测试"},{default:t(()=>[s("2 压力测试")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_2-1-性能指标"},{default:t(()=>[s("2.1 性能指标")]),_:1})]),n("li",null,[a(p,{to:"#_2-2-安装-jmeter"},{default:t(()=>[s("2.2 安装 Jmeter")]),_:1})]),n("li",null,[a(p,{to:"#_2-3-压力测试样本数-200-个线程-每个线程请求-100-次-共-20000-次"},{default:t(()=>[s("2.3 压力测试样本数：200 个线程，每个线程请求 100 次，共 20000 次")]),_:1})]),n("li",null,[a(p,{to:"#_2-4-优化日志"},{default:t(()=>[s("2.4 优化日志")]),_:1})])])]),n("li",null,[a(p,{to:"#_3-缓存优化"},{default:t(()=>[s("3 缓存优化")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_3-1-redis-缓存"},{default:t(()=>[s("3.1 redis 缓存")]),_:1})]),n("li",null,[a(p,{to:"#_3-2-缓存穿透问题"},{default:t(()=>[s("3.2 缓存穿透问题")]),_:1})]),n("li",null,[a(p,{to:"#_3-3-缓存雪崩"},{default:t(()=>[s("3.3 缓存雪崩")]),_:1})]),n("li",null,[a(p,{to:"#_3-4-缓存击穿"},{default:t(()=>[s("3.4 缓存击穿")]),_:1})]),n("li",null,[a(p,{to:"#_3-5-分布式锁"},{default:t(()=>[s("3.5 分布式锁")]),_:1})])])])])]),D,n("p",null,[s("布隆过滤器可以用于检索一个元素是否在一个集合中。如果想要判断一个元素是不是在一个集合里，一般想到的是将所有元素保存起来，然后通过比较确定。"),n("a",V,[s("链表"),a(e)]),s("，树等等数据结构都是这种思路. 但是随着集合中元素的增加，我们需要的存储空间越来越大，"),n("a",A,[s("检索速度"),a(e)]),s("也越来越慢(O(n),O(logn))。不过世界上还有一种叫作散列表（又叫"),n("a",F,[s("哈希表"),a(e)]),s("，Hash table）的数据结构。它可以通过一个 Hash 函数将一个元素映射成一个位阵列（Bit array）中的一个点。这样一来，我们只要看看这个点是不是 1 就可以知道集合中有没有它了。这就是布隆过滤器的基本思想。")]),U,n("p",null,[s("Redisson 底层采用的是"),n("a",z,[s("Netty"),a(e)]),s(" 框架。支持"),n("a",X,[s("Redis"),a(e)]),s(" 2.8 以上版本，支持 Java1.6+以上版本。Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的 Java 常用对象，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) 。")]),Q])}const Y=l(E,[["render",G],["__file","index.html.vue"]]);export{Y as default};
