import{_ as p,r as o,o as l,c as i,a as n,e as t,w as e,b as s,d as c}from"./app-a153c100.js";const u={},r=n("h1",{id:"_02-io-二",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_02-io-二","aria-hidden":"true"},"#"),s(" 02 - IO（二） 📝")],-1),d={class:"table-of-contents"},k=c(`<h2 id="io-综合练习" tabindex="-1"><a class="header-anchor" href="#io-综合练习" aria-hidden="true">#</a> IO 综合练习</h2><h2 id="缓冲流-续" tabindex="-1"><a class="header-anchor" href="#缓冲流-续" aria-hidden="true">#</a> 缓冲流(续)</h2><h3 id="flush" tabindex="-1"><a class="header-anchor" href="#flush" aria-hidden="true">#</a> flush()</h3><p>对于字符输出流，系统会自带缓冲区，默认 write 时，数据会先存储到缓冲区中，一旦执行 close()方法，此时缓冲区中的数据会全部同步到目标输出源中，若此时还不能 close，但是需要将数据实时同步时，可以通过调用输出流的 flush 方法，强制刷新:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;day2-IO02/c.txt&quot;));</span>
<span class="token comment">//        bw.write(&quot;忽闻岸上踏歌声&quot;);</span>
<span class="token comment">//        bw.flush();</span>
<span class="token comment">//        bw.close();</span>

<span class="token comment">//        FileOutputStream fos = new FileOutputStream(&quot;day2-IO02/c.txt&quot;,true);</span>
<span class="token comment">//        fos.write(&quot;李白乘舟将欲行&quot;.getBytes());</span>

        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;day2-IO02/c.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;忽闻岸上踏歌声&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将缓冲区的内容，刷新到目标输出源中</span>
        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//关闭流之前会先执行flush</span>
        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打印流-输出" tabindex="-1"><a class="header-anchor" href="#打印流-输出" aria-hidden="true">#</a> 打印流（输出）</h2><p>在 IO 中提供了两个用于输出的流：打印流；这两个流主要区别在于一个用于字符输出，另一个用于字节输出：</p><ul><li>PrintWriter</li><li>PrintStream</li></ul><h3 id="printstream" tabindex="-1"><a class="header-anchor" href="#printstream" aria-hidden="true">#</a> PrintStream</h3><p>字节打印流</p><h4 id="常见的构造器" tabindex="-1"><a class="header-anchor" href="#常见的构造器" aria-hidden="true">#</a> 常见的构造器</h4><ul><li>PrintStream(OutputStream os)</li><li>PrintStream(OutputStream os,boolean autoFlush)</li><li>PrintStream(String fileName)</li></ul><h4 id="常见方法" tabindex="-1"><a class="header-anchor" href="#常见方法" aria-hidden="true">#</a> 常见方法</h4><ul><li>print(..)</li><li>println(..)</li><li>write(..)</li></ul><h3 id="printwriter" tabindex="-1"><a class="header-anchor" href="#printwriter" aria-hidden="true">#</a> PrintWriter</h3><p>字符打印流</p><h4 id="常见构造器" tabindex="-1"><a class="header-anchor" href="#常见构造器" aria-hidden="true">#</a> 常见构造器</h4><ul><li>PrintWriter(Writer w)</li><li>PrintWriter(Writer out,boolean autoFlush)</li><li>PrintWriter(String fileName)</li></ul><h4 id="常见方法-1" tabindex="-1"><a class="header-anchor" href="#常见方法-1" aria-hidden="true">#</a> 常见方法</h4><ul><li>print(..)</li><li>println(..)</li><li>write(..)</li></ul><h2 id="randomaccessfile" tabindex="-1"><a class="header-anchor" href="#randomaccessfile" aria-hidden="true">#</a> RandomAccessFile</h2><p>RandomAccessFile 是 javaIO 中提供的一个功能丰富的特殊流，该流包含了对于文件的读写操作，具体的使用方式和 FileInputStream 与 FileOutputStream 几乎一致，除此之外，RandomAccessFile 还提供了对于元数据(原始数据类型)的读写操作。</p><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h3><ul><li>RandomAccessFile(File file,String mode)</li><li>RandomAccessFile(String fname,String mode)</li></ul><blockquote><p>其中第二个参数 mode 的可取值为：</p><ul><li><p>&quot;r&quot; 以只读方式打开。调用结果对象的任何 write 方法都将导致抛出 IOException。</p></li><li><p>&quot;rw&quot; 打开以便读取和写入。如果该文件尚不存在，则尝试创建该文件。</p></li><li><p>&quot;rws&quot; 打开以便读取和写入，对于 &quot;rw&quot;，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备。</p></li><li><p>&quot;rwd&quot; 打开以便读取和写入，对于 &quot;rw&quot;，还要求对文件内容的每个更新都同步写入到底层存储设备。</p></li></ul></blockquote><h3 id="常见方法-2" tabindex="-1"><a class="header-anchor" href="#常见方法-2" aria-hidden="true">#</a> 常见方法</h3><ul><li>read(byte[] b)</li><li>readInt()</li><li>readBoolean()</li><li>...</li><li>write(byte[] b,int offset,int len)</li><li>write(byte[] b)</li><li>writeInt(int i)</li><li>writeBoolean(boolean b)</li><li>getFilePointer() :获取当前文件的指针偏移位置</li><li>seek(int position)：设置文件指针到目标位置，在该位置发生下一次读写</li></ul><p>基本使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建一个随机访问文件流对象</span>
<span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;day2-IO02/record.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//以元数据的形式写入文件，在文件中占据4个字节容量</span>
raf<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前文件指针位置:&quot;</span><span class="token operator">+</span>raf<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将文件指针跳转到指定的位置发生下一次读取或者写入</span>
raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//long lon = raf.readLong();</span>
<span class="token comment">//System.out.println(lon);</span>
<span class="token comment">//读取元数据</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="综合案例-文件断点拷贝" tabindex="-1"><a class="header-anchor" href="#综合案例-文件断点拷贝" aria-hidden="true">#</a> 综合案例:文件断点拷贝</h4><p>实现原理:</p><p>文件正常拷贝的过程中，由于客观原因出现异常，导致中途停止拷贝；下一次拷贝时读取目标文件中上次拷贝的终止位置，将文件指针设置到该位置，继续拷贝。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> source  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\素材\\\\视频\\\\larva搞笑虫子\\\\34.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;day2-IO02&quot;</span><span class="token punctuation">,</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//读取</span>
<span class="token class-name">RandomAccessFile</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//写入</span>
<span class="token class-name">RandomAccessFile</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取目标文件的目前文件指针</span>
<span class="token comment">//        long pos = writer.getFilePointer();</span>
<span class="token comment">//获取目标流中内容的长度</span>
<span class="token keyword">long</span> pos <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//            if(count==5000){</span>
    <span class="token comment">//                System.out.println(10/0);</span>
    <span class="token comment">//            }</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象序列化" tabindex="-1"><a class="header-anchor" href="#对象序列化" aria-hidden="true">#</a> 对象序列化</h2><p>​ 目前为止所了解所有流，操作的一般都是文本文件(字符流)和二进制的文件(字节流)；但是如果需要将一个 java 对象写入文件中此时字节流与字符流都无法满足需求；在实际项目中经常会涉及到一些缓存技术，而缓存中(内存级别存储)可以存储 java 对象，当外部需要对象时直接从缓存中获取，减少对于数据的 IO 操作。</p><p>​ 因此，针对以上需求，java 中提供了对象序列化技术，允许将一个 java 对象存储到文件，或者通过网络发送到指定的目标主机；同时也可以通过文件(或者网络)直接读取这些存储的 java 对象，对于 java 对象的读写操作，IO 中称之为对象的序列化（写）与反序列化(读)。通过对象序列化机制可以最大限度的保证数据的完整性。</p><p>java 中用于进行对象序列化操作的两个流称之为对象流:</p><ul><li>ObjectOutputStream</li><li>ObjectInputStream</li></ul><p>对象实现序列化的前提条件为必须让目标类型实现以下两个接口中的一个：</p><ul><li><strong>Serializable（推荐）</strong></li><li>Externalizable</li></ul><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Player</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;嗜血狂魔&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">setHp</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">setPower</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token string">&quot;新手村&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        try (</span>
<span class="token comment">//                PrintStream ps = new PrintStream(&quot;D:\\\\IDEA_WorkSpase\\\\Goover\\\\java高级\\\\Day02-IO\\\\c.txt&quot;)</span>
<span class="token comment">//        ) {</span>
<span class="token comment">//            //打印对象 事实上写进去的是一串字符串(内部调用了toSring方法)</span>
<span class="token comment">//            ps.print(p);</span>
<span class="token comment">//        }</span>

<span class="token doc-comment comment">/**
         * 序列化的过程
         */</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\IDEA_WorkSpase\\\\Goover\\\\java高级\\\\Day02-IO\\\\c.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;day2-IO02/record.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj  <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项：</p><p>对于需要进行序列化操作的对象必须让其类实现<code>Serializable</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

   <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> hp<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> mp<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> power<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>

   <span class="token comment">//setter/getter</span>
   <span class="token comment">//toString</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="transient-关键字" tabindex="-1"><a class="header-anchor" href="#transient-关键字" aria-hidden="true">#</a> transient 关键字</h3><p>对象序列化本质就是以<strong>元数据</strong>的形式将对象中的属性值写入到文件中，对于方法并不会序列化；对于不需要序列化的属性可以使用<code>transient</code>关键字进行修饰。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> power<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,48);function m(v,b){const a=o("router-link");return l(),i("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#io-综合练习"},{default:e(()=>[s("IO 综合练习")]),_:1})]),n("li",null,[t(a,{to:"#缓冲流-续"},{default:e(()=>[s("缓冲流(续)")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#flush"},{default:e(()=>[s("flush()")]),_:1})])])]),n("li",null,[t(a,{to:"#打印流-输出"},{default:e(()=>[s("打印流（输出）")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#printstream"},{default:e(()=>[s("PrintStream")]),_:1})]),n("li",null,[t(a,{to:"#printwriter"},{default:e(()=>[s("PrintWriter")]),_:1})])])]),n("li",null,[t(a,{to:"#randomaccessfile"},{default:e(()=>[s("RandomAccessFile")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#构造器"},{default:e(()=>[s("构造器")]),_:1})]),n("li",null,[t(a,{to:"#常见方法-2"},{default:e(()=>[s("常见方法")]),_:1})])])]),n("li",null,[t(a,{to:"#对象序列化"},{default:e(()=>[s("对象序列化")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#序列化"},{default:e(()=>[s("序列化")]),_:1})]),n("li",null,[t(a,{to:"#反序列化"},{default:e(()=>[s("反序列化")]),_:1})]),n("li",null,[t(a,{to:"#transient-关键字"},{default:e(()=>[s("transient 关键字")]),_:1})])])])])]),k])}const f=p(u,[["render",m],["__file","index.html.vue"]]);export{f as default};
