import{_ as i,r as l,o,c,a,e as n,w as t,b as e,d as r}from"./app-a153c100.js";const p="/MyBlog/assets/image-20210423191210349-46640728.png",d="/MyBlog/assets/image-20210713104511055-1ba38326.png",u="/MyBlog/assets/image-20210713104808909-cd3479bc.png",m="/MyBlog/assets/image-20210713105135701-8e3afb2f.png",b="/MyBlog/assets/image-20210713105339785-b39744a3.png",v="/MyBlog/assets/image-20210713105829435-4baf92e3.png",h="/MyBlog/assets/image-20210717212345165-5014f598.png",g="/MyBlog/assets/image-20210717222833196-62143779.png",k="/MyBlog/assets/image-20210717223057902-4021e495.png",q="/MyBlog/assets/image-20210717223421750-e6095333.png",_="/MyBlog/assets/image-20210717223320238-56ec0ef4.png",f="/MyBlog/assets/image-20210717223603628-a407fd64.png",x="/MyBlog/assets/image-20210717223800203-b706ca9d.png",y="/MyBlog/assets/image-20210717231751411-68caad2e.png",M="/MyBlog/assets/image-20210717231829505-42ca3232.png",B="/MyBlog/assets/image-20210717231958996-edd09826.png",Q="/MyBlog/assets/image-20210717232108584-ad9930ae.png",R="/MyBlog/assets/image-20210717232257420-2e73e273.png",A="/MyBlog/assets/image-20210717232322646-fbbc47dd.png",D="/MyBlog/assets/image-20210717234329640-a6584c37.png",E="/MyBlog/assets/image-20210717234426209-33619081.png",T="/MyBlog/assets/image-20210718001909492-918ea15c.png",w="/MyBlog/assets/image-20210718002118357-d4f0dbca.png",S="/MyBlog/assets/image-20210718002253226-e8b2f3ca.png",U="/MyBlog/assets/image-20210718002342603-65546e46.png",I="/MyBlog/assets/image-20210718002422365-689e4085.png",F={},L=a("h1",{id:"rabbitmq-部署指南-🧙",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#rabbitmq-部署指南-🧙","aria-hidden":"true"},"#"),e(" RabbitMQ 部署指南 🧙")],-1),P={class:"table-of-contents"},C=r(`<h2 id="_1-单机部署" tabindex="-1"><a class="header-anchor" href="#_1-单机部署" aria-hidden="true">#</a> 1.单机部署</h2><p>我们在 Centos7 虚拟机中使用 Docker 来安装。</p><h1 id="_1-1-下载镜像" tabindex="-1"><a class="header-anchor" href="#_1-1-下载镜像" aria-hidden="true">#</a> 1.1.下载镜像</h1><p>方式一：在线拉取</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：从本地加载</p><p>在课前资料已经提供了镜像包：</p><p><img src="`+p+`" alt="image-20210423191210349"></p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> mq.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-安装-mq" tabindex="-1"><a class="header-anchor" href="#_1-2-安装-mq" aria-hidden="true">#</a> 1.2.安装 MQ</h3><p>执行下面的命令来运行 MQ 容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
 <span class="token parameter variable">-v</span> mq-plugins:/plugins <span class="token punctuation">\\</span>
 <span class="token parameter variable">--name</span> mq <span class="token punctuation">\\</span>
 <span class="token parameter variable">--hostname</span> mq1 <span class="token punctuation">\\</span>
 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span>
 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span>
 <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
 rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-安装-delayexchange-插件" tabindex="-1"><a class="header-anchor" href="#_2-安装-delayexchange-插件" aria-hidden="true">#</a> 2.安装 DelayExchange 插件</h2><p>官方的安装指南地址为：https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</p><p>上述文档是基于 linux 原生安装 RabbitMQ，然后安装插件。</p><p>因为我们之前是基于 Docker 安装 RabbitMQ，所以下面我们会讲解基于 Docker 来安装 RabbitMQ 插件。</p><h3 id="_2-1-下载插件" tabindex="-1"><a class="header-anchor" href="#_2-1-下载插件" aria-hidden="true">#</a> 2.1.下载插件</h3><p>RabbitMQ 有一个官方的插件社区，地址为：https://www.rabbitmq.com/community-plugins.html</p><p>其中包含各种各样的插件，包括我们要使用的 DelayExchange 插件：</p><p><img src="`+d+'" alt="image-20210713104511055"></p><p>大家可以去对应的 GitHub 页面下载 3.8.9 版本的插件，地址为https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9这个对应RabbitMQ的3.8.5以上版本。</p><p>课前资料也提供了下载好的插件：</p><p><img src="'+u+`" alt="image-20210713104808909"></p><h3 id="_2-2-上传插件" tabindex="-1"><a class="header-anchor" href="#_2-2-上传插件" aria-hidden="true">#</a> 2.2.上传插件</h3><p>因为我们是基于 Docker 安装，所以需要先查看 RabbitMQ 的插件目录对应的数据卷。如果不是基于 Docker 的同学，请参考第一章部分，重新创建 Docker 容器。</p><p>我们之前设定的 RabbitMQ 的数据卷名称为<code>mq-plugins</code>，所以我们使用下面命令查看数据卷：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect mq-plugins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以得到下面结果：</p><p><img src="`+m+'" alt="image-20210713105135701"></p><p>接下来，将插件上传到这个目录即可：</p><p><img src="'+b+`" alt="image-20210713105339785"></p><h3 id="_2-3-安装插件" tabindex="-1"><a class="header-anchor" href="#_2-3-安装插件" aria-hidden="true">#</a> 2.3.安装插件</h3><p>最后就是安装了，需要进入 MQ 容器内部来执行安装。我的容器名为<code>mq</code>，所以执行下面命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行时，请将其中的 <code>-it</code> 后面的<code>mq</code>替换为你自己的容器名.</p><p>进入容器内部后，执行下面命令开启插件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下：</p><p><img src="`+v+`" alt="image-20210713105829435"></p><h2 id="_3-集群部署" tabindex="-1"><a class="header-anchor" href="#_3-集群部署" aria-hidden="true">#</a> 3.集群部署</h2><p>接下来，我们看看如何安装 RabbitMQ 的集群。</p><h3 id="_2-1-集群分类" tabindex="-1"><a class="header-anchor" href="#_2-1-集群分类" aria-hidden="true">#</a> 2.1.集群分类</h3><p>在 RabbitMQ 的官方文档中，讲述了两种集群的配置方式：</p><ul><li>普通模式：普通模式集群不进行数据同步，每个 MQ 都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有 2 个 MQ：mq1，和 mq2，如果你的消息在 mq1，而你连接到了 mq2，那么 mq2 会去 mq1 拉取消息，然后返回给你。如果 mq1 宕机，消息就会丢失。</li><li>镜像模式：与普通模式不同，队列会在各个 mq 的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>我们先来看普通模式集群，我们的计划部署 3 节点的 mq 集群：</p><table><thead><tr><th>主机名</th><th>控制台端口</th><th>amqp 通信端口</th></tr></thead><tbody><tr><td>mq1</td><td>8081 ---&gt; 15672</td><td>8071 ---&gt; 5672</td></tr><tr><td>mq2</td><td>8082 ---&gt; 15672</td><td>8072 ---&gt; 5672</td></tr><tr><td>mq3</td><td>8083 ---&gt; 15672</td><td>8073 ---&gt; 5672</td></tr></tbody></table><p>集群中的节点标示默认都是：<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为：</p><ul><li>rabbit@mq1</li><li>rabbit@mq2</li><li>rabbit@mq3</li></ul><h3 id="_2-2-获取-cookie" tabindex="-1"><a class="header-anchor" href="#_2-2-获取-cookie" aria-hidden="true">#</a> 2.2.获取 cookie</h3><p>RabbitMQ 底层依赖于 Erlang，而 Erlang 虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个 RabbitMQ 节点使用 cookie 来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。cookie 只是一串最多 255 个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p><p>我们先在之前启动的 mq 容器中获取一个 cookie 值，作为集群的 cookie。执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到 cookie 值如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FXZMCVGLBIXZCDEMMVZQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，停止并删除当前的 mq 容器，我们重新搭建集群。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+h+`" alt="image-20210717212345165"></p><h3 id="_2-3-准备集群配置" tabindex="-1"><a class="header-anchor" href="#_2-3-准备集群配置" aria-hidden="true">#</a> 2.3.准备集群配置</h3><p>在/tmp 目录新建一个配置文件 rabbitmq.conf：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> rabbitmq.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件内容如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>loopback_users.guest = false
listeners.tcp.default = 5672
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
cluster_formation.classic_config.nodes.1 = rabbit@mq1
cluster_formation.classic_config.nodes.2 = rabbit@mq2
cluster_formation.classic_config.nodes.3 = rabbit@mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再创建一个文件，记录 cookie</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建cookie文件</span>
<span class="token function">touch</span> .erlang.cookie
<span class="token comment"># 写入cookie</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;FXZMCVGLBIXZCDEMMVZQ&quot;</span> <span class="token operator">&gt;</span> .erlang.cookie
<span class="token comment"># 修改cookie文件的权限</span>
<span class="token function">chmod</span> <span class="token number">600</span> .erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备三个目录,mq1、mq2、mq3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> mq1 mq2 mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后拷贝 rabbitmq.conf、cookie 文件到 mq1、mq2、mq3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 拷贝</span>
<span class="token function">cp</span> rabbitmq.conf mq1
<span class="token function">cp</span> rabbitmq.conf mq2
<span class="token function">cp</span> rabbitmq.conf mq3
<span class="token function">cp</span> .erlang.cookie mq1
<span class="token function">cp</span> .erlang.cookie mq2
<span class="token function">cp</span> .erlang.cookie mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-启动集群" tabindex="-1"><a class="header-anchor" href="#_2-4-启动集群" aria-hidden="true">#</a> 2.4.启动集群</h3><p>创建一个网络：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create mq-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume create</p><p>运行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq1 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq1 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8071</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8081</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq2 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq2 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8072</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8082</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq3 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq3 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8073</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8083</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-测试" tabindex="-1"><a class="header-anchor" href="#_2-5-测试" aria-hidden="true">#</a> 2.5.测试</h3><p>在 mq1 这个节点上添加一个队列：</p><p><img src="`+g+'" alt="image-20210717222833196"></p><p>如图，在 mq2 和 mq3 两个控制台也都能看到：</p><p><img src="'+k+'" alt="image-20210717223057902"></p><h4 id="_2-5-1-数据共享测试" tabindex="-1"><a class="header-anchor" href="#_2-5-1-数据共享测试" aria-hidden="true">#</a> 2.5.1.数据共享测试</h4><p>点击这个队列，进入管理页面：</p><p><img src="'+q+'" alt="image-20210717223421750"></p><p>然后利用控制台发送一条消息到这个队列：</p><p><img src="'+_+'" alt="image-20210717223320238"></p><p>结果在 mq2、mq3 上都能看到这条消息：</p><p><img src="'+f+`" alt="image-20210717223603628"></p><h4 id="_2-5-2-可用性测试" tabindex="-1"><a class="header-anchor" href="#_2-5-2-可用性测试" aria-hidden="true">#</a> 2.5.2.可用性测试</h4><p>我们让其中一台节点 mq1 宕机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后登录 mq2 或 mq3 的控制台，发现 simple.queue 也不可用了：</p><p><img src="`+x+`" alt="image-20210717223800203"></p><p>说明数据并没有拷贝到 mq2 和 mq3。</p><h2 id="_4-镜像模式" tabindex="-1"><a class="header-anchor" href="#_4-镜像模式" aria-hidden="true">#</a> 4.镜像模式</h2><p>在刚刚的案例中，一旦创建队列的主机宕机，队列就会不可用。不具备高可用能力。如果要解决这个问题，必须使用官方提供的镜像集群方案。</p><p>官方文档地址：https://www.rabbitmq.com/ha.html</p><h3 id="_4-1-镜像模式的特征" tabindex="-1"><a class="header-anchor" href="#_4-1-镜像模式的特征" aria-hidden="true">#</a> 4.1.镜像模式的特征</h3><p>默认情况下，队列只保存在创建该队列的节点上。而镜像模式下，创建队列的节点被称为该队列的<strong>主节点</strong>，队列还会拷贝到集群中的其它节点，也叫做该队列的<strong>镜像</strong>节点。</p><p>但是，不同队列可以在集群中的任意节点上创建，因此不同队列的主节点可以不同。甚至，<strong>一个队列的主节点可能是另一个队列的镜像节点</strong>。</p><p>用户发送给队列的一切请求，例如发送消息、消息回执默认都会在主节点完成，如果是从节点接收到请求，也会路由到主节点去完成。<strong>镜像节点仅仅起到备份数据作用</strong>。</p><p>当主节点接收到消费者的 ACK 时，所有镜像都会删除节点中的数据。</p><p>总结如下：</p><ul><li>镜像队列结构是一主多从（从就是镜像）</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主（如果在主从同步完成前，主就已经宕机，可能出现数据丢失）</li><li>不具备负载均衡功能，因为所有操作都会有主节点完成（但是不同队列，其主节点可以不同，可以利用这个提高吞吐量）</li></ul><h3 id="_4-2-镜像模式的配置" tabindex="-1"><a class="header-anchor" href="#_4-2-镜像模式的配置" aria-hidden="true">#</a> 4.2.镜像模式的配置</h3><p>镜像模式的配置有 3 种模式：</p><table><thead><tr><th style="text-align:left;">ha-mode</th><th style="text-align:left;">ha-params</th><th style="text-align:left;">效果</th></tr></thead><tbody><tr><td style="text-align:left;">准确模式 exactly</td><td style="text-align:left;">队列的副本量 count</td><td style="text-align:left;">集群中队列副本（主服务器和镜像服务器之和）的数量。count 如果为 1 意味着单个副本：即队列主节点。count 值为 2 表示 2 个副本：1 个队列主和 1 个队列镜像。换句话说：count = 镜像数量 + 1。如果群集中的节点数少于 count，则该队列将镜像到所有节点。如果有集群总数大于 count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。</td></tr><tr><td style="text-align:left;">all</td><td style="text-align:left;">(none)</td><td style="text-align:left;">队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络 I / O，磁盘 I / O 和磁盘空间使用情况。推荐使用 exactly，设置副本数为（N / 2 +1）。</td></tr><tr><td style="text-align:left;">nodes</td><td style="text-align:left;"><em>node names</em></td><td style="text-align:left;">指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。</td></tr></tbody></table><p>这里我们以 rabbitmqctl 命令作为案例来讲解配置语法。</p><p>语法示例：</p><h4 id="_4-2-1-exactly-模式" tabindex="-1"><a class="header-anchor" href="#_4-2-1-exactly-模式" aria-hidden="true">#</a> 4.2.1.exactly 模式</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rabbitmqctl set_policy ha-two &quot;^two\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-two</code>：策略名称，自定义</li><li><code>&quot;^two\\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>two.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</code>: 策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code>：策略模式，此处是 exactly 模式，指定副本数量</li><li><code>&quot;ha-params&quot;:2</code>：策略参数，这里是 2，就是副本数量为 2，1 主 1 镜像</li><li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code>：同步策略，默认是 manual，即新加入的镜像节点不会同步旧的消息。如果设置为 automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li></ul></li></ul><h4 id="_4-2-2-all-模式" tabindex="-1"><a class="header-anchor" href="#_4-2-2-all-模式" aria-hidden="true">#</a> 4.2.2.all 模式</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rabbitmqctl set_policy ha-all &quot;^all\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>ha-all</code>：策略名称，自定义</li><li><code>&quot;^all\\.&quot;</code>：匹配所有以<code>all.</code>开头的队列名</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;</code>：策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;all&quot;</code>：策略模式，此处是 all 模式，即所有节点都会称为镜像节点</li></ul></li></ul><h4 id="_4-2-3-nodes-模式" tabindex="-1"><a class="header-anchor" href="#_4-2-3-nodes-模式" aria-hidden="true">#</a> 4.2.3.nodes 模式</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rabbitmqctl set_policy ha-nodes &quot;^nodes\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-nodes</code>：策略名称，自定义</li><li><code>&quot;^nodes\\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>nodes.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;</code>: 策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code>：策略模式，此处是 nodes 模式</li><li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code>：策略参数，这里指定副本所在节点名称</li></ul></li></ul><h3 id="_4-3-测试" tabindex="-1"><a class="header-anchor" href="#_4-3-测试" aria-hidden="true">#</a> 4.3.测试</h3><p>我们使用 exactly 模式的镜像，因为集群节点数量为 3，因此镜像数量就设置为 2.</p><p>运行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq1 rabbitmqctl set_policy ha-two <span class="token string">&quot;^two\\.&quot;</span> <span class="token string">&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面，我们创建一个新的队列：</p><p><img src="`+y+'" alt="image-20210717231751411"></p><p>在任意一个 mq 控制台查看队列：</p><p><img src="'+M+'" alt="image-20210717231829505"></p><h4 id="_4-3-1-测试数据共享" tabindex="-1"><a class="header-anchor" href="#_4-3-1-测试数据共享" aria-hidden="true">#</a> 4.3.1.测试数据共享</h4><p>给 two.queue 发送一条消息：</p><p><img src="'+B+'" alt="image-20210717231958996"></p><p>然后在 mq1、mq2、mq3 的任意控制台查看消息：</p><p><img src="'+Q+`" alt="image-20210717232108584"></p><h4 id="_4-3-2-测试高可用" tabindex="-1"><a class="header-anchor" href="#_4-3-2-测试高可用" aria-hidden="true">#</a> 4.3.2.测试高可用</h4><p>现在，我们让 two.queue 的主节点 mq1 宕机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看集群状态：</p><p><img src="`+R+'" alt="image-20210717232257420"></p><p>查看队列状态：</p><p><img src="'+A+'" alt="image-20210717232322646"></p><p>发现依然是健康的！并且其主节点切换到了 rabbit@mq2 上</p><h2 id="_5-仲裁队列" tabindex="-1"><a class="header-anchor" href="#_5-仲裁队列" aria-hidden="true">#</a> 5.仲裁队列</h2><p>从 RabbitMQ 3.8 版本开始，引入了新的仲裁队列，他具备与镜像队里类似的功能，但使用更加方便。</p><h3 id="_5-1-添加仲裁队列" tabindex="-1"><a class="header-anchor" href="#_5-1-添加仲裁队列" aria-hidden="true">#</a> 5.1.添加仲裁队列</h3><p>在任意控制台添加一个队列，一定要选择队列类型为 Quorum 类型。</p><p><img src="'+D+'" alt="image-20210717234329640"></p><p>在任意控制台查看队列：</p><p><img src="'+E+`" alt="image-20210717234426209"></p><p>可以看到，仲裁队列的 + 2 字样。代表这个队列有 2 个镜像节点。</p><p>因为仲裁队列默认的镜像数为 5。如果你的集群有 7 个节点，那么镜像数肯定是 5；而我们集群只有 3 个节点，因此镜像数量就是 3.</p><h3 id="_5-2-测试" tabindex="-1"><a class="header-anchor" href="#_5-2-测试" aria-hidden="true">#</a> 5.2.测试</h3><p>可以参考对镜像集群的测试，效果是一样的。</p><h3 id="_5-3-集群扩容" tabindex="-1"><a class="header-anchor" href="#_5-3-集群扩容" aria-hidden="true">#</a> 5.3.集群扩容</h3><h4 id="_5-3-1-加入集群" tabindex="-1"><a class="header-anchor" href="#_5-3-1-加入集群" aria-hidden="true">#</a> 5.3.1.加入集群</h4><p>1）启动一个新的 MQ 容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq4 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq5 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8074</span>:15672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8084</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）进入容器控制台：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq4 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）停止 mq 进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl stop_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）重置 RabbitMQ 中的数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5）加入 mq1：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl join_cluster rabbit@mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6）再次启动 mq 进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl start_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+T+`" alt="image-20210718001909492"></p><h4 id="_5-3-2-增加仲裁队列副本" tabindex="-1"><a class="header-anchor" href="#_5-3-2-增加仲裁队列副本" aria-hidden="true">#</a> 5.3.2.增加仲裁队列副本</h4><p>我们先查看下 quorum.queue 这个队列目前的副本情况，进入 mq1 容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq1 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues quorum_status <span class="token string">&quot;quorum.queue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><p><img src="`+w+`" alt="image-20210718002118357"></p><p>现在，我们让 mq4 也加入进来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues add_member <span class="token string">&quot;quorum.queue&quot;</span> <span class="token string">&quot;rabbit@mq4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><p><img src="`+S+`" alt="image-20210718002253226"></p><p>再次查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues quorum_status <span class="token string">&quot;quorum.queue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+U+'" alt="image-20210718002342603"></p><p>查看控制台，发现 quorum.queue 的镜像数量也从原来的 +2 变成了 +3：</p><p><img src="'+I+'" alt="image-20210718002422365"></p>',184);function V(W,$){const s=l("router-link");return o(),c("div",null,[L,a("nav",P,[a("ul",null,[a("li",null,[n(s,{to:"#_1-单机部署"},{default:t(()=>[e("1.单机部署")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_1-2-安装-mq"},{default:t(()=>[e("1.2.安装 MQ")]),_:1})])])]),a("li",null,[n(s,{to:"#_2-安装-delayexchange-插件"},{default:t(()=>[e("2.安装 DelayExchange 插件")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_2-1-下载插件"},{default:t(()=>[e("2.1.下载插件")]),_:1})]),a("li",null,[n(s,{to:"#_2-2-上传插件"},{default:t(()=>[e("2.2.上传插件")]),_:1})]),a("li",null,[n(s,{to:"#_2-3-安装插件"},{default:t(()=>[e("2.3.安装插件")]),_:1})])])]),a("li",null,[n(s,{to:"#_3-集群部署"},{default:t(()=>[e("3.集群部署")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_2-1-集群分类"},{default:t(()=>[e("2.1.集群分类")]),_:1})]),a("li",null,[n(s,{to:"#_2-2-获取-cookie"},{default:t(()=>[e("2.2.获取 cookie")]),_:1})]),a("li",null,[n(s,{to:"#_2-3-准备集群配置"},{default:t(()=>[e("2.3.准备集群配置")]),_:1})]),a("li",null,[n(s,{to:"#_2-4-启动集群"},{default:t(()=>[e("2.4.启动集群")]),_:1})]),a("li",null,[n(s,{to:"#_2-5-测试"},{default:t(()=>[e("2.5.测试")]),_:1})])])]),a("li",null,[n(s,{to:"#_4-镜像模式"},{default:t(()=>[e("4.镜像模式")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_4-1-镜像模式的特征"},{default:t(()=>[e("4.1.镜像模式的特征")]),_:1})]),a("li",null,[n(s,{to:"#_4-2-镜像模式的配置"},{default:t(()=>[e("4.2.镜像模式的配置")]),_:1})]),a("li",null,[n(s,{to:"#_4-3-测试"},{default:t(()=>[e("4.3.测试")]),_:1})])])]),a("li",null,[n(s,{to:"#_5-仲裁队列"},{default:t(()=>[e("5.仲裁队列")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#_5-1-添加仲裁队列"},{default:t(()=>[e("5.1.添加仲裁队列")]),_:1})]),a("li",null,[n(s,{to:"#_5-2-测试"},{default:t(()=>[e("5.2.测试")]),_:1})]),a("li",null,[n(s,{to:"#_5-3-集群扩容"},{default:t(()=>[e("5.3.集群扩容")]),_:1})])])])])]),C])}const N=i(F,[["render",V],["__file","index.html.vue"]]);export{N as default};
