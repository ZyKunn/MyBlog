import{_ as e,r as o,o as c,c as l,a as n,e as t,w as p,b as s,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1603848370680-762b7ac4.png",r="/MyBlog/assets/1603848442755-3a9fa862.png",d="/MyBlog/assets/1603850416345-67f860dc.png",k="/MyBlog/assets/1603855437442-51324352.png",v="/MyBlog/assets/1603872786660-a2803be3.png",m="/MyBlog/assets/1603856445953-36d298d8.png",b="/MyBlog/assets/1603868526551-4a586623.png",h="/MyBlog/assets/1603873058630-d214f482.png",g="/MyBlog/assets/1603873074586-09a3e6f1.png",y={},f=n("h1",{id:"_02-java-基础语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_02-java-基础语法","aria-hidden":"true"},"#"),s(" 02 - Java 基础语法 😎")],-1),j={class:"table-of-contents"},S=i('<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>​ 在 java 开发中，大多数时间都是在对数据进行操作，比如:登录，注册，搜索商品，下订单，转账等。既然是数据，就有类型之分；不同的数据类型也不同。</p><p>java 是一门强类型(弱类型：JavaScript、python)语言，任何的变量在声明之前都必须显式的指定其数据类型，并且，在使用过程中数据类型不能够改变。Java 中的数据类型分为两个大类：第一类称之为<strong>基本数据类型</strong>；第二类称之<strong>引用数据类型</strong>（面向对象）。</p><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><p>基本类型数据也称之为简单类型，通常用于描述一个基本值，比如说：一个整数，一个字符，一个小数，一个 true、false 值等；java 中的基本类型数据分为以下四类八种：</p><ul><li><p>整数类型（byte short int long）</p></li><li><p>浮点类型（float double）</p></li><li><p>字符类型（char）</p></li><li><p>布尔类型（boolean）</p><p><img src="'+u+'" alt="1603848370680"></p></li></ul><h4 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h4><p>整数类型一般用于表示一个整数（包含正负数），整数类型主要包含 4 个：</p><ul><li><strong>byte</strong>（文件操作时常用）</li><li><strong>short</strong></li><li><strong>int</strong>（推荐）</li><li><strong>long</strong>（时间毫秒数，文件字节数）</li></ul><p><img src="'+r+`" alt="1603848442755"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">//0000 1111    15? 二进制表示  逢二进一</span>
<span class="token comment">//1*2^3+1*2^+1*2^1+1</span>
<span class="token comment">// 0000 0101</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> lon <span class="token operator">=</span> <span class="token number">12345678901L</span><span class="token punctuation">;</span>

<span class="token comment">//Jdk1.7新增</span>
lon <span class="token operator">=</span> <span class="token number">1_232_347_979_793_423_424L</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项:</p><ol><li>java 中默认的整数类型是 int</li><li>任何整数类型的运算结果都会转换为 int 类型</li><li>声明 long 类型变量时，数据值必须在末尾跟上“L”</li></ol><blockquote><p>计算机基础知识:</p><p>1 字节(byte) = 8 位(bits) 计算机底层能够识别的只能是 0 和 1</p><p>0000 0000 ~ 1111 1111</p><p>十进制和二进制之间转换</p><p>1024 字节=1KB</p><p>1024KB=1MB</p><p>1024MB=1GB</p><p>1024GB=1TB</p></blockquote><h4 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h4><p>java 中对于小数类型的表示称之为浮点类型，浮点类型包含两种：</p><ol><li><p>float</p></li><li><p>double</p><p><img src="`+d+`" alt="1603850416345"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.1415926F</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//以上输出预期结果是：0.3</span>
<span class="token comment">//实际结果：0.30000000000000004 (精度丢失问题)</span>
<span class="token comment">//java.util.BigDecimal 引用类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>注意事项；</p><ol><li>java 中默认的浮点数类型为 double</li><li>表示一个 float 类型的数据必须在数值末尾追加“f”或“F”</li><li>浮点类型一般用于对精度要求不高的运算中 0</li></ol><blockquote><p>浮点类型的概念源之于科学计数法，比如表示一个大数值(<strong>10045.6</strong>)可以按如下方式表示:</p><p>1.00456 * 10^4</p><p>10.0456 * 10^3</p><p>0.100456 * 10^5</p></blockquote><h4 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型" aria-hidden="true">#</a> 字符类型</h4><p>Java 中对于单个字符提供了一个 char 类型表述，区别于 String 类型（String 用于表示一个字符串）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上观察得知 String 类型用于表示一个字符串，值必须包含在双引号之间；而 char 类型用于表示一个字符，并且字符包含在单引号之间。char 类型除了可以表示单个英文字符外，还能表示中文字符，特殊符号等：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于转义符号“\\”，java 中对于特殊的符号可以使用“\\”转义：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\\b  \\t  \\n  \\f  \\r  \\&quot;  \\&#39;  \\\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="1603855437442"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//char类型占据存储空间是两个字节</span>
<span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//java中 &quot;\\&quot;表示一个转义符号</span>
<span class="token comment">//比如: \\n 换行  \\t表示制表符</span>
<span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//16进制  0-9 A-F    Unicode码</span>
<span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">&#39;\\u0009&#39;</span><span class="token punctuation">;</span> <span class="token comment">//表示制表符(tab) \\t</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token operator">+</span>c5<span class="token operator">+</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打印购物小票</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======软帝超市 消费单========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;序号\\t商品名\\t数量\\t价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1\\t旺仔牛奶\\t5\\t25.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2\\t牛肉面\\t2\\t10.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3\\t雷碧\\t5\\t15.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//补全总价</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;总价\\t\\t\\t￥50.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//如何在控制台输出 &quot; ?</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出 name=&quot;admin&quot;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name=\\&quot;admin\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出一个文件的地址： d:\\java\\test\\HelloWorld.java</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\java\\\\test\\\\HelloWorld.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="1603872786660"></p><blockquote><p>String 不是基本类型数据，是 JDK 中提供一个引用类型数据</p><p>char 类型一般用于字符转码(编码转换)；String 的内部实现原理基于 char 类型(String 本质上就是一个 char 数组)</p></blockquote><h4 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> 布尔类型</h4><p>​ 布尔类型通常用于表示 true 或者 false 值，<strong>只占一个二进制位</strong>；因此布尔的取值只能是 0 和 1(这是 c 语言的用法)；但是 Java 中只允许用 true 和 false 表示 boolean 的值。布尔类型一般用于一些逻辑判断中，比如条件分支，循环的判断。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//True  False</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h3><p>​ 在实际的项目经常会涉及到许多不同的基本类型数据的交替使用，因此，不同的基本数据类型之间会涉及到一些转换需求；java 中基本类型数据的转换遵循以下原则：</p><ul><li>小转大，直接转</li><li>大转小，需强转</li></ul><p><img src="`+m+`" alt="1603856445953"></p><p>实现语法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//初始化</span>
<span class="token keyword">byte</span> byt <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
<span class="token comment">//赋值</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> byt<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token comment">//强制类型转换(在需要被转换的变量或者值之前使用小括号，括号中写入需要转换成为的目标数据类型的类型名称)</span>
byt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>

<span class="token keyword">long</span> log <span class="token operator">=</span> <span class="token number">1234567890123L</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>log<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思考题:</p><p>观察代码：short s = 10; s = s + 10；请问 s=?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//编译错误</span>
<span class="token comment">/*
java中任何的整数类型运算都会被转换为int结果，
因此上述代码 s + 10的结果是int类型数据，不能直接
赋值给short类型的s，所以需要强制类型转换
*/</span>
s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h3><p>​ 之前所有的基本类型数据都是用于表示一个简单的值，比如:一个整数，一个字符，一个小数，一个 true、false 值；如果需要表示一个人，一只狗或者一条订单信息；对于以上复杂的数据来说，单纯使用一个基本类型的数据无法全面表示；</p><p>​ 所以，对于以上的需求无法通过一个基本类型数据来表示，因此，java 中针对一些复杂的数据还提供了一种特殊的数据类型-----<strong>引用数据类型</strong></p><p>​ 引用类型的呈现方式通常以一个类的形式存在，这里就涉及到了 java 中面向对象程序设计。java 中的引用类型包含以下三类:</p><ol><li><strong>类的引用</strong></li><li><strong>数组的引用</strong></li><li><strong>接口的引用</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//类</span>
<span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">//接口</span>
<span class="token keyword">interface</span> flyable<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">//数组</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>Java 中提供了大量的用于操作数据的运算符号，这些运算符号分为以下几类:</p><ul><li>算术运算符</li><li>关系运算</li><li>布尔逻辑运算</li><li>位运算符</li><li>三目运算</li><li>其他(扩展赋值，字符串拼接，赋值，造型)</li></ul><h3 id="算术运算" tabindex="-1"><a class="header-anchor" href="#算术运算" aria-hidden="true">#</a> 算术运算</h3><p>算术运算符主要用于对基本类型的数据（整数，小数）进行类似加减乘除等算术运算；二元运算符</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>对两个运算数进行相加运算</td></tr><tr><td>-</td><td>对两个运算数进行相减运算</td></tr><tr><td>*</td><td>对两个运算数进行相乘运算</td></tr><tr><td>/</td><td>对两个运算数进行相除运算</td></tr><tr><td>%</td><td>对两个运算数进行取余数，获取两个数相除之后除不尽结果，比如 10 % 3 = 1 余数为 1</td></tr><tr><td>++/--</td><td>自增自减，对变量进行自增自减操作；符号可以出现在运算数的左右两侧</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> j <span class="token operator">=</span> <span class="token number">4.0</span><span class="token punctuation">;</span>

j <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 0~4;</span>
b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
 自增自减运算符在运算数的前后结果是存在区别的
 如果符号在运算数之前，则先运算再使用
 如果符号在运算数之后，则先使用再运算
*/</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>算术运算注意事项:</p><ol><li>任何整数类型进行算术运算都会将结果转换为 int 类型</li><li>任何数值类型跟浮点进行算术运算都会转换为 double 类型</li></ol></blockquote><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><p>关系运算一般用于对于基本类型数据的大小比较，等于比较，另外也可以对两个引用类型对象的地址进行比较，java 中的关系运算包含以下符号:</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> f <span class="token operator">=</span> a <span class="token operator">&gt;=</span> b<span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//==在对引用类型数据比较时，比较的是两个类型的地址</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">!=</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关系运算注意事项:</p><ol><li>关系运算符运算之后的结果是布尔类型</li><li>==和!=可以用于对引用类型对象的地址比较</li></ol></blockquote><h3 id="布尔逻辑运算" tabindex="-1"><a class="header-anchor" href="#布尔逻辑运算" aria-hidden="true">#</a> 布尔逻辑运算</h3><p>java 后期主要应用于一些商业化的服务端业务逻辑操作，因此会包含很多有关业务逻辑判断等，运算符也因此包含了布尔逻辑运算等符号，如：与，或，非</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td></tr><tr><td>|</td><td>逻辑或</td></tr><tr><td>!</td><td>非</td></tr><tr><td>&amp;&amp;</td><td>短路与</td></tr><tr><td>||</td><td>短路或</td></tr><tr><td>^</td><td>亦或(如果两个都一样则为 false 如果两个不一样 则为 true)</td></tr></tbody></table><p><img src="`+b+`" alt="1603868526551"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入三个整数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">&gt;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><ol><li>布尔逻辑运算的操作数都是 boolean 类型变量</li></ol><p><strong>&amp;和&amp;&amp;区别？</strong></p><p>&amp;:逻辑与，在进行运算时不论运算符左侧的表达式结果是否为 true，右侧的表达式始终会执行；</p><p>&amp;&amp;:短路与，在进行运算时一旦运算符左侧的表达式结果为 false，则右侧表达式不再执行</p></blockquote><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h3><p>计算机底层最终只能够识别 0 和 1，不论多么复杂的表达式，到计算机底层都会进行二进制加法运算，java 中对于位运算包含以下运算符号:</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>~</td><td>取反</td></tr><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td></tr></tbody></table><p><strong>引入:如何以最快的速度将 8 变为 2</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token comment">//上述的变量表示为二进制如下</span>
<span class="token comment">// 0000 0000 0000 0000 0000 0000 0000 1000</span>
i <span class="token operator">=</span> i <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//结果：2</span>

<span class="token comment">//如何将上面的变量i变为16</span>
i <span class="token operator">=</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三目运算" tabindex="-1"><a class="header-anchor" href="#三目运算" aria-hidden="true">#</a> 三目运算</h3><p>三目运算符也称之三元运算，运算符具备逻辑判断的功能，语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>布尔类型表达式 ? 结果1 : 结果2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基本案例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> r <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂的三目运算使用:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//输入一个分数(0~100)，根据该分数所在的区间显示分数对应的等级（ABCDE）</span>
<span class="token comment">// &lt;60 E</span>
<span class="token comment">// &lt;70 D</span>
<span class="token comment">// &lt;80 C</span>
<span class="token comment">// &lt;90 B</span>
<span class="token comment">// &gt;=90 A</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> c <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token char">&#39;E&#39;</span> <span class="token operator">:</span>
    			s <span class="token operator">&lt;</span> <span class="token number">70</span> <span class="token operator">?</span> <span class="token char">&#39;D&#39;</span> <span class="token operator">:</span>
    				s <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">?</span> <span class="token char">&#39;C&#39;</span> <span class="token operator">:</span>
    					s <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token operator">?</span> <span class="token char">&#39;B&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符" aria-hidden="true">#</a> 其他运算符</h3><ul><li>扩展赋值运算（+= -= *= /=）</li><li>字符串拼接运算（+）</li><li>造型运算（(type)）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">//		a = a + 10;</span>
<span class="token comment">//具备类型转功能</span>
a <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//a = a + 10;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//任何的数据类型跟字符串相加都会转换为字符串类型</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token string">&quot;40&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//int:4  char:2   0~9  48~57</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ascii码</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token char">&#39;4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j<span class="token punctuation">;</span>
<span class="token keyword">int</span> k<span class="token punctuation">;</span>
<span class="token comment">//从右往左赋值</span>
k <span class="token operator">=</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h3><p>不同的运算符计算顺序也不同，比如数学中：先乘除出后加减；Java 中的运算符优先级如下:</p><p><img src="`+h+'" alt="1603873058630"></p><p><img src="'+g+`" alt="1603873074586"></p><p>实际开发中一切以可读性为主，所以对于运算的优先级问题可以通过（）解决。不需要记忆符号的优先级。</p><h2 id="标准输入和随机数" tabindex="-1"><a class="header-anchor" href="#标准输入和随机数" aria-hidden="true">#</a> 标准输入和随机数</h2><h3 id="scanner-基本使用" tabindex="-1"><a class="header-anchor" href="#scanner-基本使用" aria-hidden="true">#</a> Scanner 基本使用</h3><p>Scanner 是 JDK 中内置的一个类，可以用于对系统输入内容扫描，读取控制台输入的数据，具体使用方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取控制台输入的整数</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：</p><p>在使用 Scanner 类时需要将 Scanner 所在的包导入到当前类中，在类定义之前添加以下代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="math-类与随机数使用" tabindex="-1"><a class="header-anchor" href="#math-类与随机数使用" aria-hidden="true">#</a> Math 类与随机数使用</h3><p>​ java 中提供了一个 Math 类，是一个工具类，内部主要包含的是一些工具方法，比如，求两数的最大值，最小值，绝对值，四舍五入，随机数；这些所有的方法都可以直接通过类名称调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随机获取从0.0~1.0(不包含)之间浮点数</span>
<span class="token comment">//0.000000~0.999999</span>
<span class="token comment">//0~9.999999  + 1</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//随机1~10之间的整数？</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//随机从[0,10]之间的整数   开闭区间   0.99 * 11</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//随机获取从[5,10]之间的值？</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94);function w(_,q){const a=o("router-link");return c(),l("div",null,[f,n("nav",j,[n("ul",null,[n("li",null,[t(a,{to:"#数据类型"},{default:p(()=>[s("数据类型")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#基本数据类型"},{default:p(()=>[s("基本数据类型")]),_:1})]),n("li",null,[t(a,{to:"#数据类型转换"},{default:p(()=>[s("数据类型转换")]),_:1})]),n("li",null,[t(a,{to:"#引用数据类型"},{default:p(()=>[s("引用数据类型")]),_:1})])])]),n("li",null,[t(a,{to:"#运算符"},{default:p(()=>[s("运算符")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#算术运算"},{default:p(()=>[s("算术运算")]),_:1})]),n("li",null,[t(a,{to:"#关系运算符"},{default:p(()=>[s("关系运算符")]),_:1})]),n("li",null,[t(a,{to:"#布尔逻辑运算"},{default:p(()=>[s("布尔逻辑运算")]),_:1})]),n("li",null,[t(a,{to:"#位运算"},{default:p(()=>[s("位运算")]),_:1})]),n("li",null,[t(a,{to:"#三目运算"},{default:p(()=>[s("三目运算")]),_:1})]),n("li",null,[t(a,{to:"#其他运算符"},{default:p(()=>[s("其他运算符")]),_:1})]),n("li",null,[t(a,{to:"#运算符的优先级"},{default:p(()=>[s("运算符的优先级")]),_:1})])])]),n("li",null,[t(a,{to:"#标准输入和随机数"},{default:p(()=>[s("标准输入和随机数")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#scanner-基本使用"},{default:p(()=>[s("Scanner 基本使用")]),_:1})]),n("li",null,[t(a,{to:"#math-类与随机数使用"},{default:p(()=>[s("Math 类与随机数使用")]),_:1})])])])])]),S])}const B=e(y,[["render",w],["__file","index.html.vue"]]);export{B as default};
