import{_ as p,r as c,o,c as i,a as n,e,w as t,b as a,d as l}from"./app-a153c100.js";const u="/MyBlog/assets/1683975506654-746296ce.png",r="/MyBlog/assets/1683975570094-05d2e2c8.png",d="/MyBlog/assets/1683975586087-6364c8a1.png",k={},m=n("h1",{id:"reggie-开发笔记【优化七】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reggie-开发笔记【优化七】","aria-hidden":"true"},"#"),a(" Reggie 开发笔记【优化七】")],-1),v={class:"table-of-contents"},g=l('<h2 id="缓存优化" tabindex="-1"><a class="header-anchor" href="#缓存优化" aria-hidden="true">#</a> 缓存优化</h2><p><strong>问题说明</strong></p><p><img src="'+u+`" alt="1683975506654"></p><p><strong>用户数量多，系统访问量大频繁访问数据库，系统性能下降，用户体验差</strong></p><h3 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h3><h4 id="maven-坐标" tabindex="-1"><a class="header-anchor" href="#maven-坐标" aria-hidden="true">#</a> maven 坐标</h4><p>在项目的 pom.xm1 文件中导入 spring data redis 的 maven 坐标:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h4><p>在项目的 application.yml 中加入 redis 相关配置:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>spring
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
        host<span class="token punctuation">:</span>172.17.2.94
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
        <span class="token key atrule">password</span><span class="token punctuation">:</span> root@123456
        <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置类" tabindex="-1"><a class="header-anchor" href="#配置类" aria-hidden="true">#</a> 配置类</h4><p>在项目中加入配置类 RedisConfig:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//默认的Key序列化器为: JdkSerializationRedisSerializer</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用 StringRedisTemplate 就不用配置类</p><h3 id="缓存短信验证码" tabindex="-1"><a class="header-anchor" href="#缓存短信验证码" aria-hidden="true">#</a> 缓存短信验证码</h3><h4 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h4><p>前面我们已经实现了移动端手机验证码登录，随机生成的验证码我们是保存在 HttpSession 中的。现在需要改造为将验证码缓存在 Redis 中，具体的实现思路如下:</p><p>1、在服务端 UserController 中注入 RedisTemplate 对象，用于操作 Redis</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在服务端 UserController 的 sendMsg 方法中，将随机生成的验证码缓存到 Redis 中，并设置有效期为 5 分钟</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、在服务端 UserController 的 login 方法中，从 Redis 中获取缓存的验证码，如果登录成功则删除 Redis 中的验证码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//从redis中获取保存的验证码</span>
<span class="token class-name">Object</span> codeInSession <span class="token operator">=</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果用户登录成功则删除Redis中缓存的验证码</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存菜品数据" tabindex="-1"><a class="header-anchor" href="#缓存菜品数据" aria-hidden="true">#</a> 缓存菜品数据</h3><h4 id="实现思路-1" tabindex="-1"><a class="header-anchor" href="#实现思路-1" aria-hidden="true">#</a> 实现思路</h4><p>前面我们已经实现了移动端菜品查看功能，对应的服务端方法为 DishController 的 list 方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p><p>具体的实现思路如下:</p><p>1、改造 DishController 的 list 方法，先从 Redis 中获取菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据放入 Redis。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">&gt;</span></span> dishDtoList<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">//动态构造Key</span>
<span class="token class-name">String</span> key<span class="token operator">=</span><span class="token string">&quot;dish_&quot;</span><span class="token operator">+</span>dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;_&quot;</span><span class="token operator">+</span>dish<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//先从redis中获取缓存数据</span>
dishDtoList<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishDto</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>dishDtoList<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//如果存在，则直接返回，无需查询数据库</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishDtoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">//如果不存在，则查询数据库，并且将查询到的菜品数据添加到缓存中</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>dishDtoList<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、改造 DishController 的 save 和 update 方法，加入清理缓存的逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//清理所有菜品缓存数据</span>
<span class="token comment">//Set keys = redisTemplate.keys(&quot;dish_*&quot;);</span>
<span class="token comment">//redisTemplate.delete(keys);</span>

<span class="token comment">//清理某个分类下面的菜品缓存数据</span>
<span class="token class-name">String</span> key<span class="token operator">=</span><span class="token string">&quot;dish_&quot;</span><span class="token operator">+</span>dishDto<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;_&quot;</span><span class="token operator">+</span>dishDto<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：在使用缓存过程中，要注意保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。</p><h3 id="spring-cache" tabindex="-1"><a class="header-anchor" href="#spring-cache" aria-hidden="true">#</a> Spring Cache</h3><h4 id="spring-cache-介绍" tabindex="-1"><a class="header-anchor" href="#spring-cache-介绍" aria-hidden="true">#</a> Spring Cache 介绍</h4><p>Spring cache 是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p><p>Spring Cache 提供了一层抽象，底层可以切换不同的 cache 实现。具体就是通过 CacheManager 接口来统一不同的缓存技术。</p><p>CacheManager 是 Spring 提供的各种缓存技术抽象接口。</p><p>针对不同的缓存技术需要实现不同的 CacheManager: <img src="`+r+'" alt="1683975570094"></p><h4 id="spring-cache-常用注解" tabindex="-1"><a class="header-anchor" href="#spring-cache-常用注解" aria-hidden="true">#</a> Spring Cache 常用注解</h4><p><img src="'+d+`" alt="1683975586087"></p><p>在 spring boot 项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching 开启缓存支持即可。</p><p>例如，使用 Redis 作为缓存技术，只需要导入 Spring data Redis 的 maven 坐标即可。</p><h4 id="spring-cache-使用方式" tabindex="-1"><a class="header-anchor" href="#spring-cache-使用方式" aria-hidden="true">#</a> Spring Cache 使用方式</h4><p>在 Spring Boot 项目中使用 Spring Cache 的操作步骤(使用 redis 缓存技术);</p><p>1、导入 maven 坐标</p><ul><li>spring-boot-starter-data-redis、spring-boot-starter-cache</li></ul><p>2、配置 application.yml</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spring<span class="token operator">:</span>
    cache<span class="token operator">:</span>
        redis<span class="token operator">:</span>
            time<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>live<span class="token operator">:</span> <span class="token number">1800000</span>#设置缓存有效期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在启动类上加入@EnableCaching 注解，开启缓存注解功能</p><p>4、在 Controller 的方法上加入@Cacheable、@CacheEvict 等注解，进行缓存操作</p><h3 id="缓存套餐数据" tabindex="-1"><a class="header-anchor" href="#缓存套餐数据" aria-hidden="true">#</a> 缓存套餐数据</h3><h4 id="实现思路-2" tabindex="-1"><a class="header-anchor" href="#实现思路-2" aria-hidden="true">#</a> 实现思路</h4><p>前面我们已经实现了移动端套餐查看功能，对应的服务端方法为 SetmealController 的 list 方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p><p>具体的实现思路如下:</p><p>1、导入 Spring Cache 和 Redis 相关 maven 坐标</p><p>2、在 application.yml 中配置缓存数据的过期时间</p><p>3、在启动类上加入@EnableCaching 注解，开启缓存注解功能</p><p>4、在 SetmealController 的 list 方法上加入@Cacheable 注解</p><p>5、在 SetmealController 的 save 和 delete 方法上加入 CacheEvict 注解</p><h4 id="代码改造" tabindex="-1"><a class="header-anchor" href="#代码改造" aria-hidden="true">#</a> 代码改造</h4><p>在 pom.xml 文件中导入 maven 坐标:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 application.yml 中配置缓存数据过期时间:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">cache</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> <span class="token number">1800000</span> <span class="token comment">#设置缓存数据过期时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动类@EnableCaching 注解</p><p>在 list 方法上添加注解，实现在 redis 里添加缓存：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#setmeal.categoryId+&#39;_&#39;+#setmeal.status&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 update，add，delete 方法上添加注解，清除缓存：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;setmealCache&quot;</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong>：要让 R 实现 Serializable 接口（序列化），注解才能生效</p>`,71);function h(b,f){const s=c("router-link");return o(),i("div",null,[m,n("nav",v,[n("ul",null,[n("li",null,[e(s,{to:"#缓存优化"},{default:t(()=>[a("缓存优化")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#环境搭建"},{default:t(()=>[a("环境搭建")]),_:1})]),n("li",null,[e(s,{to:"#缓存短信验证码"},{default:t(()=>[a("缓存短信验证码")]),_:1})]),n("li",null,[e(s,{to:"#缓存菜品数据"},{default:t(()=>[a("缓存菜品数据")]),_:1})]),n("li",null,[e(s,{to:"#spring-cache"},{default:t(()=>[a("Spring Cache")]),_:1})]),n("li",null,[e(s,{to:"#缓存套餐数据"},{default:t(()=>[a("缓存套餐数据")]),_:1})])])])])]),g])}const x=p(k,[["render",h],["__file","index.html.vue"]]);export{x as default};
