import{_ as i,r as p,o as r,c as d,a as n,e as s,w as t,b as a,d as l}from"./app-a153c100.js";const c="/MyBlog/assets/1596414885952-f56f0f73.png",u="/MyBlog/assets/1596370525218-2ea09d94.png",h="/MyBlog/assets/1596164167153-31b5ef87.png",k="/MyBlog/assets/1596164769379-0d98bfbb.png",m="/MyBlog/assets/1596165443776-db8b31e8.png",_="/MyBlog/assets/1607003203211-2e9b92ad.png",b="/MyBlog/assets/1596166392271-85d1ce5d.png",g="/MyBlog/assets/1596167334552-3ffda07a.png",f="/MyBlog/assets/1596167846781-993eb471.png",y="/MyBlog/assets/1596370648058-6f14a245.png",w="/MyBlog/assets/1596177151438-d92787af.png",v="/MyBlog/assets/1596183813747-122b55ed.png",E="/MyBlog/assets/1596184666780-8a66b42b.png",B={},x=n("h1",{id:"_04-数据库设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_04-数据库设计","aria-hidden":"true"},"#"),a(" 04 - 数据库设计 ✍️")],-1),N={class:"table-of-contents"},M=l('<h2 id="数据库可编程性-触发器" tabindex="-1"><a class="header-anchor" href="#数据库可编程性-触发器" aria-hidden="true">#</a> 数据库可编程性-触发器</h2><p>​ 触发器（TRIGGER）是 MySQL 的数据库对象之一，对表中数据进行删除，更新和插入时做的一个监听，触发器就自动启动，并做一些后续处理</p><p>列子：</p><p>对用户信息的更新删除插入等一些操作的时候，对该动作捕获，将一些关键性信息保存到一个指定的位置，并记录下来</p><p>从 5.0.2 版本开始支持。该对象与编程语言中的存储过程以及函数非常类似，都是 SQL 语句可编程性的实现，并且都需要编写、编译以及调用。但是触发器的执行不是由程序调用，也不是由手动启动，而是由事件来触发、激活以及执行。</p><p>那么为什么要使用数据库对象触发器呢？在具体开发项目时，经常会遇到如下实例：</p><ol><li><p>在删除部门表中记录时，员工表因为设置外键约束关联部门表，导致部门表中记录无法删除，如何在执行部门删除时同时将关联的员工表中部门号列设置为 NULL。</p></li><li><p>在对员工表中员工数据删除时如何自动将被删除的员工信息记录到备份表中。</p></li></ol><p>上面的例子使用触发器完成时具有这样的特点，需要在表发生改变时，自动进行一些处理。MySQL 在触发 DELETE/UPDATE/INSERT 语句时就会自动执行所设置的操作，对 SELECT 语句则不会激活触发器。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p><img src="'+c+`" alt="1596414885952"></p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 触发器创建</span>
<span class="token comment">-- 当对emp表做更新操作时，将操作记录保存在日志表中</span>
<span class="token comment">--当触发器启动时，将部分信息保存到日志表中</span>
<span class="token keyword">create</span> <span class="token keyword">TRIGGER</span> emp_trigger BEFORE <span class="token keyword">insert</span> <span class="token keyword">ON</span> emp <span class="token keyword">for each row</span>
<span class="token keyword">BEGIN</span>
		<span class="token keyword">insert</span> <span class="token keyword">into</span> logs <span class="token punctuation">(</span>id<span class="token punctuation">,</span>createTime<span class="token punctuation">,</span>exquet<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;inset&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token comment">-- 操作emp表，对emp表中使用更新</span>
<span class="token keyword">update</span> emp <span class="token keyword">set</span> ename <span class="token operator">=</span> <span class="token string">&#39;天蓬元帅&#39;</span> <span class="token keyword">where</span> eno<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>

<span class="token comment">-- 将数据插入到复制表中</span>
<span class="token keyword">create</span> <span class="token keyword">trigger</span> emp_trigger2 <span class="token keyword">after</span> <span class="token keyword">update</span> <span class="token keyword">on</span> emp <span class="token keyword">for each row</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">INSERT</span> <span class="token keyword">into</span> empcopy <span class="token punctuation">(</span>eno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dno<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>old<span class="token punctuation">.</span>eno<span class="token punctuation">,</span>old<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>old<span class="token punctuation">.</span>job<span class="token punctuation">,</span>old<span class="token punctuation">.</span>hiredate<span class="token punctuation">,</span>old<span class="token punctuation">.</span>age<span class="token punctuation">,</span>old<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>old<span class="token punctuation">.</span>sal<span class="token punctuation">,</span>old<span class="token punctuation">.</span>dno<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token comment">--当员工表的dno和部门表dno是主外建关系，那么当删除部门表信息时，就需要先将员工表中该部门的dno更新为null，才可以删除部门信息</span>
<span class="token keyword">create</span> <span class="token keyword">trigger</span> emp_trigger2 BEFORE <span class="token keyword">delete</span> <span class="token keyword">on</span> dept <span class="token keyword">for each row</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">UPDATE</span> emp <span class="token keyword">set</span> dno <span class="token operator">=</span> <span class="token boolean">null</span> <span class="token keyword">where</span> dno <span class="token operator">=</span> old<span class="token punctuation">.</span>dno<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="触发器的应用" tabindex="-1"><a class="header-anchor" href="#触发器的应用" aria-hidden="true">#</a> 触发器的应用：</h3><p>触发器针对的是数据库中的每一行记录，每行数据在操作前后都会有一个对应的状态，触发器将没有操作之前的状态保存到 old 关键字中，将操作后的状态保存到 new 中</p><table><thead><tr><th>触发器类型</th><th>new 和 old 的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>没有 old，只有 new，b(插入后)的数据</td></tr><tr><td>UPDATE 型触发器</td><td>既有 old 也有 new，old 表示更新之前的数据，new 表示更新之后的数据</td></tr><tr><td>DELETE 型触发器</td><td>没有 new，只有 old，old 表示将要(删除前)或者已经被删除(删除后)的数据</td></tr></tbody></table><p>--BEFORE 和 old old 使用的没更新之前的数据源 --BEFORE 和 new new 使用的是更新之后的数据源 --after 和 old old 使用的没更新之前的数据源 --after 和 new new 使用的是更新之后的数据源</p><h2 id="数据库优化" tabindex="-1"><a class="header-anchor" href="#数据库优化" aria-hidden="true">#</a> 数据库优化</h2><p><img src="`+u+'" alt="1596370525218"></p><p>​ 数据库的分库分表</p><h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计" aria-hidden="true">#</a> 数据库设计</h2><p>​ 目前所有的主流 DBMS 都是关系型数据库。通过二维表表示数据本身，另外表中存在一些关联列实现表和表之间的关系。</p><h3 id="表之间关系" tabindex="-1"><a class="header-anchor" href="#表之间关系" aria-hidden="true">#</a> 表之间关系</h3><ul><li>一对一（人对应一个身份证）</li><li>一对多/多对一（一个部门包含多个员工）</li><li>多对多（学生选课，用户和商品）</li></ul><p>一对一：</p><h4 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一" aria-hidden="true">#</a> 一对一</h4><p>一张表中的一条数据，对应另外一张表中的一条数据，而且这些数据在表里都是唯一存在的</p><p>实际开发中一对一的关系并不常见，大多数时候一对一的关系其实可以建立成为一张表；如果需要建立一对一的关系，实现方式有两种：</p><ol><li><p><strong>唯一外键关联(在其中一张表建立外键，同时设置外键列唯一 unique)</strong></p></li><li><p>主键关联（两个表的主键列一致）</p><p><img src="'+h+'" alt="1596164167153"></p></li></ol><h4 id="一对多-多对一" tabindex="-1"><a class="header-anchor" href="#一对多-多对一" aria-hidden="true">#</a> 一对多/多对一</h4><p>一对多：一张表的一条数据，可以对应到另外一张表的很多条数据</p><p>一对多/多对一关系在开发中十分常见，大多数时候表之间的关系都是一对多/多对一的，比如：员工和部门，学生和班级，老师和学生，商品类别和商品，实现方式：</p><ul><li>在多的一方表中新增外键列，关联一的一方的主键列</li></ul><p><img src="'+k+'" alt="1596164769379"></p><h4 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多" aria-hidden="true">#</a> 多对多</h4><p>多对多:</p><p>多对多的关系在开发中也是很常见的，比如说：学生和课程关系，用户和商品的，实现关联的方式如下：</p><ul><li>通过第三张表维护两个表的关系</li></ul><p><img src="'+m+'" alt="1596165443776"></p><h3 id="数据库设计范式" tabindex="-1"><a class="header-anchor" href="#数据库设计范式" aria-hidden="true">#</a> 数据库设计范式</h3><p>​ 在进行数据库设计的时候需要满足的一些规范形式，称之为数据库范式，满足范式的数据库设计是合理的，数据冗余小的，并且不会引起数据更新的异常。</p>',40),R={href:"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/1237340",target:"_blank",rel:"noopener noreferrer"},T=n("strong",null,"第一范式（1NF）、第二范式（2NF）、第三范式（3NF）",-1),C={href:"https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F/3193985",target:"_blank",rel:"noopener noreferrer"},F={href:"https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F/5025271",target:"_blank",rel:"noopener noreferrer"},A=l('<p><img src="'+_+'" alt="1607003203211"></p><h4 id="第一范式" tabindex="-1"><a class="header-anchor" href="#第一范式" aria-hidden="true">#</a> 第一范式</h4><p>要求建立的数据库表中所有的列是原子的，每一列不可再拆分；目前的关系型数据库默认都是满足第一范式（不可能创建出不满足第一范式的数据表）20</p><p><img src="'+b+'" alt="596166392271"></p><h3 id="第一范式-列不可再分" tabindex="-1"><a class="header-anchor" href="#第一范式-列不可再分" aria-hidden="true">#</a> <strong>第一范式：列不可再分</strong></h3><p>~属性不可分割，每个字段都应该是不可再拆分的。~</p><p>保证每列的原子性，原子性的意思就是每列不可以再次被拆分，并保持独立且唯一</p><h3 id="第二范式-表中的每一列都必须完全依赖主键" tabindex="-1"><a class="header-anchor" href="#第二范式-表中的每一列都必须完全依赖主键" aria-hidden="true">#</a> **第二范式：表中的每一列都必须完全依赖主键 **</h3><p>可以去除部分的数据冗余</p><p><img src="'+g+'" alt="1596167334552"></p><h3 id="第三范式-需要确保数据表中的每一列都和主键有直接关系-而不能是间接关系" tabindex="-1"><a class="header-anchor" href="#第三范式-需要确保数据表中的每一列都和主键有直接关系-而不能是间接关系" aria-hidden="true">#</a> 第三范式 需要确保数据表中的每一列都和主键有直接关系 而不能是间接关系</h3><p><img src="'+f+'" alt="1596167846781"></p><h4 id="范式总结" tabindex="-1"><a class="header-anchor" href="#范式总结" aria-hidden="true">#</a> 范式总结</h4><p>​ 在实际开发中，一般情况只要满足三大范式即可；另外，由于程序对查询的需求(处于便捷性考虑)可能会出现违背三大范式的情况；因此三大范式只是设计数据时候的一种参考，并不是定律。</p><p>范式的存在主要解决了：</p><ol><li><strong>数据冗余</strong></li><li><strong>更新(insert,delete)操作异常</strong></li></ol><h3 id="数据库设计案例分析" tabindex="-1"><a class="header-anchor" href="#数据库设计案例分析" aria-hidden="true">#</a> 数据库设计案例分析</h3><h4 id="概念模型设计-er-图" tabindex="-1"><a class="header-anchor" href="#概念模型设计-er-图" aria-hidden="true">#</a> 概念模型设计（ER 图）</h4><p>​ E-R 图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型</p><p><img src="'+y+'" alt="1596370648058"></p><p>实体(表)，关系理解为表之间的联系；在数据库设计阶段，实体关系图的建立位于概念模型设计阶段，这一阶段主要用于进行实体之间的关系建立</p><p><img src="'+w+'" alt="1596177151438"></p><h4 id="物理模型设计-建表" tabindex="-1"><a class="header-anchor" href="#物理模型设计-建表" aria-hidden="true">#</a> 物理模型设计（建表)</h4><p>数据库设计一般使用一些专业设计工具，其中最常见以 sybase(SAP)的数据库建模工具 PowerDesigner 最为常见，还有一些其他数据库图形工具，比如 navcat 的模型</p><p><img src="'+v+'" alt="1596183813747"></p><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h2><ol><li><p>将以下数据库表重新设计，要求满足三大范式规范</p><p><img src="'+E+'" alt="1596184666780"></p></li><li><p>找一个网站，分析网站中包含的实体以及实体之间的关系，要求:</p><ol><li>设计概念模型（画 E-R 图）</li><li>将概念模型转换为物理模型（建表）</li></ol></li></ol>',27);function I(L,S){const e=p("router-link"),o=p("ExternalLinkIcon");return r(),d("div",null,[x,n("nav",N,[n("ul",null,[n("li",null,[s(e,{to:"#数据库可编程性-触发器"},{default:t(()=>[a("数据库可编程性-触发器")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#语法"},{default:t(()=>[a("语法")]),_:1})]),n("li",null,[s(e,{to:"#案例"},{default:t(()=>[a("案例")]),_:1})]),n("li",null,[s(e,{to:"#触发器的应用"},{default:t(()=>[a("触发器的应用：")]),_:1})])])]),n("li",null,[s(e,{to:"#数据库优化"},{default:t(()=>[a("数据库优化")]),_:1})]),n("li",null,[s(e,{to:"#数据库设计"},{default:t(()=>[a("数据库设计")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#表之间关系"},{default:t(()=>[a("表之间关系")]),_:1})]),n("li",null,[s(e,{to:"#数据库设计范式"},{default:t(()=>[a("数据库设计范式")]),_:1})]),n("li",null,[s(e,{to:"#第一范式-列不可再分"},{default:t(()=>[a("第一范式：列不可再分")]),_:1})]),n("li",null,[s(e,{to:"#第二范式-表中的每一列都必须完全依赖主键"},{default:t(()=>[a("**第二范式：表中的每一列都必须完全依赖主键 **")]),_:1})]),n("li",null,[s(e,{to:"#第三范式-需要确保数据表中的每一列都和主键有直接关系-而不能是间接关系"},{default:t(()=>[a("第三范式 需要确保数据表中的每一列都和主键有直接关系 而不能是间接关系")]),_:1})]),n("li",null,[s(e,{to:"#数据库设计案例分析"},{default:t(()=>[a("数据库设计案例分析")]),_:1})])])]),n("li",null,[s(e,{to:"#练习"},{default:t(()=>[a("练习")]),_:1})])])]),M,n("p",null,[a("​ 目前"),n("a",R,[a("关系数据库"),s(o)]),a("有六种范式："),T,a("、巴斯-科德范式（BCNF）、"),n("a",C,[a("第四范式"),s(o)]),a("(4NF）和"),n("a",F,[a("第五范式"),s(o)]),a("（5NF，又称完美范式）。")]),A])}const G=i(B,[["render",I],["__file","index.html.vue"]]);export{G as default};
