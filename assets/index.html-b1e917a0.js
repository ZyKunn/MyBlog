import{_ as t,r as e,o as p,c,a as s,e as l,w as o,b as n,d as i}from"./app-a153c100.js";const u="/MyBlog/assets/1618563471583-a9baa005.png",d="/MyBlog/assets/1618565068053-2bb0fed0.png",r="/MyBlog/assets/1618565088510-844e823d.png",k="/MyBlog/assets/1618569358836-683f3f85.png",m="/MyBlog/assets/1618569410323-7edcd27e.png",v={},g=s("h1",{id:"_09-反射-框架的设计灵魂",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_09-反射-框架的设计灵魂","aria-hidden":"true"},"#"),n(" 09 - 反射：框架的设计灵魂 ⭐")],-1),b={class:"table-of-contents"},h=i('<ul><li><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p></li><li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p></li><li><p>好处</p><ol><li>可以在程序运行过程中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ol></li><li><p>获取 class 对象的方式</p><ol><li><p>Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回 class 对象</p><p>（多数用于配置文件，将类名定义在配置文件中。读取文件，加载类）</p></li><li><p>类名.Class：通过类名的属性 Class 获取</p><p>（多用于参数的传递）</p></li><li><p>对象.getClass(): getClass 方法在 Object 类中定义的</p><p>（多用于对象的获取字节码的方式）</p></li></ol></li></ul><p><img src="'+u+'" alt="1618563471583"></p><p><img src="'+d+'" alt="1618565068053"></p><p><img src="'+r+`" alt="1618565088510"></p><p>结论： 通过同一个字节码文件（.Class）在一次程序运行过程中，只会被加载一次，无论通过那一种方式获取的 class 对象都是同一个</p><h2 id="class-对象功能" tabindex="-1"><a class="header-anchor" href="#class-对象功能" aria-hidden="true">#</a> Class 对象功能</h2><p><strong>获取功能</strong></p><ol><li><p>获取成员变量们</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span>	<span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>						<span class="token comment">//获取所有以public修饰的成员变量</span>
<span class="token class-name">Field</span>	<span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>			 <span class="token comment">//获取单个以public修饰的成员变量</span>

<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span>	<span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				 <span class="token comment">//获取所有修饰的成员变量</span>
<span class="token class-name">Field</span>	<span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>	  <span class="token comment">//获取所有修饰的成员变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt="1618569358836"></p><p><img src="'+m+`" alt="1618569410323"></p></li><li><p>获取构造方法们 construction [ ]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span>	<span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>	<span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>

<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span>	<span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>	<span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取成员方法们 method [ ]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span>	<span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>										<span class="token comment">//获取所有以public修饰的方法</span>
<span class="token class-name">Method</span>	<span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>		   <span class="token comment">//获取单个以public修饰的方法</span>

<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span>	<span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>								 <span class="token comment">//获取所有方法</span>
<span class="token class-name">Method</span>	<span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>	<span class="token comment">//获取单个方法</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取类名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span>	<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">//获取类名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="field-成员变量" tabindex="-1"><a class="header-anchor" href="#field-成员变量" aria-hidden="true">#</a> Field：成员变量</h4><p>操作：</p><ol><li><p>设置值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span>	<span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span>	<span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>忽略访问修饰符的安全检查</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//暴力反射</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="construction-构造方法" tabindex="-1"><a class="header-anchor" href="#construction-构造方法" aria-hidden="true">#</a> Construction:构造方法</h4><p>创建对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">T</span>	<span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>如果使用空参数构造方法创建对象，控制可以简化：class对象的newInstance</code></p><h4 id="method-方法" tabindex="-1"><a class="header-anchor" href="#method-方法" aria-hidden="true">#</a> Method：方法</h4><p>执行方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> invoke <span class="token punctuation">(</span><span class="token class-name">Object</span> obj ，<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取方法名称</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20);function j(f,_){const a=e("router-link");return p(),c("div",null,[g,s("nav",b,[s("ul",null,[s("li",null,[l(a,{to:"#class-对象功能"},{default:o(()=>[n("Class 对象功能")]),_:1})])])]),h])}const C=t(v,[["render",j],["__file","index.html.vue"]]);export{C as default};
