import{_ as s,o as n,c as a,d as t}from"./app-a153c100.js";const e={},p=t(`<h1 id="_02-h5-和-css3" tabindex="-1"><a class="header-anchor" href="#_02-h5-和-css3" aria-hidden="true">#</a> 02 - H5 和 CSS3 🧡</h1><h2 id="h5-的新元素" tabindex="-1"><a class="header-anchor" href="#h5-的新元素" aria-hidden="true">#</a> H5 的新元素</h2><p>什么是 Canvas?</p><p><code>&lt;canvas&gt;</code> 元素用于图形的绘制，通过脚本 (通常是 JavaScript)来完成.</p><p><code>&lt;canvas&gt;</code> 标签只是图形容器，您必须使用脚本来绘制图形。</p><h1 id="video" tabindex="-1"><a class="header-anchor" href="#video" aria-hidden="true">#</a> Video</h1><p>HTML5 <code>&lt;video&gt;</code> 标签定义了一个视频或者影片.</p><p>以下 HTML 片段会显示一段嵌入网页的 ogg、mp4 或 webm 格式的视频</p><p>不支持 HTML4 或者以上版本</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--controls：HTML5自带的播放器控制台--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>H5-01.mp4<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="audio" tabindex="-1"><a class="header-anchor" href="#audio" aria-hidden="true">#</a> Audio</h1><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>horse.ogg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>audio/ogg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>horse.mp3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>audio/mpeg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是-css" tabindex="-1"><a class="header-anchor" href="#什么是-css" aria-hidden="true">#</a> 什么是 CSS?</h2><ul><li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML 元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li><li>多个样式定义可<strong>层叠</strong>为一</li></ul><p>浏览器将 HTML5 和 CSS3 进行加载，并渲染出来，在页面展示</p><p>语法：</p><p>selecter{</p><p>​ css 的名称: css 的值；</p><p>}</p><h3 id="选择器的使用" tabindex="-1"><a class="header-anchor" href="#选择器的使用" aria-hidden="true">#</a> 选择器的使用：</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*标签选择器：页面中所有的该标签都遵循这个css*/</span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #4a74d8f0<span class="token punctuation">;</span>
  <span class="token comment">/*color：字体颜色*/</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*id选择器：根据id选择到对应的元素*/</span>
<span class="token selector">#xiaoP</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*class选择器：根据元素的class找到对应的元素*/</span>
<span class="token selector">.secondP</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="其中-标签选择的范围最广-精确度最低" tabindex="-1"><a class="header-anchor" href="#其中-标签选择的范围最广-精确度最低" aria-hidden="true">#</a> 其中：标签选择的范围最广，精确度最低</h6><p>​ class 选择器的范围第二广，原因是标签中的 class 是可以重复的，精确度也低</p><p>​ id 选择器，范围最窄，但是精确度最高，因为 id 是唯一的</p><h1 id="一边加载-一边执行" tabindex="-1"><a class="header-anchor" href="#一边加载-一边执行" aria-hidden="true">#</a> 一边加载，一边执行</h1><p>比如：一个标签中有两个 class 那么给这两个 class 同时设置 css，最终谁最后被加载，就使用谁的 css</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*class选择器：根据元素的class找到对应的元素*/</span>
<span class="token selector">.secondP</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.testP</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 &lt;p class=<span class="token string">&quot;secondP testP&quot;</span>&gt;我是第二个&lt;/p&gt;

最终使用的.testP的css，而.secondP的css会被覆盖掉
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css-的引用" tabindex="-1"><a class="header-anchor" href="#css-的引用" aria-hidden="true">#</a> CSS 的引用：</h3><h5 id="内嵌-css" tabindex="-1"><a class="header-anchor" href="#内嵌-css" aria-hidden="true">#</a> 内嵌 css</h5><p>第一种方式：在标签内部使用：<code>&lt;p class=&quot;secondP&quot; style=&quot;color: red;font-size: 60px&quot;&gt;我是第二个&lt;/p&gt;</code></p><h5 id="内部-css" tabindex="-1"><a class="header-anchor" href="#内部-css" aria-hidden="true">#</a> 内部 css</h5><p>第二种方式：</p><p>使用 style 标签，引用 css，在 head 的后面使用<code>&lt;style&gt;css&lt;/style&gt;</code></p><h5 id="外部-css" tabindex="-1"><a class="header-anchor" href="#外部-css" aria-hidden="true">#</a> 外部 css：</h5><p>第三种方式：</p><p>使用<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;</code>标签，引入外部的 css</p><p>rel=&quot;stylesheet&quot; 规范引入的 css 的文件格式 href 引入的 css 的文件路径</p><h6 id="img-标签比较特殊" tabindex="-1"><a class="header-anchor" href="#img-标签比较特殊" aria-hidden="true">#</a> img 标签比较特殊</h6><p>img 标签的属性 width 和 height，和他的 css：width，height 属性和 css 名称一样</p><p>当属性宽高和 css 的宽高同时存在是，css 将约束标签的宽高，而属性不起作用</p><h5 id="内嵌的-css-的优先级最高" tabindex="-1"><a class="header-anchor" href="#内嵌的-css-的优先级最高" aria-hidden="true">#</a> 内嵌的 css 的优先级最高</h5><p>内部和外部引用的 css，谁<strong>后</strong>加载，就用谁</p><p>背景：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>background:url(&quot;timg.jpg&quot;) white no-repeat 1px 2px; 背景图片 背景颜色 平铺 1px代表x轴 2px代表y轴
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选择器：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span><span class="token punctuation">{</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>   全局选择器，整个页面所有标签都遵循这个css
<span class="token punctuation">}</span>
<span class="token selector">p,div</span><span class="token punctuation">{</span>    所有的p标签和所有的div
            <span class="token property">color</span><span class="token punctuation">:</span> #4a74d8f0<span class="token punctuation">;</span><span class="token comment">/*color：字体颜色*/</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector">div p</span><span class="token punctuation">{</span>   选择到所有的div标签包含的p标签
            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token selector">div&gt;p</span><span class="token punctuation">{</span>  选择父元素为div的所有的p标签
            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token selector">div+p</span><span class="token punctuation">{</span>   选择所有div之后的p标签
            <span class="token property">color</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token selector">p[class]</span><span class="token punctuation">{</span>   选择所有有class属性的p标签
            <span class="token property">color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token selector">p[class=firstP]</span><span class="token punctuation">{</span>   选择所有class等于firstP属性的p标签
            <span class="token property">color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token selector">伪类选择器
    p:hover</span><span class="token punctuation">{</span>   当鼠标悬停到标签上时触发的选择器，鼠标移开恢复原样

    <span class="token punctuation">}</span>
	<span class="token selector">input:focus</span><span class="token punctuation">{</span>   当input标签被选择，出现可以输入的光标时触发的选择器，失去焦点时，恢复原样
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮动-float-和-display" tabindex="-1"><a class="header-anchor" href="#浮动-float-和-display" aria-hidden="true">#</a> 浮动 float 和 display：</h3><p>标准文档流：页面中元素按照其原有的特性进行排列</p><p>脱离标准文档流：给块状元素添加了浮动之后，块状将不会按照标准文档的排列顺序进行排列，而会进行位置移动</p><p>当需要让块状元素排成一行时，可以给块状元素添加 float 的 css，这样这些块状元素将脱离标准文档流，并且排成一行，同时他也会覆盖掉标准文档的标签</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>    让块状元素向左浮动，添加了float属性后，块状元素将脱离标准文档流
<span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>    清除浮动，清除的是该元素的四周的浮动属性与该元素的影响

dispaly 属性
<span class="token comment">/*将块状元素转换为行内元素*/</span>
<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token comment">/*行内块状元素：有行内元素的特性：不主动换行；又有块状元素的特性：可以设置宽高*/</span>

<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment">/*block：将一个行内元素转换为块状元素*/</span>

<span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token comment">/*当使用display为none时，该标签不会被显示在页面中*/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),c=[p];function l(i,o){return n(),a("div",null,c)}const d=s(e,[["render",l],["__file","index.html.vue"]]);export{d as default};
