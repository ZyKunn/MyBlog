import{_ as l,r as o,o as c,c as i,a as n,e,w as t,b as a,d as u}from"./app-a153c100.js";const r="/MyBlog/assets/image-20210718155003157-f574cd5e.png",d="/MyBlog/assets/image-20210718155059371-0e786510.png",k="/MyBlog/assets/image-20210718155328927-a126a2ed.png",m="/MyBlog/assets/image-20210718155448734-a5e010c5.png",v="/MyBlog/assets/image-20210718160907166-587a7cc9.png",b="/MyBlog/assets/image-20210718161707992-2d5637f9.png",g="/MyBlog/assets/image-20210718164412450-f53b9dd0.png",h="/MyBlog/assets/image-20210718164729543-7aabab46.png",_="/MyBlog/assets/image-20210718165100016-b12857ed.png",f="/MyBlog/assets/image-20210718171705383-d4a6ae35.png",y="/MyBlog/assets/image-20210718171759179-334fb00e.png",q="/MyBlog/assets/image-20210718172746378-dcfa0a67.png",x="/MyBlog/assets/image-20210718174328383-8bd94c61.png",w="/MyBlog/assets/image-20210718174416160-a054c24d.png",p="/MyBlog/assets/image-20210718174506856-b6f7e1ae.png",M="/MyBlog/assets/image-20210821073801398-0bf18f0f.png",Q="/MyBlog/assets/image-20210718182643311-38ab6213.png",B="/MyBlog/assets/image-20210718191657478-65182d6d.png",R="/MyBlog/assets/image-20210718191738706-64272140.png",D="/MyBlog/assets/image-20210718191939140-4c00060c.png",j="/MyBlog/assets/image-20210718192004662-d82a3197.png",T="/MyBlog/assets/image-20210718192529342-7c8e7569.png",C="/MyBlog/assets/image-20210718193409812-53c96e23.png",E="/MyBlog/assets/image-20210718193747649-acab4a34.png",S="/MyBlog/assets/image-20210718193831076-567bf376.png",A="/MyBlog/assets/image-20210718193917009-36270fc8.png",L="/MyBlog/assets/image-20210718194040498-0b14cf5d.png",z="/MyBlog/assets/image-20210718194522223-8673ddc8.png",I="/MyBlog/assets/image-20210718194539054-b8352f3b.png",U="/MyBlog/assets/image-20210718220843323-4beadc93.png",P="/MyBlog/assets/image-20210718221039542-34311eab.png",K={},N=n("h1",{id:"day05-服务异步通信-高级篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#day05-服务异步通信-高级篇","aria-hidden":"true"},"#"),a(" day05-服务异步通信-高级篇")],-1),V={class:"table-of-contents"},F=u('<p>消息队列在使用过程中，面临着很多实际问题需要思考：</p><p><img src="'+r+'" alt="image-20210718155003157"></p><h1 id="_1-消息可靠性" tabindex="-1"><a class="header-anchor" href="#_1-消息可靠性" aria-hidden="true">#</a> 1.消息可靠性</h1><p>消息从发送，到消费者接收，会经理多个过程：</p><p><img src="'+d+'" alt="image-20210718155059371"></p><p>其中的每一步都可能导致消息丢失，常见的丢失原因包括：</p><ul><li>发送时丢失： <ul><li>生产者发送的消息未送达 exchange</li><li>消息到达 exchange 后未到达 queue</li></ul></li><li>MQ 宕机，queue 将消息丢失</li><li>consumer 接收到消息后未消费就宕机</li></ul><p>针对这些问题，RabbitMQ 分别给出了解决方案：</p><ul><li>生产者确认机制</li><li>mq 持久化</li><li>消费者确认机制</li><li>失败重试机制</li></ul><p>下面我们就通过案例来演示每一个步骤。</p><p>首先，导入课前资料提供的 demo 工程：</p><p><img src="'+k+'" alt="image-20210718155328927"></p><p>项目结构如下：</p><p><img src="'+m+'" alt="image-20210718155448734"></p><h2 id="_1-1-生产者消息确认" tabindex="-1"><a class="header-anchor" href="#_1-1-生产者消息确认" aria-hidden="true">#</a> 1.1.生产者消息确认</h2><p>RabbitMQ 提供了 publisher confirm 机制来避免消息发送到 MQ 过程中丢失。这种机制必须给每个消息指定一个唯一 ID。消息发送到 MQ 以后，会返回一个结果给发送者，表示消息是否处理成功。</p><p>返回结果有两种方式：</p><ul><li>publisher-confirm，发送者确认 <ul><li>消息成功投递到交换机，返回 ack</li><li>消息未投递到交换机，返回 nack</li></ul></li><li>publisher-return，发送者回执 <ul><li>消息投递到交换机了，但是没有路由到队列。返回 ACK，及路由失败原因。</li></ul></li></ul><p><img src="'+v+'" alt="image-20210718160907166"></p><p>注意：</p><p><img src="'+b+`" alt="image-20210718161707992"></p><h3 id="_1-1-1-修改配置" tabindex="-1"><a class="header-anchor" href="#_1-1-1-修改配置" aria-hidden="true">#</a> 1.1.1.修改配置</h3><p>首先，修改 publisher 服务中的 application.yml 文件，添加下面的内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">publisher-confirm-type</span><span class="token punctuation">:</span> correlated
    <span class="token key atrule">publisher-returns</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><code>publish-confirm-type</code>：开启 publisher-confirm，这里支持两种类型： <ul><li><code>simple</code>：同步等待 confirm 结果，直到超时</li><li><code>correlated</code>：异步回调，定义 ConfirmCallback，MQ 返回结果时会回调这个 ConfirmCallback</li></ul></li><li><code>publish-returns</code>：开启 publish-return 功能，同样是基于 callback 机制，不过是定义 ReturnCallback</li><li><code>template.mandatory</code>：定义消息路由失败时的策略。true，则调用 ReturnCallback；false：则直接丢弃消息</li></ul><h3 id="_1-1-2-定义-return-回调" tabindex="-1"><a class="header-anchor" href="#_1-1-2-定义-return-回调" aria-hidden="true">#</a> 1.1.2.定义 Return 回调</h3><p>每个 RabbitTemplate 只能配置一个 ReturnCallback，因此需要在项目加载时配置：</p><p>修改 publisher 服务，添加一个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextAware</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取RabbitTemplate</span>
        <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置ReturnCallback</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 投递失败，记录日志</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败，应答码{}，原因{}，交换机{}，路由键{},消息{}&quot;</span><span class="token punctuation">,</span>
                     replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果有业务需要，可以重发消息</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-3-定义-confirmcallback" tabindex="-1"><a class="header-anchor" href="#_1-1-3-定义-confirmcallback" aria-hidden="true">#</a> 1.1.3.定义 ConfirmCallback</h3><p>ConfirmCallback 可以在发送消息时指定，因为每个业务处理 confirm 成功或失败的逻辑不一定相同。</p><p>在 publisher 服务的 cn.itcast.mq.spring.SpringAmqpTest 类中，定义一个单元测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage2SimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.消息体</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, spring amqp!&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.全局唯一的消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.添加callback</span>
    correlationData<span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>
        result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 3.1.ack，消息成功</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送成功, ID:{}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment">// 3.2.nack，消息失败</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败, ID:{}, 原因{}&quot;</span><span class="token punctuation">,</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        ex <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送异常, ID:{}, 原因{}&quot;</span><span class="token punctuation">,</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;task.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;task&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 休眠一会儿，等待ack回执</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-消息持久化" tabindex="-1"><a class="header-anchor" href="#_1-2-消息持久化" aria-hidden="true">#</a> 1.2.消息持久化</h2><p>生产者确认可以确保消息投递到 RabbitMQ 的队列中，但是消息发送到 RabbitMQ 以后，如果突然宕机，也可能导致消息丢失。</p><p>要想确保消息在 RabbitMQ 中安全保存，必须开启消息持久化机制。</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><h3 id="_1-2-1-交换机持久化" tabindex="-1"><a class="header-anchor" href="#_1-2-1-交换机持久化" aria-hidden="true">#</a> 1.2.1.交换机持久化</h3><p>RabbitMQ 中交换机默认是非持久化的，mq 重启后就丢失。</p><p>SpringAMQP 中可以通过代码指定交换机持久化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">simpleExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;simple.direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，默认情况下，由 SpringAMQP 声明的交换机都是持久化的。</p><p>可以在 RabbitMQ 控制台看到持久化的交换机都会带上<code>D</code>的标示：</p><p><img src="`+g+`" alt="image-20210718164412450"></p><h3 id="_1-2-2-队列持久化" tabindex="-1"><a class="header-anchor" href="#_1-2-2-队列持久化" aria-hidden="true">#</a> 1.2.2.队列持久化</h3><p>RabbitMQ 中队列默认是非持久化的，mq 重启后就丢失。</p><p>SpringAMQP 中可以通过代码指定交换机持久化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 使用QueueBuilder构建队列，durable就是持久化的</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，默认情况下，由 SpringAMQP 声明的队列都是持久化的。</p><p>可以在 RabbitMQ 控制台看到持久化的队列都会带上<code>D</code>的标示：</p><p><img src="`+h+'" alt="image-20210718164729543"></p><h3 id="_1-2-3-消息持久化" tabindex="-1"><a class="header-anchor" href="#_1-2-3-消息持久化" aria-hidden="true">#</a> 1.2.3.消息持久化</h3><p>利用 SpringAMQP 发送消息时，可以设置消息的属性（MessageProperties），指定 delivery-mode：</p><ul><li>1：非持久化</li><li>2：持久化</li></ul><p>用 java 代码指定：</p><p><img src="'+_+`" alt="image-20210718165100016"></p><p>默认情况下，SpringAMQP 发出的任何消息都是持久化的，不用特意指定。</p><h2 id="_1-3-消费者消息确认" tabindex="-1"><a class="header-anchor" href="#_1-3-消费者消息确认" aria-hidden="true">#</a> 1.3.消费者消息确认</h2><p>RabbitMQ 是<strong>阅后即焚</strong>机制，RabbitMQ 确认消息被消费者消费后会立刻删除。</p><p>而 RabbitMQ 是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向 RabbitMQ 发送 ACK 回执，表明自己已经处理消息。</p><p>设想这样的场景：</p><ul><li>1）RabbitMQ 投递消息给消费者</li><li>2）消费者获取消息后，返回 ACK 给 RabbitMQ</li><li>3）RabbitMQ 删除消息</li><li>4）消费者宕机，消息尚未处理</li></ul><p>这样，消息就丢失了。因此消费者返回 ACK 的时机非常重要。</p><p>而 SpringAMQP 则允许配置三种确认模式：</p><p>•manual：手动 ack，需要在业务代码结束后，调用 api 发送 ack。</p><p>•auto：自动 ack，由 spring 监测 listener 代码是否出现异常，没有异常则返回 ack；抛出异常则返回 nack</p><p>•none：关闭 ack，MQ 假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p><p>由此可知：</p><ul><li>none 模式下，消息投递是不可靠的，可能丢失</li><li>auto 模式类似事务机制，出现异常时返回 nack，消息回滚到 mq；没有异常，返回 ack</li><li>manual：自己根据业务情况，判断什么时候该 ack</li></ul><p>一般，我们都是使用默认的 auto 即可。</p><h3 id="_1-3-1-演示-none-模式" tabindex="-1"><a class="header-anchor" href="#_1-3-1-演示-none-模式" aria-hidden="true">#</a> 1.3.1.演示 none 模式</h3><p>修改 consumer 服务的 application.yml 文件，添加下面内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> none <span class="token comment"># 关闭ack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 consumer 服务的 SpringRabbitListener 类中的方法，模拟一个消息处理异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenSimpleQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到simple.queue的消息：【{}】&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟异常</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息处理完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试可以发现，当消息处理抛异常时，消息依然被 RabbitMQ 删除了。</p><h3 id="_1-3-2-演示-auto-模式" tabindex="-1"><a class="header-anchor" href="#_1-3-2-演示-auto-模式" aria-hidden="true">#</a> 1.3.2.演示 auto 模式</h3><p>再次把确认机制修改为 auto:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> auto <span class="token comment"># 关闭ack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为 unack（未确定状态）：</p><p><img src="`+f+'" alt="image-20210718171705383"></p><p>抛出异常后，因为 Spring 会自动返回 nack，所以消息恢复至 Ready 状态，并且没有被 RabbitMQ 删除：</p><p><img src="'+y+'" alt="image-20210718171759179"></p><h2 id="_1-4-消费失败重试机制" tabindex="-1"><a class="header-anchor" href="#_1-4-消费失败重试机制" aria-hidden="true">#</a> 1.4.消费失败重试机制</h2><p>当消费者出现异常后，消息会不断 requeue（重入队）到队列，再重新发送给消费者，然后再次异常，再次 requeue，无限循环，导致 mq 的消息处理飙升，带来不必要的压力：</p><p><img src="'+q+`" alt="image-20210718172746378"></p><p>怎么办呢？</p><h3 id="_1-4-1-本地重试" tabindex="-1"><a class="header-anchor" href="#_1-4-1-本地重试" aria-hidden="true">#</a> 1.4.1.本地重试</h3><p>我们可以利用 Spring 的 retry 机制，在消费者出现异常时利用本地重试，而不是无限制的 requeue 到 mq 队列。</p><p>修改 consumer 服务的 application.yml 文件，添加内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">retry</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启消费者失败重试</span>
          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 初识的失败等待时长为1秒</span>
          <span class="token key atrule">multiplier</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span>
          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 最大重试次数</span>
          <span class="token key atrule">stateless</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 consumer 服务，重复之前的测试。可以发现：</p><ul><li>在重试 3 次后，SpringAMQP 会抛出异常 AmqpRejectAndDontRequeueException，说明本地重试触发了</li><li>查看 RabbitMQ 控制台，发现消息被删除了，说明最后 SpringAMQP 返回的是 ack，mq 删除消息了</li></ul><p>结论：</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会 requeue 到队列，而是在消费者本地重试</li><li>重试达到最大次数后，Spring 会返回 ack，消息会被丢弃</li></ul><h3 id="_1-4-2-失败策略" tabindex="-1"><a class="header-anchor" href="#_1-4-2-失败策略" aria-hidden="true">#</a> 1.4.2.失败策略</h3><p>在之前的测试中，达到最大重试次数后，消息会被丢弃，这是由 Spring 内部机制决定的。</p><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有 MessageRecovery 接口来处理，它包含三种不同的实现：</p><ul><li><p>RejectAndDontRequeueRecoverer：重试耗尽后，直接 reject，丢弃消息。默认就是这种方式</p></li><li><p>ImmediateRequeueMessageRecoverer：重试耗尽后，返回 nack，消息重新入队</p></li><li><p>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机</p></li></ul><p>比较优雅的一种处理方案是 RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p>1）在 consumer 服务中定义处理失败消息的交换机和队列</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;error.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">errorBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> errorQueue<span class="token punctuation">,</span> <span class="token class-name">DirectExchange</span> errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）定义一个 RepublishMessageRecoverer，关联队列和交换机</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MessageRecoverer</span> <span class="token function">republishMessageRecoverer</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RepublishMessageRecoverer</span><span class="token punctuation">(</span>rabbitTemplate<span class="token punctuation">,</span> <span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Binding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BindingBuilder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">DirectExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>retry<span class="token punctuation">.</span></span><span class="token class-name">MessageRecoverer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>retry<span class="token punctuation">.</span></span><span class="token class-name">RepublishMessageRecoverer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorMessageConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;error.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">errorBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> errorQueue<span class="token punctuation">,</span> <span class="token class-name">DirectExchange</span> errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageRecoverer</span> <span class="token function">republishMessageRecoverer</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RepublishMessageRecoverer</span><span class="token punctuation">(</span>rabbitTemplate<span class="token punctuation">,</span> <span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a> 1.5.总结</h2><p>如何确保 RabbitMQ 消息的可靠性？</p><ul><li>开启生产者确认机制，确保生产者的消息能到达队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为 auto，由 spring 确认消息处理成功后完成 ack</li><li>开启消费者失败重试机制，并设置 MessageRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul><h1 id="_2-死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-死信交换机" aria-hidden="true">#</a> 2.死信交换机</h1><h2 id="_2-1-初识死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-1-初识死信交换机" aria-hidden="true">#</a> 2.1.初识死信交换机</h2><h3 id="_2-1-1-什么是死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-1-1-什么是死信交换机" aria-hidden="true">#</a> 2.1.1.什么是死信交换机</h3><p>什么是死信？</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用 basic.reject 或 basic.nack 声明消费失败，并且消息的 requeue 参数设置为 false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果这个包含死信的队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，检查 DLX）。</p><p>如图，一个消息被消费者拒绝了，变成了死信：</p><p><img src="`+x+'" alt="image-20210718174328383"></p><p>因为 simple.queue 绑定了死信交换机 dl.direct，因此死信会投递给这个交换机：</p><p><img src="'+w+'" alt="image-20210718174416160"></p><p>如果这个死信交换机也绑定了一个队列，则消息最终会进入这个存放死信的队列：</p><p><img src="'+p+'" alt="image-20210718174506856"></p><p>另外，队列将死信投递给死信交换机时，必须知道两个信息：</p><ul><li>死信交换机名称</li><li>死信交换机与死信队列绑定的 RoutingKey</li></ul><p>这样才能确保投递的消息能到达死信交换机，并且正确的路由到死信队列。</p><p><img src="'+M+'" alt="image-20210821073801398"></p><h3 id="_2-1-2-利用死信交换机接收死信-拓展" tabindex="-1"><a class="header-anchor" href="#_2-1-2-利用死信交换机接收死信-拓展" aria-hidden="true">#</a> 2.1.2.利用死信交换机接收死信（拓展）</h3><p>在失败重试策略中，默认的 RejectAndDontRequeueRecoverer 会在本地重试次数耗尽后，发送 reject 给 RabbitMQ，消息变成死信，被丢弃。</p><p>我们可以给 simple.queue 添加一个死信交换机，给死信交换机绑定一个队列。这样消息变成死信后也不会丢弃，而是最终投递到死信交换机，路由到与死信交换机绑定的队列。</p><p><img src="'+p+`" alt="image-20210718174506856"></p><p>我们在 consumer 服务中，定义一组死信交换机、死信队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 声明普通的 simple.queue队列，并且为其指定死信交换机：dl.direct</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>
        <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.direct&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 声明死信交换机 dl.direct</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 声明存储死信的队列 dl.queue</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;dl.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将死信队列 与 死信交换机绑定</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">dlBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;simple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-3-总结" tabindex="-1"><a class="header-anchor" href="#_2-1-3-总结" aria-hidden="true">#</a> 2.1.3.总结</h3><p>什么样的消息会成为死信？</p><ul><li>消息被消费者 reject 或者返回 nack</li><li>消息超时未消费</li><li>队列满了</li></ul><p>死信交换机的使用场景是什么？</p><ul><li>如果队列绑定了死信交换机，死信会投递到死信交换机；</li><li>可以利用死信交换机收集所有消费者处理失败的消息（死信），交由人工处理，进一步提高消息队列的可靠性。</li></ul><h2 id="_2-2-ttl" tabindex="-1"><a class="header-anchor" href="#_2-2-ttl" aria-hidden="true">#</a> 2.2.TTL</h2><p>一个队列中的消息如果超时未消费，则会变为死信，超时分为两种情况：</p><ul><li>消息所在的队列设置了超时时间</li><li>消息本身设置了超时时间</li></ul><p><img src="`+Q+`" alt="image-20210718182643311"></p><h3 id="_2-2-1-接收超时死信的死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-2-1-接收超时死信的死信交换机" aria-hidden="true">#</a> 2.2.1.接收超时死信的死信交换机</h3><p>在 consumer 服务的 SpringRabbitListener 中，定义一个新的消费者，并且声明 死信交换机、死信队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dl.ttl.queue&quot;</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dl.ttl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    key <span class="token operator">=</span> <span class="token string">&quot;ttl&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenDlQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到 dl.ttl.queue的延迟消息：{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-2-声明一个队列-并且指定-ttl" tabindex="-1"><a class="header-anchor" href="#_2-2-2-声明一个队列-并且指定-ttl" aria-hidden="true">#</a> 2.2.2.声明一个队列，并且指定 TTL</h3><p>要给队列设置超时时间，需要在声明队列时配置 x-message-ttl 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>
        <span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment">// 设置队列的超时时间，10秒</span>
        <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.ttl.direct&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这个队列设定了死信交换机为<code>dl.ttl.direct</code></p><p>声明交换机，将 ttl 与交换机绑定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">ttlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">ttlBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">ttlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;ttl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息，但是不要指定 TTL：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTTLQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建消息</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, ttl queue&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttl&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录日志</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息的日志：</p><p><img src="`+B+'" alt="image-20210718191657478"></p><p>查看下接收消息的日志：</p><p><img src="'+R+`" alt="image-20210718191738706"></p><p>因为队列的 TTL 值是 10000ms，也就是 10 秒。可以看到消息发送与接收之间的时差刚好是 10 秒。</p><h3 id="_2-2-3-发送消息时-设定-ttl" tabindex="-1"><a class="header-anchor" href="#_2-2-3-发送消息时-设定-ttl" aria-hidden="true">#</a> 2.2.3.发送消息时，设定 TTL</h3><p>在发送消息时，也可以指定 TTL：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTTLMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建消息</span>
    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
        <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello, ttl message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token string">&quot;5000&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttl&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看发送消息日志：</p><p><img src="`+D+'" alt="image-20210718191939140"></p><p>接收消息日志：</p><p><img src="'+j+'" alt="image-20210718192004662"></p><p>这次，发送与接收的延迟只有 5 秒。说明当队列、消息都设置了 TTL 时，任意一个到期就会成为死信。</p><h3 id="_2-2-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-2-4-总结" aria-hidden="true">#</a> 2.2.4.总结</h3><p>消息超时的两种方式是？</p><ul><li>给队列设置 ttl 属性，进入队列后超过 ttl 时间的消息变为死信</li><li>给消息设置 ttl 属性，队列接收到消息超过 ttl 时间后变为死信</li></ul><p>如何实现发送一个消息 20 秒后消费者才收到消息？</p><ul><li>给消息的目标队列指定死信交换机</li><li>将消费者监听的队列绑定到死信交换机</li><li>发送消息时给消息设置超时时间为 20 秒</li></ul><h2 id="_2-3-延迟队列" tabindex="-1"><a class="header-anchor" href="#_2-3-延迟队列" aria-hidden="true">#</a> 2.3.延迟队列</h2><p>利用 TTL 结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为延迟队列（Delay Queue）模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在 15 分钟内未支付，则自动取消</li><li>预约工作会议，20 分钟后自动通知所有参会人员</li></ul><p>因为延迟队列的需求非常多，所以 RabbitMQ 的官方也推出了一个插件，原生支持延迟队列效果。</p><p>这个插件就是 DelayExchange 插件。参考 RabbitMQ 的插件列表页面：https://www.rabbitmq.com/community-plugins.html</p><p><img src="'+T+'" alt="image-20210718192529342"></p><p>使用方式可以参考官网地址：https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</p><h3 id="_2-3-1-安装-delayexchange-插件" tabindex="-1"><a class="header-anchor" href="#_2-3-1-安装-delayexchange-插件" aria-hidden="true">#</a> 2.3.1.安装 DelayExchange 插件</h3><p>参考课前资料：</p><p><img src="'+C+'" alt="image-20210718193409812"></p><h3 id="_2-3-2-delayexchange-原理" tabindex="-1"><a class="header-anchor" href="#_2-3-2-delayexchange-原理" aria-hidden="true">#</a> 2.3.2.DelayExchange 原理</h3><p>DelayExchange 需要将一个交换机声明为 delayed 类型。当我们发送消息到 delayExchange 时，流程如下：</p><ul><li>接收消息</li><li>判断消息是否具备 x-delay 属性</li><li>如果有 x-delay 属性，说明是延迟消息，持久化到硬盘，读取 x-delay 值，作为延迟时间</li><li>返回 routing not found 结果给消息发送者</li><li>x-delay 时间到期后，重新投递消息到指定队列</li></ul><h3 id="_2-3-3-使用-delayexchange" tabindex="-1"><a class="header-anchor" href="#_2-3-3-使用-delayexchange" aria-hidden="true">#</a> 2.3.3.使用 DelayExchange</h3><p>插件的使用也非常简单：声明一个交换机，交换机的类型可以是任意类型，只需要设定 delayed 属性为 true 即可，然后声明队列与其绑定即可。</p><h4 id="_1-声明-delayexchange-交换机" tabindex="-1"><a class="header-anchor" href="#_1-声明-delayexchange-交换机" aria-hidden="true">#</a> 1）声明 DelayExchange 交换机</h4><p>基于注解方式（推荐）：</p><p><img src="'+E+'" alt="image-20210718193747649"></p><p>也可以基于@Bean 的方式：</p><p><img src="'+S+'" alt="image-20210718193831076"></p><h4 id="_2-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-发送消息" aria-hidden="true">#</a> 2）发送消息</h4><p>发送消息时，一定要携带 x-delay 属性，指定延迟的时间：</p><p><img src="'+A+'" alt="image-20210718193917009"></p><h3 id="_2-3-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-3-4-总结" aria-hidden="true">#</a> 2.3.4.总结</h3><p>延迟队列插件的使用步骤包括哪些？</p><p>•声明一个交换机，添加 delayed 属性为 true</p><p>•发送消息时，添加 x-delay 头，值为超时时间</p><h1 id="_3-惰性队列" tabindex="-1"><a class="header-anchor" href="#_3-惰性队列" aria-hidden="true">#</a> 3.惰性队列</h1><h2 id="_3-1-消息堆积问题" tabindex="-1"><a class="header-anchor" href="#_3-1-消息堆积问题" aria-hidden="true">#</a> 3.1.消息堆积问题</h2><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。之后发送的消息就会成为死信，可能会被丢弃，这就是消息堆积问题。</p><p><img src="'+L+`" alt="image-20210718194040498"></p><p>解决消息堆积有两种思路：</p><ul><li>增加更多消费者，提高消费速度。也就是我们之前说的 work queue 模式</li><li>扩大队列容积，提高堆积上限</li></ul><p>要提升队列容积，把消息保存在内存中显然是不行的。</p><h2 id="_3-2-惰性队列" tabindex="-1"><a class="header-anchor" href="#_3-2-惰性队列" aria-hidden="true">#</a> 3.2.惰性队列</h2><p>从 RabbitMQ 的 3.6.0 版本开始，就增加了 Lazy Queues 的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><h3 id="_3-2-1-基于命令行设置-lazy-queue" tabindex="-1"><a class="header-anchor" href="#_3-2-1-基于命令行设置-lazy-queue" aria-hidden="true">#</a> 3.2.1.基于命令行设置 lazy-queue</h3><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定 x-queue-mode 属性为 lazy 即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_policy Lazy <span class="token string">&quot;^lazy-queue$&quot;</span> <span class="token string">&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</span> --apply-to queues
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ 的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</code> ：设置队列模式为 lazy 模式</li><li><code>--apply-to queues </code>：策略的作用对象，是所有的队列</li></ul><h3 id="_3-2-2-基于-bean-声明-lazy-queue" tabindex="-1"><a class="header-anchor" href="#_3-2-2-基于-bean-声明-lazy-queue" aria-hidden="true">#</a> 3.2.2.基于@Bean 声明 lazy-queue</h3><p><img src="`+z+'" alt="image-20210718194522223"></p><h3 id="_3-2-3-基于-rabbitlistener-声明-lazyqueue" tabindex="-1"><a class="header-anchor" href="#_3-2-3-基于-rabbitlistener-声明-lazyqueue" aria-hidden="true">#</a> 3.2.3.基于@RabbitListener 声明 LazyQueue</h3><p><img src="'+I+'" alt="image-20210718194539054"></p><h3 id="_3-3-总结" tabindex="-1"><a class="header-anchor" href="#_3-3-总结" aria-hidden="true">#</a> 3.3.总结</h3><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>使用惰性队列，可以再 mq 中保存更多消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的 page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些？</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的 IO</li></ul><h1 id="_4-mq-集群" tabindex="-1"><a class="header-anchor" href="#_4-mq-集群" aria-hidden="true">#</a> 4.MQ 集群</h1><h2 id="_4-1-集群分类" tabindex="-1"><a class="header-anchor" href="#_4-1-集群分类" aria-hidden="true">#</a> 4.1.集群分类</h2><p>RabbitMQ 的是基于 Erlang 语言编写，而 Erlang 又是一个面向并发的语言，天然支持集群模式。RabbitMQ 的集群有两种模式：</p><p>•<strong>普通集群</strong>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p><p>•<strong>镜像集群</strong>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p><p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在 RabbitMQ 的 3.8 版本以后，推出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采用 Raft 协议确保主从的数据一致性。</p><h2 id="_4-2-普通集群" tabindex="-1"><a class="header-anchor" href="#_4-2-普通集群" aria-hidden="true">#</a> 4.2.普通集群</h2><h3 id="_4-2-1-集群结构和特征" tabindex="-1"><a class="header-anchor" href="#_4-2-1-集群结构和特征" aria-hidden="true">#</a> 4.2.1.集群结构和特征</h3><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul><p>结构如图：</p><p><img src="'+U+'" alt="image-20210718220843323"></p><h3 id="_4-2-2-部署" tabindex="-1"><a class="header-anchor" href="#_4-2-2-部署" aria-hidden="true">#</a> 4.2.2.部署</h3><p>参考课前资料：《RabbitMQ 部署指南.md》</p><h2 id="_4-3-镜像集群" tabindex="-1"><a class="header-anchor" href="#_4-3-镜像集群" aria-hidden="true">#</a> 4.3.镜像集群</h2><h3 id="_4-3-1-集群结构和特征" tabindex="-1"><a class="header-anchor" href="#_4-3-1-集群结构和特征" aria-hidden="true">#</a> 4.3.1.集群结构和特征</h3><p>镜像集群：本质是主从模式，具备下面的特征：</p><ul><li>交换机、队列、队列中的消息会在各个 mq 的镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的<strong>主节点，<strong>备份到的其它节点叫做该队列的</strong>镜像</strong>节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主</li></ul><p>结构如图：</p><p><img src="'+P+`" alt="image-20210718221039542"></p><h3 id="_4-3-2-部署" tabindex="-1"><a class="header-anchor" href="#_4-3-2-部署" aria-hidden="true">#</a> 4.3.2.部署</h3><p>参考课前资料：《RabbitMQ 部署指南.md》</p><h2 id="_4-4-仲裁队列" tabindex="-1"><a class="header-anchor" href="#_4-4-仲裁队列" aria-hidden="true">#</a> 4.4.仲裁队列</h2><h3 id="_4-4-1-集群特征" tabindex="-1"><a class="header-anchor" href="#_4-4-1-集群特征" aria-hidden="true">#</a> 4.4.1.集群特征</h3><p>仲裁队列：仲裁队列是 3.8 版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于 Raft 协议，强一致</li></ul><h3 id="_4-4-2-部署" tabindex="-1"><a class="header-anchor" href="#_4-4-2-部署" aria-hidden="true">#</a> 4.4.2.部署</h3><p>参考课前资料：《RabbitMQ 部署指南.md》</p><h3 id="_4-4-3-java-代码创建仲裁队列" tabindex="-1"><a class="header-anchor" href="#_4-4-3-java-代码创建仲裁队列" aria-hidden="true">#</a> 4.4.3.Java 代码创建仲裁队列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">quorumQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;quorum.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 持久化</span>
        <span class="token punctuation">.</span><span class="token function">quorum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 仲裁队列</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-4-springamqp-连接-mq-集群" tabindex="-1"><a class="header-anchor" href="#_4-4-4-springamqp-连接-mq-集群" aria-hidden="true">#</a> 4.4.4.SpringAMQP 连接 MQ 集群</h3><p>注意，这里用 address 来代替 host、port 方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spring<span class="token operator">:</span>
  rabbitmq<span class="token operator">:</span>
    addresses<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.105</span><span class="token operator">:</span><span class="token number">8071</span><span class="token punctuation">,</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.105</span><span class="token operator">:</span><span class="token number">8072</span><span class="token punctuation">,</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.105</span><span class="token operator">:</span><span class="token number">8073</span>
    username<span class="token operator">:</span> itcast
    password<span class="token operator">:</span> <span class="token number">123321</span>
    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,258);function J(O,$){const s=o("router-link");return c(),i("div",null,[N,n("nav",V,[n("ul",null,[n("li",null,[e(s,{to:"#_1-1-生产者消息确认"},{default:t(()=>[a("1.1.生产者消息确认")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_1-1-1-修改配置"},{default:t(()=>[a("1.1.1.修改配置")]),_:1})]),n("li",null,[e(s,{to:"#_1-1-2-定义-return-回调"},{default:t(()=>[a("1.1.2.定义 Return 回调")]),_:1})]),n("li",null,[e(s,{to:"#_1-1-3-定义-confirmcallback"},{default:t(()=>[a("1.1.3.定义 ConfirmCallback")]),_:1})])])]),n("li",null,[e(s,{to:"#_1-2-消息持久化"},{default:t(()=>[a("1.2.消息持久化")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_1-2-1-交换机持久化"},{default:t(()=>[a("1.2.1.交换机持久化")]),_:1})]),n("li",null,[e(s,{to:"#_1-2-2-队列持久化"},{default:t(()=>[a("1.2.2.队列持久化")]),_:1})]),n("li",null,[e(s,{to:"#_1-2-3-消息持久化"},{default:t(()=>[a("1.2.3.消息持久化")]),_:1})])])]),n("li",null,[e(s,{to:"#_1-3-消费者消息确认"},{default:t(()=>[a("1.3.消费者消息确认")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_1-3-1-演示-none-模式"},{default:t(()=>[a("1.3.1.演示 none 模式")]),_:1})]),n("li",null,[e(s,{to:"#_1-3-2-演示-auto-模式"},{default:t(()=>[a("1.3.2.演示 auto 模式")]),_:1})])])]),n("li",null,[e(s,{to:"#_1-4-消费失败重试机制"},{default:t(()=>[a("1.4.消费失败重试机制")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_1-4-1-本地重试"},{default:t(()=>[a("1.4.1.本地重试")]),_:1})]),n("li",null,[e(s,{to:"#_1-4-2-失败策略"},{default:t(()=>[a("1.4.2.失败策略")]),_:1})])])]),n("li",null,[e(s,{to:"#_1-5-总结"},{default:t(()=>[a("1.5.总结")]),_:1})]),n("li",null,[e(s,{to:"#_2-1-初识死信交换机"},{default:t(()=>[a("2.1.初识死信交换机")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_2-1-1-什么是死信交换机"},{default:t(()=>[a("2.1.1.什么是死信交换机")]),_:1})]),n("li",null,[e(s,{to:"#_2-1-2-利用死信交换机接收死信-拓展"},{default:t(()=>[a("2.1.2.利用死信交换机接收死信（拓展）")]),_:1})]),n("li",null,[e(s,{to:"#_2-1-3-总结"},{default:t(()=>[a("2.1.3.总结")]),_:1})])])]),n("li",null,[e(s,{to:"#_2-2-ttl"},{default:t(()=>[a("2.2.TTL")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_2-2-1-接收超时死信的死信交换机"},{default:t(()=>[a("2.2.1.接收超时死信的死信交换机")]),_:1})]),n("li",null,[e(s,{to:"#_2-2-2-声明一个队列-并且指定-ttl"},{default:t(()=>[a("2.2.2.声明一个队列，并且指定 TTL")]),_:1})]),n("li",null,[e(s,{to:"#_2-2-3-发送消息时-设定-ttl"},{default:t(()=>[a("2.2.3.发送消息时，设定 TTL")]),_:1})]),n("li",null,[e(s,{to:"#_2-2-4-总结"},{default:t(()=>[a("2.2.4.总结")]),_:1})])])]),n("li",null,[e(s,{to:"#_2-3-延迟队列"},{default:t(()=>[a("2.3.延迟队列")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_2-3-1-安装-delayexchange-插件"},{default:t(()=>[a("2.3.1.安装 DelayExchange 插件")]),_:1})]),n("li",null,[e(s,{to:"#_2-3-2-delayexchange-原理"},{default:t(()=>[a("2.3.2.DelayExchange 原理")]),_:1})]),n("li",null,[e(s,{to:"#_2-3-3-使用-delayexchange"},{default:t(()=>[a("2.3.3.使用 DelayExchange")]),_:1})]),n("li",null,[e(s,{to:"#_2-3-4-总结"},{default:t(()=>[a("2.3.4.总结")]),_:1})])])]),n("li",null,[e(s,{to:"#_3-1-消息堆积问题"},{default:t(()=>[a("3.1.消息堆积问题")]),_:1})]),n("li",null,[e(s,{to:"#_3-2-惰性队列"},{default:t(()=>[a("3.2.惰性队列")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_3-2-1-基于命令行设置-lazy-queue"},{default:t(()=>[a("3.2.1.基于命令行设置 lazy-queue")]),_:1})]),n("li",null,[e(s,{to:"#_3-2-2-基于-bean-声明-lazy-queue"},{default:t(()=>[a("3.2.2.基于@Bean 声明 lazy-queue")]),_:1})]),n("li",null,[e(s,{to:"#_3-2-3-基于-rabbitlistener-声明-lazyqueue"},{default:t(()=>[a("3.2.3.基于@RabbitListener 声明 LazyQueue")]),_:1})]),n("li",null,[e(s,{to:"#_3-3-总结"},{default:t(()=>[a("3.3.总结")]),_:1})])])]),n("li",null,[e(s,{to:"#_4-1-集群分类"},{default:t(()=>[a("4.1.集群分类")]),_:1})]),n("li",null,[e(s,{to:"#_4-2-普通集群"},{default:t(()=>[a("4.2.普通集群")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_4-2-1-集群结构和特征"},{default:t(()=>[a("4.2.1.集群结构和特征")]),_:1})]),n("li",null,[e(s,{to:"#_4-2-2-部署"},{default:t(()=>[a("4.2.2.部署")]),_:1})])])]),n("li",null,[e(s,{to:"#_4-3-镜像集群"},{default:t(()=>[a("4.3.镜像集群")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_4-3-1-集群结构和特征"},{default:t(()=>[a("4.3.1.集群结构和特征")]),_:1})]),n("li",null,[e(s,{to:"#_4-3-2-部署"},{default:t(()=>[a("4.3.2.部署")]),_:1})])])]),n("li",null,[e(s,{to:"#_4-4-仲裁队列"},{default:t(()=>[a("4.4.仲裁队列")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_4-4-1-集群特征"},{default:t(()=>[a("4.4.1.集群特征")]),_:1})]),n("li",null,[e(s,{to:"#_4-4-2-部署"},{default:t(()=>[a("4.4.2.部署")]),_:1})]),n("li",null,[e(s,{to:"#_4-4-3-java-代码创建仲裁队列"},{default:t(()=>[a("4.4.3.Java 代码创建仲裁队列")]),_:1})]),n("li",null,[e(s,{to:"#_4-4-4-springamqp-连接-mq-集群"},{default:t(()=>[a("4.4.4.SpringAMQP 连接 MQ 集群")]),_:1})])])])])]),F])}const G=l(K,[["render",J],["__file","index.html.vue"]]);export{G as default};
