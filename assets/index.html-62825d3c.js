import{_ as o,r as l,o as c,c as r,a as n,e as a,w as t,b as s,d as p}from"./app-a153c100.js";const d="/MyBlog/assets/1683975708940-4dd481a8.png",u="/MyBlog/assets/1683975726310-e058064a.png",g="/MyBlog/assets/1683975746575-8da0dd6f.png",k="/MyBlog/assets/1683983973263-624571e4.png",v="/MyBlog/assets/1683975807707-1a2b4f6b.png",m="/MyBlog/assets/1683975820684-38933bd9.png",h="/MyBlog/assets/1683975898600-e4fba532.png",b="/MyBlog/assets/1683975921728-426a75ac.png",x="/MyBlog/assets/1683975936316-11ab9733.png",f="/MyBlog/assets/1683975954823-ae1046c9.png",y="/MyBlog/assets/1683975968406-7f78fee8.png",_="/MyBlog/assets/1683975982417-b8094615.png",q="/MyBlog/assets/1683975999348-30d0f98d.png",M="/MyBlog/assets/1683976010777-17607607.png",w="/MyBlog/assets/1683976030449-d7678a9d.png",N="/MyBlog/assets/1683976042928-5a8e263b.png",S="/MyBlog/assets/1683976063645-bfd05724.png",B="/MyBlog/assets/1683976084042-ad777fde.png",j="/MyBlog/assets/1683976102645-5f6cf4eb.png",A="/MyBlog/assets/1683976122828-7e2a6eea.png",C="/MyBlog/assets/1683976137918-8b33fd97.png",I="/MyBlog/assets/1683976154109-bd0848bf.png",L={},D=n("h1",{id:"reggie-开发笔记【优化八】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reggie-开发笔记【优化八】","aria-hidden":"true"},"#"),s(" Reggie 开发笔记【优化八】")],-1),P={class:"table-of-contents"},R=p('<h2 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离" aria-hidden="true">#</a> 读写分离</h2><p><strong>问题分析</strong><img src="'+d+'" alt="1683975708940"><img src="'+u+'" alt="1683975726310"></p><h3 id="mysql-主从复制" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制" aria-hidden="true">#</a> Mysql 主从复制</h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p>MysSQL 主从复制是一个异步的复制过程，底层是基于 Mysql 数据库自带的<strong>二进制日志</strong>功能。就是一台或多台 AysQL 数据库(slave，即<strong>从库</strong>）从另一台 MysQL 数据库(master，即<strong>主库</strong>）进行日志的复制然后再解析日志并应用到自身，最终实现<strong>从库</strong>的数据和<strong>主库</strong>的数据保持一致。MySQL 主从复制是 MysQL 数据库自带功能，无需借助第三方工具。</p><p>MysQL 复制过程分成三步:</p><ul><li>master 将改变记录到二进制日志（ binary log)</li><li>slave 将 master 的 binary log 拷贝到它的中继日志（relay log）</li><li>slave 重做中继日志中的事件，将改变应用到自己的数据库中</li></ul><p><img src="'+g+`" alt="1683975746575"></p><h4 id="配置-前置条件" tabindex="-1"><a class="header-anchor" href="#配置-前置条件" aria-hidden="true">#</a> 配置-前置条件</h4><p>提前准备好两台服务器，分别安装 Mysql 并启动服务成功</p><ul><li>主库 Master 192.168.188.100</li><li>从库 slave 192.168.188.101</li></ul><p><strong>注意</strong>：克隆的虚拟机需要修改数据库的 uuid</p><h4 id="配置-主库-master" tabindex="-1"><a class="header-anchor" href="#配置-主库-master" aria-hidden="true">#</a> 配置-主库 Master</h4><p>第一步:修改 Mysq1 数据库的配置文件/etc/my.cnf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
log-bin<span class="token operator">=</span>mysql-bin <span class="token comment">#[必须]启用二进制日志</span>
server-id<span class="token operator">=</span><span class="token number">100</span> <span class="token comment">#[必须]服务器唯一ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步:重启 Mysql 服务 <code>systemctl restart mysqld</code></p><p>第三步:登录 Mysql 数据库，执行下面 SQL</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GRANT REPLICATION SLAVE ON *.* to <span class="token string">&#39;xiaoming&#39;</span>@<span class="token string">&#39;%&#39;</span> identified by <span class="token string">&#39;Root@123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注:上面 SQL 的作用是创建一个用户<strong>xiaoming</strong>，密码为<strong>Root@123456</strong>，并且给 xiaoming 用户授予<strong>REPLICATION SLAVE</strong>权限。常用于建立复制时所需要用到的用户权限，也就是 slave 必须被 master 授权具有该权限的用户，才能通过该用户复制。</p><p>第四步:登录 Mysql 数据库，执行下面 SQL，记录下结果中 File 和 Position 的值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show master status<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="1683983973263"></p><p>注:上面 SQL 的作用是查看 Master 的状态，执行完此 SQL 后不要再执行任何操作</p><h4 id="配置-从库-slave" tabindex="-1"><a class="header-anchor" href="#配置-从库-slave" aria-hidden="true">#</a> 配置-从库 Slave</h4><p>第一步:修改 Mysq1 数据库的配置文件/etc/my.cnf</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">server-id</span><span class="token punctuation">=</span><span class="token value attr-value">101 #[必须]服务器唯一ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步:重启 Mysql 服务 <code>systemctl restart mysqld</code></p><p>第三步:登录 Mysq1 数据库，执行下面 SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>change master <span class="token keyword">to</span>
master_host<span class="token operator">=</span><span class="token string">&#39;192.168.188.100&#39;</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&#39;Root@123456&#39;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&#39;mysql-bin.000003&#39;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">441</span><span class="token punctuation">;</span>

<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步:登录 Mysql 数据库，执行下面 SQL，查看从数据库的状态<code>show slave status;</code><img src="`+v+'" alt="1683975807707"></p><h3 id="读写分离案例" tabindex="-1"><a class="header-anchor" href="#读写分离案例" aria-hidden="true">#</a> 读写分离案例</h3><h4 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h4><p>面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。对于同一时刻有大量并发读操作和较少写操作类型的应用系统来说，将数据库拆分为<strong>主库和从库</strong>，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。 <img src="'+m+`" alt="1683975820684"></p><h4 id="sharding-jdbc-介绍" tabindex="-1"><a class="header-anchor" href="#sharding-jdbc-介绍" aria-hidden="true">#</a> Sharding-JDBC 介绍</h4><p>Sharding-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。它使用客户端直连数据库,以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><p>使用 Sharding-JDBC 可以在程序中轻松的实现数据库读写分离。</p><ul><li>适用于任何基于 JDBC 的 ORM 框架，如: JPA, Hibernate,Mybatis, Spring JDBC Template 或直接使用 JDBC。</li><li>支持任何第三方的数据库连接池，如:DBCP，C3PO,BoneCP, Druid, HikariCP 等。</li><li>支持任意实现 JDBC 规范的数据库。目前支持 MySQL，Oracle,SQLServer，PostgreSQL 以及任何遵循 SQL92 标准的数据库。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0-RC1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="入门案例" tabindex="-1"><a class="header-anchor" href="#入门案例" aria-hidden="true">#</a> 入门案例</h4><p>使用 Sharding-JDBC 实现读写分离步骤:</p><p>1、导入 maven 坐标</p><p>2、在配置文件中配置读写分离规则</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
      <span class="token key atrule">names</span><span class="token punctuation">:</span> master<span class="token punctuation">,</span>slave
      <span class="token comment"># 主数据源</span>
      <span class="token key atrule">master</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.188.100<span class="token punctuation">:</span>3306/rw<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span><span class="token number">8</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
      <span class="token comment"># 从数据源</span>
      <span class="token key atrule">slave</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.188.101<span class="token punctuation">:</span>3306/rw<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span><span class="token number">8</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">masterslave</span><span class="token punctuation">:</span>
      <span class="token comment"># 读写分离配置</span>
      <span class="token key atrule">load-balance-algorithm-type</span><span class="token punctuation">:</span> round_robin <span class="token comment">#轮询</span>
      <span class="token comment"># 最终的数据源名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> dataSource
      <span class="token comment"># 主库数据源名称</span>
      <span class="token key atrule">master-data-source-name</span><span class="token punctuation">:</span> master
      <span class="token comment"># 从库数据源名称列表，多个逗号分隔</span>
      <span class="token key atrule">slave-data-source-names</span><span class="token punctuation">:</span> slave
    <span class="token key atrule">props</span><span class="token punctuation">:</span>
      <span class="token key atrule">sql</span><span class="token punctuation">:</span>
        <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启SQL显示，默认false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在配置文件中配置<strong>允许 bean 定义覆盖</strong>配置项</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目实现读写分离" tabindex="-1"><a class="header-anchor" href="#项目实现读写分离" aria-hidden="true">#</a> 项目实现读写分离</h3><h4 id="环境准备-主从复制" tabindex="-1"><a class="header-anchor" href="#环境准备-主从复制" aria-hidden="true">#</a> 环境准备(主从复制)</h4><p>直接使用我们前面在虚拟机中搭建的主从复制的数据库环境即可。</p><p>在主库中创建瑞吉外卖项目的业务数据库 reggie 并导入相关表结构和数据。</p><h4 id="代码构造" tabindex="-1"><a class="header-anchor" href="#代码构造" aria-hidden="true">#</a> 代码构造</h4><p>在项目中加入 Sharding-JDBC 实现读写分离步骤:</p><p>1、导入 maven 坐标</p><p>2、在配置文件中配置读写分离规则</p><p>3、在配置文件中配置<strong>允许 bean 定义覆盖</strong>配置项</p><h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h2><h3 id="nginx-概述" tabindex="-1"><a class="header-anchor" href="#nginx-概述" aria-hidden="true">#</a> Nginx 概述</h3><p>Nginx 是一款轻量级的 web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力在同类型的网页服务器中表现较好，中国大陆使用 nginx 的网站有:百度、京东、新浪、网易、腾讯、淘宝等。</p><p>Nginx 是由伊戈尔·赛索耶夫为俄罗斯访问量第二的 Rambler .ru 站点（俄文: Paw6nep)开发的，第一个公开版本 0.1.e 发布于 2004 年 10 月 4 日。</p>`,58),E={href:"https://nginx.org/",target:"_blank",rel:"noopener noreferrer"},J=n("h3",{id:"nginx-下载与安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx-下载与安装","aria-hidden":"true"},"#"),s(" Nginx 下载与安装")],-1),Q={href:"https://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"安装过程: 1、安装依赖包 yum -y install gcc pcre-devel zlib-devel openssl openssl-devel",-1),O={href:"https://nginx.org/download/nginx-1.16.1.tar.gz",target:"_blank",rel:"noopener noreferrer"},V=p('<p>3、解压 tar -zxvf nginx-1.16.1.tar.gz</p><p>4、cd nginx-1.16.1</p><p>5、./configure --prefix=/usr/local/nginx</p><p>6、make &amp;&amp; make install</p><h3 id="nginx-目录结构" tabindex="-1"><a class="header-anchor" href="#nginx-目录结构" aria-hidden="true">#</a> Nginx 目录结构</h3><p>安装完 Nginx 后，我们先来熟悉一下 Nginx 的目录结构，如下图: <img src="'+h+'" alt="1683975898600"></p><p>重点目录/文件:</p><ul><li>conf/nginx.conf nginx 配置文件</li><li>html 存放静态文件(html、css、Js 等)</li><li>logs 日志目录，存放日志文件</li><li>sbin/nginx 二进制文件，用于启动、停止 Nginx 服务</li></ul><h3 id="nginx-命令" tabindex="-1"><a class="header-anchor" href="#nginx-命令" aria-hidden="true">#</a> Nginx 命令</h3><h4 id="查看版本" tabindex="-1"><a class="header-anchor" href="#查看版本" aria-hidden="true">#</a> 查看版本</h4><p>在 sbin 目录下输入<code>./nginx -v</code><img src="'+b+`" alt="1683975921728"></p><h4 id="检查配置文件正确性" tabindex="-1"><a class="header-anchor" href="#检查配置文件正确性" aria-hidden="true">#</a> 检查配置文件正确性</h4><p>在启动 Nginx 服务之前，可以先检查一下 conf/nginx.conf 文件配置的是否有错误，命令如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-t</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+`" alt="1683975936316"></p><h4 id="启动和停止" tabindex="-1"><a class="header-anchor" href="#启动和停止" aria-hidden="true">#</a> 启动和停止</h4><p>在 sbin 目录下。</p><p>启动 Nginx 服务使用如下命令:<code>./nginx</code></p><p>停止 Nginx 服务使用如下命令:<code>./nginx -s stop</code></p><p>启动完成后可以查看 Nginx 进程:<code>ps -ef | grep nginx</code></p><p>修改运行的进程数目： <code>vim usr/local/nginx/conf/nginx.conf</code></p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>worker_processes  2;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="重新加载配置文件" tabindex="-1"><a class="header-anchor" href="#重新加载配置文件" aria-hidden="true">#</a> 重新加载配置文件</h4><p>可以通过修改 profile 文件配置环境变量，在<code>/</code>目录下可以直接使用 nginx 命令</p><p>vim etc/profile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/nginx/sbin:<span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使配置文件生效：<code>source /etc/profile</code></p><p>重启 Nginx：<code>nginx -s reload</code></p><p>停止 Nginx：<code>nginx -s stop</code></p><p>启动 Nginx：<code>nginx</code></p><h3 id="nginx-配置文件结构" tabindex="-1"><a class="header-anchor" href="#nginx-配置文件结构" aria-hidden="true">#</a> Nginx 配置文件结构</h3><p><strong>整体结构介绍</strong></p><p>Nginx 配置文件(conf/nginx.conf)整体分为三部分:</p><ul><li><p>全局块 和 Nginx 运行相关的全局配置</p></li><li><p>events 块 和网络连接相关的配置</p></li><li><p>http 块</p><p>代理、缓存、日志记录、虚拟主机配置</p><ul><li>http 全局块</li><li>Server 块 <ul><li>Server 全局块</li><li>location 块</li></ul></li></ul></li></ul><p><strong>注意</strong>:http 块中可以配置多个 Server 块，每个 Server 块中可以配置多个 location 块。</p><p><img src="`+f+`" alt="1683975954823"></p><h3 id="nginx-具体应用" tabindex="-1"><a class="header-anchor" href="#nginx-具体应用" aria-hidden="true">#</a> Nginx 具体应用</h3><h4 id="部署静态资源" tabindex="-1"><a class="header-anchor" href="#部署静态资源" aria-hidden="true">#</a> 部署静态资源</h4><p>Nginx 可以作为静态 web 服务器来部署静态资源。静态资源指在服务端真实存在并且能够直接展示的一些文件，比如常见的 html 页面、css 文件、js 文件、图片、视频等资源。</p><p>相对于 Tomcat，Nginx 处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到 Nginx 中。</p><p>将静态资源部署到 Nginx 非常简单，只需要将文件复制到 Nginx 安装目录下的 html 目录中即可。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>server <span class="token punctuation">{</span>
  listen <span class="token number">80</span>;                #监听端口
  server_name localhost;    #服务器名称
  location/<span class="token punctuation">{</span>                #匹配客户端请求url
    root html;              #指定静态资源根目录
    index index.html;       #指定默认首页
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理" aria-hidden="true">#</a> 反向代理</h4><ul><li><p>正向代理</p><p>是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p><p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问 Internet 的途径。</p><p>正向代理一般是<strong>在客户端设置代理服务器</strong>，通过代理服务器转发请求，最终访问到目标服务器。 <img src="`+y+'" alt="1683975968406"></p></li><li><p>反向代理</p><p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。</p><p>用户<strong>不需要知道目标服务器的地址</strong>，也无须在用户端作任何设定。 <img src="'+_+`" alt="1683975982417"></p></li><li><p>配置反向代理</p></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>server <span class="token punctuation">{</span>
  listen       <span class="token number">82</span>;
  server_name  localhost;

  location / <span class="token punctuation">{</span>
          proxy_pass http<span class="token operator">:</span><span class="token comment">//192.168.188.101:8080; #反向代理配置</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h4><p>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</p><ul><li>应用集群:将同一应用部署到多台机器上，组成应用集群，接收负载均衡器分发的请求，进行业务处理并返回响应数据</li><li>负载均衡器:将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理 <img src="`+q+`" alt="1683975999348"></li></ul><p><strong>配置负载均衡</strong>: 修改 ngnix.conf</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">upstream targetserver</span><span class="token punctuation">{</span>    #upstream指令可以定义一组服务器
  server 192.168.188.101<span class="token punctuation">:</span>8080<span class="token punctuation">;</span>
  server 192.168.188.101<span class="token punctuation">:</span>8081<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">server</span> <span class="token punctuation">{</span>
  listen  8080<span class="token punctuation">;</span>
  server_name     localhost<span class="token punctuation">;</span>
  <span class="token selector">location /</span> <span class="token punctuation">{</span>
          proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//targetserver<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>负载均衡策略</strong><img src="`+M+'" alt="1683976010777"></p><h2 id="前后端分离开发" tabindex="-1"><a class="header-anchor" href="#前后端分离开发" aria-hidden="true">#</a> 前后端分离开发</h2><h3 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3><p><img src="'+w+'" alt="1683976030449"></p><ul><li>开发人员同时负责前端和后端代码开发，分工不明确</li><li>开发效率低</li><li>前后端代码混合在一个工程中，不便于管理</li><li>对开发人员要求高，人员招聘困难</li></ul><h3 id="前后端分离开发-1" tabindex="-1"><a class="header-anchor" href="#前后端分离开发-1" aria-hidden="true">#</a> 前后端分离开发</h3><h4 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h4><p><strong>前后端分离开发</strong>，就是在项目开发过程中，对于前端代码的开发由专门的<strong>前端开发人员</strong>负责，后端代码则由<strong>后端开发人员</strong>负责，这样可以做到分工明确、各司其职，提高开发效率，前后端代码并行开发，可以加快项目开发进度。目前，前后端分离开发方式已经被越来越多的公司所采用，成为当前项目开发的主流开发方式。</p><p>前后端分离开发后，从工程结构上也会发生变化，即前后端代码不再混合在同一个 maven 工程中，而是分为<strong>前端工程和后端工程</strong>。 <img src="'+N+'" alt="1683976042928"></p><h4 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程" aria-hidden="true">#</a> 开发流程</h4><p>前后端分离开发后，面临一个问题，就是前端开发人员和后端开发人员如何进行配合来共同开发一个项目?可以按照如下流程进行: <img src="'+S+'" alt="1683976063645"><img src="'+B+'" alt="1683976084042"></p><p><strong>接口(API 接口)</strong> 就是一个 http 的请求地址，主要就是去定义:请求路径、请求方式、请求参数、响应数据等内容</p><h4 id="前端技术栈" tabindex="-1"><a class="header-anchor" href="#前端技术栈" aria-hidden="true">#</a> 前端技术栈</h4><p>开发工具</p><ul><li>Visual Studio Code</li><li>hbuilder</li></ul><p>技术框架</p><ul><li>nodejs</li><li>VUE</li><li>ElementUI</li><li>mock</li><li>webpack</li></ul><h3 id="yapi" tabindex="-1"><a class="header-anchor" href="#yapi" aria-hidden="true">#</a> Yapi</h3><h4 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2" aria-hidden="true">#</a> 介绍</h4><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p><p>YApi 让接口开发更简单高效，让接口的管理更具可读性、可维护性，让团队协作更合理。</p>',71),H={href:"https://github.com/YMFE/yapi",target:"_blank",rel:"noopener noreferrer"},Y=p('<p>要使用 YApi，需要自己进行部署。</p><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><p>使用 YApi 可以执行下面操作</p><ul><li>添加项目</li><li>添加分类</li><li>添加接口</li><li>编辑接口</li><li>查看接口</li></ul><h3 id="swagger" tabindex="-1"><a class="header-anchor" href="#swagger" aria-hidden="true">#</a> Swagger</h3><h4 id="介绍-3" tabindex="-1"><a class="header-anchor" href="#介绍-3" aria-hidden="true">#</a> 介绍</h4><p>使用 Swagger 你只需要按照它的规范去定义接口及接口相关的信息，再通过 Swagger 衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，以及在线接口调试页面等等。</p>',7),F={href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"},z=p(`<p>knife4j 是为 Java MVC 框架集成 Swagger 生成 Api 文档的增强解决方案。</p><h4 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h4><p>操作步骤:</p><p>1、导入 knife4j 的 maven 坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、导入 knife4j 相关配置类</p><p>WebMvcConfig</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token annotation punctuation">@EnableKnife4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//文档类型</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">&quot;com.ka.reggie.controller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;瑞吉外卖&quot;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;瑞吉外卖接口文档&quot;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、设置静态资源，否则接口文档页面无法访问(addResourceHandlers 方法)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;doc.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、在 LoginCheckFilter 中设置不需要处理的请求路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
        <span class="token string">&quot;/employee/login&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/employee/logout&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/backend/**&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/front/**&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/common/**&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/user/sendMsg&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">,</span>

        <span class="token string">&quot;/doc.html&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/swagger-resources&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;/v2/api-docs&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Api</td><td>用在请求的类上，例如 Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，通常是实体类，表示一个返回响应数据的信息</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述响应类的属性</td></tr><tr><td>@ApiOperation</td><td>用在请求的方法上，说明方法的用途、作用</td></tr><tr><td>@ApilmplicitParams</td><td>用在请求的方法上，表示一组参数说明</td></tr><tr><td>@ApilmplicitParam</td><td>用在@ApilmplicitParams 注解中，指定一个请求参数的各个方面</td></tr></tbody></table><h3 id="项目部署" tabindex="-1"><a class="header-anchor" href="#项目部署" aria-hidden="true">#</a> 项目部署</h3><h4 id="部署架构" tabindex="-1"><a class="header-anchor" href="#部署架构" aria-hidden="true">#</a> 部署架构</h4><p><img src="`+j+'" alt="1683976102645"></p><h4 id="部署环境说明" tabindex="-1"><a class="header-anchor" href="#部署环境说明" aria-hidden="true">#</a> 部署环境说明</h4><p>服务器:</p><ul><li><p>192.168.138.100（服务器 A)</p><p>Nginx:部署前端项目、配置反向代理</p><p>Mysql:主从复制结构中的主库</p><p>Redis:缓存中间件</p></li><li><p>192.168.138.101（服务器 B)</p><p>jdk:运行 Java 项目</p><p>git:版本控制工具</p><p>maven:项目构建工具</p><p>jar: Spring Boot 项目打成 jar 包基于内置 Tomcat 运行</p><p>Mysql:主从复制结构中的从库</p></li></ul><h4 id="部署前端项目" tabindex="-1"><a class="header-anchor" href="#部署前端项目" aria-hidden="true">#</a> 部署前端项目</h4><p>第一步:在服务器 A 中安装 Nginx，将课程资料中的 dist 目录上传到 Nginx 的 html 目录下</p><p><img src="'+A+`" alt="1683976122828"></p><p>第二步:修改 Nginx 配置文件 nginx.conf</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>server<span class="token punctuation">{</span>
  listen <span class="token number">80</span>;
  server_name localhost;

  location /<span class="token punctuation">{</span>
    root html/dist;
    index index.html;
  <span class="token punctuation">}</span>

  location ^~ /api/<span class="token punctuation">{</span>
          rewrite ^/api/(.*)$ /$<span class="token number">1</span> break;
          proxy_pass http<span class="token operator">:</span><span class="token comment">//192.168.188.101:8080;</span>
  <span class="token punctuation">}</span>

  error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html;
  location = /50x.html<span class="token punctuation">{</span>
      root html;
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="部署后端项目" tabindex="-1"><a class="header-anchor" href="#部署后端项目" aria-hidden="true">#</a> 部署后端项目</h4><p>第一步 ∶ 在服务器 B 中安装 jdk、git、maven、MySQL，使用 git clone 命令将 git 远程仓库的代码克隆下来 <img src="`+C+'" alt="1683976137918"></p><p>第二步:将资料中提供的 reggieStart.sh 文件上传到服务器 B，通过 chmod 命令设置执行权限 <img src="'+I+'" alt="1683976154109"></p><p>第三步:执行 reggieStart.sh 脚本文件，自动部署项目</p><p><strong>注意</strong>： 本人用该脚本从 git 拉取的文件不完整，运行不了，建议用 idea 手动打包部署</p>',30);function W($,G){const e=l("router-link"),i=l("ExternalLinkIcon");return c(),r("div",null,[D,n("nav",P,[n("ul",null,[n("li",null,[a(e,{to:"#读写分离"},{default:t(()=>[s("读写分离")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#mysql-主从复制"},{default:t(()=>[s("Mysql 主从复制")]),_:1})]),n("li",null,[a(e,{to:"#读写分离案例"},{default:t(()=>[s("读写分离案例")]),_:1})]),n("li",null,[a(e,{to:"#项目实现读写分离"},{default:t(()=>[s("项目实现读写分离")]),_:1})])])]),n("li",null,[a(e,{to:"#nginx"},{default:t(()=>[s("Nginx")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#nginx-概述"},{default:t(()=>[s("Nginx 概述")]),_:1})]),n("li",null,[a(e,{to:"#nginx-下载与安装"},{default:t(()=>[s("Nginx 下载与安装")]),_:1})]),n("li",null,[a(e,{to:"#nginx-目录结构"},{default:t(()=>[s("Nginx 目录结构")]),_:1})]),n("li",null,[a(e,{to:"#nginx-命令"},{default:t(()=>[s("Nginx 命令")]),_:1})]),n("li",null,[a(e,{to:"#nginx-配置文件结构"},{default:t(()=>[s("Nginx 配置文件结构")]),_:1})]),n("li",null,[a(e,{to:"#nginx-具体应用"},{default:t(()=>[s("Nginx 具体应用")]),_:1})])])]),n("li",null,[a(e,{to:"#前后端分离开发"},{default:t(()=>[s("前后端分离开发")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#问题分析"},{default:t(()=>[s("问题分析")]),_:1})]),n("li",null,[a(e,{to:"#前后端分离开发-1"},{default:t(()=>[s("前后端分离开发")]),_:1})]),n("li",null,[a(e,{to:"#yapi"},{default:t(()=>[s("Yapi")]),_:1})]),n("li",null,[a(e,{to:"#swagger"},{default:t(()=>[s("Swagger")]),_:1})]),n("li",null,[a(e,{to:"#项目部署"},{default:t(()=>[s("项目部署")]),_:1})])])])])]),R,n("p",null,[s("官网: "),n("a",E,[s("https://nginx.org/"),a(i)])]),J,n("p",null,[s("可以到 Nginx 官方网站下载 Nginx 的安装包，地址为: "),n("a",Q,[s("https://nginx.org/en/download.html"),a(i)])]),T,n("p",null,[s("2、下载 Nginx 安装包 wget "),n("a",O,[s("https://nginx.org/download/nginx-1.16.1.tar.gz"),a(i)]),s("(需要先 yum install wget)")]),V,n("p",null,[s("源码地址: "),n("a",H,[s("https://github.com/YMFE/yapi"),a(i)])]),Y,n("p",null,[s("官网:"),n("a",F,[s("https://swagger.io/"),a(i)])]),z])}const K=o(L,[["render",W],["__file","index.html.vue"]]);export{K as default};
